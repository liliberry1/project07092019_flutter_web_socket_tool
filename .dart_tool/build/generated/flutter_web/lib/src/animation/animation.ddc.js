define(['dart_sdk', 'packages/flutter_web_ui/ui', 'packages/flutter_web/src/foundation/assertions', 'packages/vector_math/vector_math_64', 'packages/flutter_web/src/physics/clamped_simulation'], function(dart_sdk, ui, assertions, vector_math_64, clamped_simulation) {
  'use strict';
  const core = dart_sdk.core;
  const _js_helper = dart_sdk._js_helper;
  const async = dart_sdk.async;
  const _interceptors = dart_sdk._interceptors;
  const typed_data = dart_sdk.typed_data;
  const convert = dart_sdk.convert;
  const math = dart_sdk.math;
  const collection = dart_sdk.collection;
  const _native_typed_data = dart_sdk._native_typed_data;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const ui$ = ui.ui;
  const src__engine = ui.src__engine;
  const src__foundation__assertions = assertions.src__foundation__assertions;
  const src__foundation__serialization = assertions.src__foundation__serialization;
  const src__foundation__diagnostics = assertions.src__foundation__diagnostics;
  const src__foundation__change_notifier = assertions.src__foundation__change_notifier;
  const src__foundation__observer_list = assertions.src__foundation__observer_list;
  const src__foundation__print = assertions.src__foundation__print;
  const src__foundation__bitfield = assertions.src__foundation__bitfield;
  const src__foundation__binding = assertions.src__foundation__binding;
  const src__foundation__constants = assertions.src__foundation__constants;
  const src__foundation__debug = assertions.src__foundation__debug;
  const src__foundation__collections = assertions.src__foundation__collections;
  const vector_math_64$ = vector_math_64.vector_math_64;
  const src__physics__tolerance = clamped_simulation.src__physics__tolerance;
  const src__physics__friction_simulation = clamped_simulation.src__physics__friction_simulation;
  const src__physics__spring_simulation = clamped_simulation.src__physics__spring_simulation;
  const src__physics__simulation = clamped_simulation.src__physics__simulation;
  const src__services__text_editing = Object.create(dart.library);
  const src__painting__alignment = Object.create(dart.library);
  const src__painting__basic_types = Object.create(dart.library);
  const src__services__system_chrome = Object.create(dart.library);
  const src__services__system_channels = Object.create(dart.library);
  const src__services__platform_channel = Object.create(dart.library);
  const src__services__platform_messages = Object.create(dart.library);
  const src__services__message_codecs = Object.create(dart.library);
  const src__services__message_codec = Object.create(dart.library);
  const src__animation__animations = Object.create(dart.library);
  const src__animation__listener_helpers = Object.create(dart.library);
  const src__animation__animation = Object.create(dart.library);
  const src__animation__tween = Object.create(dart.library);
  const src__animation__curves = Object.create(dart.library);
  const src__gestures__eager = Object.create(dart.library);
  const src__gestures__recognizer = Object.create(dart.library);
  const src__gestures__pointer_router = Object.create(dart.library);
  const src__gestures__events = Object.create(dart.library);
  const src__gestures__team = Object.create(dart.library);
  const src__gestures__binding = Object.create(dart.library);
  const src__gestures__pointer_signal_resolver = Object.create(dart.library);
  const src__gestures__hit_test = Object.create(dart.library);
  const src__gestures__debug = Object.create(dart.library);
  const src__gestures__converter = Object.create(dart.library);
  const src__gestures__arena = Object.create(dart.library);
  const src__util = Object.create(dart.library);
  const src__gestures__constants = Object.create(dart.library);
  const src__services__system_sound = Object.create(dart.library);
  const src__painting__gradient = Object.create(dart.library);
  const src__services__raw_keyboard_fuchsia = Object.create(dart.library);
  const src__services__raw_keyboard = Object.create(dart.library);
  const src__services__raw_keyboard_linux = Object.create(dart.library);
  const src__services__keyboard_maps = Object.create(dart.library);
  const src__services__keyboard_key = Object.create(dart.library);
  const src__services__raw_keyboard_macos = Object.create(dart.library);
  const src__services__raw_keyboard_android = Object.create(dart.library);
  const src__gestures__drag = Object.create(dart.library);
  const src__gestures__drag_details = Object.create(dart.library);
  const src__gestures__velocity_tracker = Object.create(dart.library);
  const src__gestures__lsq_solver = Object.create(dart.library);
  const src__painting__matrix_utils = Object.create(dart.library);
  const src__services__clipboard = Object.create(dart.library);
  const src__services__system_navigator = Object.create(dart.library);
  const src__widgets__icon_data = Object.create(dart.library);
  const src__gestures__multidrag = Object.create(dart.library);
  const src__painting__colors = Object.create(dart.library);
  const src__painting__clip = Object.create(dart.library);
  const src__widgets__scroll_simulation = Object.create(dart.library);
  const src__animation__tween_sequence = Object.create(dart.library);
  const src__gestures__scale = Object.create(dart.library);
  const src__painting__border_radius = Object.create(dart.library);
  const src__painting__paint_utilities = Object.create(dart.library);
  const src__gestures__tap = Object.create(dart.library);
  const src__scheduler__debug = Object.create(dart.library);
  const src__painting__notched_shapes = Object.create(dart.library);
  const src__painting__geometry = Object.create(dart.library);
  const src__gestures__force_press = Object.create(dart.library);
  const src__gestures__long_press = Object.create(dart.library);
  const src__painting__strut_style = Object.create(dart.library);
  const src__painting__text_style = Object.create(dart.library);
  const src__scheduler__priority = Object.create(dart.library);
  const src__widgets__icon_theme_data = Object.create(dart.library);
  const src__painting__debug = Object.create(dart.library);
  const src__services__platform_views = Object.create(dart.library);
  const src__gestures__multitap = Object.create(dart.library);
  const src__semantics__binding = Object.create(dart.library);
  const src__semantics__debug = Object.create(dart.library);
  const src__painting__fractional_offset = Object.create(dart.library);
  const src__services__haptic_feedback = Object.create(dart.library);
  const src__painting__box_shadow = Object.create(dart.library);
  const src__painting__box_fit = Object.create(dart.library);
  const src__gestures__monodrag = Object.create(dart.library);
  const $substring = dartx.substring;
  const $hashCode = dartx.hashCode;
  const $runtimeType = dartx.runtimeType;
  const $truncate = dartx.truncate;
  const $toDouble = dartx.toDouble;
  const $modulo = dartx['%'];
  const $toStringAsFixed = dartx.toStringAsFixed;
  const $toString = dartx.toString;
  const $add = dartx.add;
  const $cast = dartx.cast;
  const $_get = dartx._get;
  const $remove = dartx.remove;
  const $_set = dartx._set;
  const $buffer = dartx.buffer;
  const $offsetInBytes = dartx.offsetInBytes;
  const $lengthInBytes = dartx.lengthInBytes;
  const $asUint8List = dartx.asUint8List;
  const $asByteData = dartx.asByteData;
  const $length = dartx.length;
  const $forEach = dartx.forEach;
  const $round = dartx.round;
  const $floor = dartx.floor;
  const $truncateToDouble = dartx.truncateToDouble;
  const $clamp = dartx.clamp;
  const $abs = dartx.abs;
  const $values = dartx.values;
  const $clear = dartx.clear;
  const $isEmpty = dartx.isEmpty;
  const $containsValue = dartx.containsValue;
  const $containsKey = dartx.containsKey;
  const $times = dartx['*'];
  const $isNotEmpty = dartx.isNotEmpty;
  const $putIfAbsent = dartx.putIfAbsent;
  const $any = dartx.any;
  const $leftShift = dartx['<<'];
  const $noSuchMethod = dartx.noSuchMethod;
  const $last = dartx.last;
  const $every = dartx.every;
  const $join = dartx.join;
  const $map = dartx.map;
  const $first = dartx.first;
  const $contains = dartx.contains;
  const $padRight = dartx.padRight;
  const $toList = dartx.toList;
  const $lastIndexWhere = dartx.lastIndexWhere;
  const $toUpperCase = dartx.toUpperCase;
  const $toRadixString = dartx.toRadixString;
  const $padLeft = dartx.padLeft;
  const $codeUnitAt = dartx.codeUnitAt;
  const $keys = dartx.keys;
  const $isNaN = dartx.isNaN;
  const $isFinite = dartx.isFinite;
  const $sign = dartx.sign;
  const $addAll = dartx.addAll;
  let IdentityMapOfString$dynamic = () => (IdentityMapOfString$dynamic = dart.constFn(_js_helper.IdentityMap$(core.String, dart.dynamic)))();
  let VoidToNull = () => (VoidToNull = dart.constFn(dart.fnType(core.Null, [])))();
  let JSArrayOfString = () => (JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))();
  let BasicMessageChannelOfString = () => (BasicMessageChannelOfString = dart.constFn(src__services__platform_channel.BasicMessageChannel$(core.String)))();
  let FutureOfByteData = () => (FutureOfByteData = dart.constFn(async.Future$(typed_data.ByteData)))();
  let ByteDataToFutureOfByteData = () => (ByteDataToFutureOfByteData = dart.constFn(dart.fnType(FutureOfByteData(), [typed_data.ByteData])))();
  let FutureOrOfByteData = () => (FutureOrOfByteData = dart.constFn(async.FutureOr$(typed_data.ByteData)))();
  let FutureOfNull = () => (FutureOfNull = dart.constFn(async.Future$(core.Null)))();
  let VoidToFutureOfNull = () => (VoidToFutureOfNull = dart.constFn(dart.fnType(FutureOfNull(), [])))();
  let CompleterOfByteData = () => (CompleterOfByteData = dart.constFn(async.Completer$(typed_data.ByteData)))();
  let ByteDataToNull = () => (ByteDataToNull = dart.constFn(dart.fnType(core.Null, [typed_data.ByteData])))();
  let IdentityMapOfString$ByteDataToFutureOfByteData = () => (IdentityMapOfString$ByteDataToFutureOfByteData = dart.constFn(_js_helper.IdentityMap$(core.String, ByteDataToFutureOfByteData())))();
  let dynamicAnddynamicToNull = () => (dynamicAnddynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic, dart.dynamic])))();
  let AnimationOfdouble = () => (AnimationOfdouble = dart.constFn(src__animation__animation.Animation$(core.double)))();
  let VoidTovoid = () => (VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))();
  let ObserverListOfVoidTovoid = () => (ObserverListOfVoidTovoid = dart.constFn(src__foundation__observer_list.ObserverList$(VoidTovoid())))();
  let ListOfVoidTovoid = () => (ListOfVoidTovoid = dart.constFn(core.List$(VoidTovoid())))();
  let DiagnosticsPropertyOfAnimationLocalListenersMixin = () => (DiagnosticsPropertyOfAnimationLocalListenersMixin = dart.constFn(src__foundation__diagnostics.DiagnosticsProperty$(src__animation__listener_helpers.AnimationLocalListenersMixin)))();
  let SyncIterableOfDiagnosticsPropertyOfAnimationLocalListenersMixin = () => (SyncIterableOfDiagnosticsPropertyOfAnimationLocalListenersMixin = dart.constFn(_js_helper.SyncIterable$(DiagnosticsPropertyOfAnimationLocalListenersMixin())))();
  let IterableOfDiagnosticsPropertyOfAnimationLocalListenersMixin = () => (IterableOfDiagnosticsPropertyOfAnimationLocalListenersMixin = dart.constFn(core.Iterable$(DiagnosticsPropertyOfAnimationLocalListenersMixin())))();
  let VoidToIterableOfDiagnosticsPropertyOfAnimationLocalListenersMixin = () => (VoidToIterableOfDiagnosticsPropertyOfAnimationLocalListenersMixin = dart.constFn(dart.fnType(IterableOfDiagnosticsPropertyOfAnimationLocalListenersMixin(), [])))();
  let AnimationStatusTovoid = () => (AnimationStatusTovoid = dart.constFn(dart.fnType(dart.void, [src__animation__animation.AnimationStatus])))();
  let ObserverListOfAnimationStatusTovoid = () => (ObserverListOfAnimationStatusTovoid = dart.constFn(src__foundation__observer_list.ObserverList$(AnimationStatusTovoid())))();
  let ListOfAnimationStatusTovoid = () => (ListOfAnimationStatusTovoid = dart.constFn(core.List$(AnimationStatusTovoid())))();
  let DiagnosticsPropertyOfAnimationLocalStatusListenersMixin = () => (DiagnosticsPropertyOfAnimationLocalStatusListenersMixin = dart.constFn(src__foundation__diagnostics.DiagnosticsProperty$(src__animation__listener_helpers.AnimationLocalStatusListenersMixin)))();
  let SyncIterableOfDiagnosticsPropertyOfAnimationLocalStatusListenersMixin = () => (SyncIterableOfDiagnosticsPropertyOfAnimationLocalStatusListenersMixin = dart.constFn(_js_helper.SyncIterable$(DiagnosticsPropertyOfAnimationLocalStatusListenersMixin())))();
  let IterableOfDiagnosticsPropertyOfAnimationLocalStatusListenersMixin = () => (IterableOfDiagnosticsPropertyOfAnimationLocalStatusListenersMixin = dart.constFn(core.Iterable$(DiagnosticsPropertyOfAnimationLocalStatusListenersMixin())))();
  let VoidToIterableOfDiagnosticsPropertyOfAnimationLocalStatusListenersMixin = () => (VoidToIterableOfDiagnosticsPropertyOfAnimationLocalStatusListenersMixin = dart.constFn(dart.fnType(IterableOfDiagnosticsPropertyOfAnimationLocalStatusListenersMixin(), [])))();
  let VoidTobool = () => (VoidTobool = dart.constFn(dart.fnType(core.bool, [])))();
  let IdentityMapOfint$GestureArenaEntry = () => (IdentityMapOfint$GestureArenaEntry = dart.constFn(_js_helper.IdentityMap$(core.int, src__gestures__arena.GestureArenaEntry)))();
  let _IdentityHashSetOfint = () => (_IdentityHashSetOfint = dart.constFn(collection._IdentityHashSet$(core.int)))();
  let ListOfGestureArenaEntry = () => (ListOfGestureArenaEntry = dart.constFn(core.List$(src__gestures__arena.GestureArenaEntry)))();
  let IdentityMapOfint$PointerDeviceKind = () => (IdentityMapOfint$PointerDeviceKind = dart.constFn(_js_helper.IdentityMap$(core.int, ui$.PointerDeviceKind)))();
  let DiagnosticsPropertyOfGestureRecognizer = () => (DiagnosticsPropertyOfGestureRecognizer = dart.constFn(src__foundation__diagnostics.DiagnosticsProperty$(src__gestures__recognizer.GestureRecognizer)))();
  let SyncIterableOfDiagnosticsNode = () => (SyncIterableOfDiagnosticsNode = dart.constFn(_js_helper.SyncIterable$(src__foundation__diagnostics.DiagnosticsNode)))();
  let IterableOfDiagnosticsNode = () => (IterableOfDiagnosticsNode = dart.constFn(core.Iterable$(src__foundation__diagnostics.DiagnosticsNode)))();
  let VoidToIterableOfDiagnosticsNode = () => (VoidToIterableOfDiagnosticsNode = dart.constFn(dart.fnType(IterableOfDiagnosticsNode(), [])))();
  let DiagnosticsPropertyOfObject = () => (DiagnosticsPropertyOfObject = dart.constFn(src__foundation__diagnostics.DiagnosticsProperty$(core.Object)))();
  let EnumPropertyOfGestureRecognizerState = () => (EnumPropertyOfGestureRecognizerState = dart.constFn(src__foundation__diagnostics.EnumProperty$(src__gestures__recognizer.GestureRecognizerState)))();
  let LinkedHashSetOf_RouteEntry = () => (LinkedHashSetOf_RouteEntry = dart.constFn(collection.LinkedHashSet$(src__gestures__pointer_router._RouteEntry)))();
  let IdentityMapOfint$LinkedHashSetOf_RouteEntry = () => (IdentityMapOfint$LinkedHashSetOf_RouteEntry = dart.constFn(_js_helper.IdentityMap$(core.int, LinkedHashSetOf_RouteEntry())))();
  let _HashSetOf_RouteEntry = () => (_HashSetOf_RouteEntry = dart.constFn(collection._HashSet$(src__gestures__pointer_router._RouteEntry)))();
  let VoidToLinkedHashSetOf_RouteEntry = () => (VoidToLinkedHashSetOf_RouteEntry = dart.constFn(dart.fnType(LinkedHashSetOf_RouteEntry(), [])))();
  let DiagnosticsPropertyOfPointerEvent = () => (DiagnosticsPropertyOfPointerEvent = dart.constFn(src__foundation__diagnostics.DiagnosticsProperty$(src__gestures__events.PointerEvent)))();
  let SyncIterableOfDiagnosticsPropertyOfPointerEvent = () => (SyncIterableOfDiagnosticsPropertyOfPointerEvent = dart.constFn(_js_helper.SyncIterable$(DiagnosticsPropertyOfPointerEvent())))();
  let IterableOfDiagnosticsPropertyOfPointerEvent = () => (IterableOfDiagnosticsPropertyOfPointerEvent = dart.constFn(core.Iterable$(DiagnosticsPropertyOfPointerEvent())))();
  let VoidToIterableOfDiagnosticsPropertyOfPointerEvent = () => (VoidToIterableOfDiagnosticsPropertyOfPointerEvent = dart.constFn(dart.fnType(IterableOfDiagnosticsPropertyOfPointerEvent(), [])))();
  let ListOf_RouteEntry = () => (ListOf_RouteEntry = dart.constFn(core.List$(src__gestures__pointer_router._RouteEntry)))();
  let _RouteEntryTobool = () => (_RouteEntryTobool = dart.constFn(dart.fnType(core.bool, [src__gestures__pointer_router._RouteEntry])))();
  let DiagnosticsPropertyOfOffset = () => (DiagnosticsPropertyOfOffset = dart.constFn(src__foundation__diagnostics.DiagnosticsProperty$(ui$.Offset)))();
  let DiagnosticsPropertyOfDuration = () => (DiagnosticsPropertyOfDuration = dart.constFn(src__foundation__diagnostics.DiagnosticsProperty$(core.Duration)))();
  let EnumPropertyOfPointerDeviceKind = () => (EnumPropertyOfPointerDeviceKind = dart.constFn(src__foundation__diagnostics.EnumProperty$(ui$.PointerDeviceKind)))();
  let DiagnosticsPropertyOfbool = () => (DiagnosticsPropertyOfbool = dart.constFn(src__foundation__diagnostics.DiagnosticsProperty$(core.bool)))();
  let JSArrayOfGestureArenaMember = () => (JSArrayOfGestureArenaMember = dart.constFn(_interceptors.JSArray$(src__gestures__arena.GestureArenaMember)))();
  let IdentityMapOfint$_CombiningGestureArenaMember = () => (IdentityMapOfint$_CombiningGestureArenaMember = dart.constFn(_js_helper.IdentityMap$(core.int, src__gestures__team._CombiningGestureArenaMember)))();
  let VoidTo_CombiningGestureArenaMember = () => (VoidTo_CombiningGestureArenaMember = dart.constFn(dart.fnType(src__gestures__team._CombiningGestureArenaMember, [])))();
  let ListQueueOfPointerEvent = () => (ListQueueOfPointerEvent = dart.constFn(collection.ListQueue$(src__gestures__events.PointerEvent)))();
  let IdentityMapOfint$HitTestResult = () => (IdentityMapOfint$HitTestResult = dart.constFn(_js_helper.IdentityMap$(core.int, src__gestures__hit_test.HitTestResult)))();
  let DiagnosticsPropertyOfHitTestTarget = () => (DiagnosticsPropertyOfHitTestTarget = dart.constFn(src__foundation__diagnostics.DiagnosticsProperty$(src__gestures__hit_test.HitTestTarget)))();
  let SyncIterableOfDiagnosticsPropertyOfObject = () => (SyncIterableOfDiagnosticsPropertyOfObject = dart.constFn(_js_helper.SyncIterable$(DiagnosticsPropertyOfObject())))();
  let IterableOfDiagnosticsPropertyOfObject = () => (IterableOfDiagnosticsPropertyOfObject = dart.constFn(core.Iterable$(DiagnosticsPropertyOfObject())))();
  let VoidToIterableOfDiagnosticsPropertyOfObject = () => (VoidToIterableOfDiagnosticsPropertyOfObject = dart.constFn(dart.fnType(IterableOfDiagnosticsPropertyOfObject(), [])))();
  let DiagnosticsPropertyOfPointerSignalEvent = () => (DiagnosticsPropertyOfPointerSignalEvent = dart.constFn(src__foundation__diagnostics.DiagnosticsProperty$(src__gestures__events.PointerSignalEvent)))();
  let SyncIterableOfDiagnosticsPropertyOfPointerSignalEvent = () => (SyncIterableOfDiagnosticsPropertyOfPointerSignalEvent = dart.constFn(_js_helper.SyncIterable$(DiagnosticsPropertyOfPointerSignalEvent())))();
  let IterableOfDiagnosticsPropertyOfPointerSignalEvent = () => (IterableOfDiagnosticsPropertyOfPointerSignalEvent = dart.constFn(core.Iterable$(DiagnosticsPropertyOfPointerSignalEvent())))();
  let VoidToIterableOfDiagnosticsPropertyOfPointerSignalEvent = () => (VoidToIterableOfDiagnosticsPropertyOfPointerSignalEvent = dart.constFn(dart.fnType(IterableOfDiagnosticsPropertyOfPointerSignalEvent(), [])))();
  let JSArrayOfHitTestEntry = () => (JSArrayOfHitTestEntry = dart.constFn(_interceptors.JSArray$(src__gestures__hit_test.HitTestEntry)))();
  let ListQueueOfMatrix4 = () => (ListQueueOfMatrix4 = dart.constFn(collection.ListQueue$(vector_math_64$.Matrix4)))();
  let doubleTobool = () => (doubleTobool = dart.constFn(dart.fnType(core.bool, [core.double])))();
  let VoidTo_PointerState = () => (VoidTo_PointerState = dart.constFn(dart.fnType(src__gestures__converter._PointerState, [])))();
  let SyncIterableOfPointerEvent = () => (SyncIterableOfPointerEvent = dart.constFn(_js_helper.SyncIterable$(src__gestures__events.PointerEvent)))();
  let IdentityMapOfint$_PointerState = () => (IdentityMapOfint$_PointerState = dart.constFn(_js_helper.IdentityMap$(core.int, src__gestures__converter._PointerState)))();
  let GestureArenaMemberToString = () => (GestureArenaMemberToString = dart.constFn(dart.fnType(core.String, [src__gestures__arena.GestureArenaMember])))();
  let IdentityMapOfint$_GestureArena = () => (IdentityMapOfint$_GestureArena = dart.constFn(_js_helper.IdentityMap$(core.int, src__gestures__arena._GestureArena)))();
  let VoidTo_GestureArena = () => (VoidTo_GestureArena = dart.constFn(dart.fnType(src__gestures__arena._GestureArena, [])))();
  let ListOfdouble = () => (ListOfdouble = dart.constFn(core.List$(core.double)))();
  let intTodouble = () => (intTodouble = dart.constFn(dart.fnType(core.double, [core.int])))();
  let ColorToColor = () => (ColorToColor = dart.constFn(dart.fnType(ui$.Color, [ui$.Color])))();
  let SplayTreeSetOfdouble = () => (SplayTreeSetOfdouble = dart.constFn(collection.SplayTreeSet$(core.double)))();
  let doubleToColor = () => (doubleToColor = dart.constFn(dart.fnType(ui$.Color, [core.double])))();
  let intAndintAndintToKeyboardSide = () => (intAndintAndintToKeyboardSide = dart.constFn(dart.fnType(src__services__raw_keyboard.KeyboardSide, [core.int, core.int, core.int])))();
  let LinkedMapOfModifierKey$KeyboardSide = () => (LinkedMapOfModifierKey$KeyboardSide = dart.constFn(_js_helper.LinkedMap$(src__services__raw_keyboard.ModifierKey, src__services__raw_keyboard.KeyboardSide)))();
  let RawKeyEventTovoid = () => (RawKeyEventTovoid = dart.constFn(dart.fnType(dart.void, [src__services__raw_keyboard.RawKeyEvent])))();
  let JSArrayOfRawKeyEventTovoid = () => (JSArrayOfRawKeyEventTovoid = dart.constFn(_interceptors.JSArray$(RawKeyEventTovoid())))();
  let LinkedHashSetOfLogicalKeyboardKey = () => (LinkedHashSetOfLogicalKeyboardKey = dart.constFn(collection.LinkedHashSet$(src__services__keyboard_key.LogicalKeyboardKey)))();
  let MapOfString$dynamic = () => (MapOfString$dynamic = dart.constFn(core.Map$(core.String, dart.dynamic)))();
  let ListOfRawKeyEventTovoid = () => (ListOfRawKeyEventTovoid = dart.constFn(core.List$(RawKeyEventTovoid())))();
  let intAndintToKeyboardSide = () => (intAndintToKeyboardSide = dart.constFn(dart.fnType(src__services__raw_keyboard.KeyboardSide, [core.int, core.int])))();
  let ListOf_PointAtTime = () => (ListOf_PointAtTime = dart.constFn(core.List$(src__gestures__velocity_tracker._PointAtTime)))();
  let JSArrayOfdouble = () => (JSArrayOfdouble = dart.constFn(_interceptors.JSArray$(core.double)))();
  let OffsetToDrag = () => (OffsetToDrag = dart.constFn(dart.fnType(src__gestures__drag.Drag, [ui$.Offset])))();
  let VoidToDrag = () => (VoidToDrag = dart.constFn(dart.fnType(src__gestures__drag.Drag, [])))();
  let IdentityMapOfString$Object = () => (IdentityMapOfString$Object = dart.constFn(_js_helper.IdentityMap$(core.String, core.Object)))();
  let boolTovoid = () => (boolTovoid = dart.constFn(dart.fnType(dart.void, [core.bool])))();
  let JSArrayOf_Interval = () => (JSArrayOf_Interval = dart.constFn(_interceptors.JSArray$(src__animation__tween_sequence._Interval)))();
  let IdentityMapOfint$VelocityTracker = () => (IdentityMapOfint$VelocityTracker = dart.constFn(_js_helper.IdentityMap$(core.int, src__gestures__velocity_tracker.VelocityTracker)))();
  let IdentityMapOfint$Offset = () => (IdentityMapOfint$Offset = dart.constFn(_js_helper.IdentityMap$(core.int, ui$.Offset)))();
  let JSArrayOfint = () => (JSArrayOfint = dart.constFn(_interceptors.JSArray$(core.int)))();
  let ListOfOffset = () => (ListOfOffset = dart.constFn(core.List$(ui$.Offset)))();
  let doubleAnddoubleAnddoubleTodouble = () => (doubleAnddoubleAnddoubleTodouble = dart.constFn(dart.fnType(core.double, [core.double, core.double, core.double])))();
  let StringToString = () => (StringToString = dart.constFn(dart.fnType(core.String, [core.String])))();
  let JSArrayOfDiagnosticsNode = () => (JSArrayOfDiagnosticsNode = dart.constFn(_interceptors.JSArray$(src__foundation__diagnostics.DiagnosticsNode)))();
  let IterablePropertyOfString = () => (IterablePropertyOfString = dart.constFn(src__foundation__diagnostics.IterableProperty$(core.String)))();
  let DiagnosticsPropertyOfFontWeight = () => (DiagnosticsPropertyOfFontWeight = dart.constFn(src__foundation__diagnostics.DiagnosticsProperty$(ui$.FontWeight)))();
  let EnumPropertyOfFontStyle = () => (EnumPropertyOfFontStyle = dart.constFn(src__foundation__diagnostics.EnumProperty$(ui$.FontStyle)))();
  let DiagnosticsNodeTobool = () => (DiagnosticsNodeTobool = dart.constFn(dart.fnType(core.bool, [src__foundation__diagnostics.DiagnosticsNode])))();
  let DiagnosticsPropertyOfColor = () => (DiagnosticsPropertyOfColor = dart.constFn(src__foundation__diagnostics.DiagnosticsProperty$(ui$.Color)))();
  let EnumPropertyOfTextBaseline = () => (EnumPropertyOfTextBaseline = dart.constFn(src__foundation__diagnostics.EnumProperty$(ui$.TextBaseline)))();
  let DiagnosticsPropertyOfLocale = () => (DiagnosticsPropertyOfLocale = dart.constFn(src__foundation__diagnostics.DiagnosticsProperty$(ui$.Locale)))();
  let DiagnosticsPropertyOfPaint = () => (DiagnosticsPropertyOfPaint = dart.constFn(src__foundation__diagnostics.DiagnosticsProperty$(ui$.Paint)))();
  let DiagnosticsPropertyOfTextDecoration = () => (DiagnosticsPropertyOfTextDecoration = dart.constFn(src__foundation__diagnostics.DiagnosticsProperty$(ui$.TextDecoration)))();
  let IdentityMapOfint$VoidTovoid = () => (IdentityMapOfint$VoidTovoid = dart.constFn(_js_helper.IdentityMap$(core.int, VoidTovoid())))();
  let ListOfint = () => (ListOfint = dart.constFn(core.List$(core.int)))();
  let AndroidPointerPropertiesToListOfint = () => (AndroidPointerPropertiesToListOfint = dart.constFn(dart.fnType(ListOfint(), [src__services__platform_views.AndroidPointerProperties])))();
  let AndroidPointerCoordsToListOfdouble = () => (AndroidPointerCoordsToListOfdouble = dart.constFn(dart.fnType(ListOfdouble(), [src__services__platform_views.AndroidPointerCoords])))();
  let intTovoid = () => (intTovoid = dart.constFn(dart.fnType(dart.void, [core.int])))();
  let JSArrayOfintTovoid = () => (JSArrayOfintTovoid = dart.constFn(_interceptors.JSArray$(intTovoid())))();
  let IdentityMapOfint$_TapTracker = () => (IdentityMapOfint$_TapTracker = dart.constFn(_js_helper.IdentityMap$(core.int, src__gestures__multitap._TapTracker)))();
  let IdentityMapOfint$_TapGesture = () => (IdentityMapOfint$_TapGesture = dart.constFn(_js_helper.IdentityMap$(core.int, src__gestures__multitap._TapGesture)))();
  let ListOf_TapGesture = () => (ListOf_TapGesture = dart.constFn(core.List$(src__gestures__multitap._TapGesture)))();
  let JSArrayOfBoxShadow = () => (JSArrayOfBoxShadow = dart.constFn(_interceptors.JSArray$(src__painting__box_shadow.BoxShadow)))();
  let VoidToString = () => (VoidToString = dart.constFn(dart.fnType(core.String, [])))();
  let EnumPropertyOfDragStartBehavior = () => (EnumPropertyOfDragStartBehavior = dart.constFn(src__foundation__diagnostics.EnumProperty$(src__gestures__recognizer.DragStartBehavior)))();
  src__services__text_editing.TextRange = class TextRange extends core.Object {
    get start() {
      return this[start$];
    }
    set start(value) {
      super.start = value;
    }
    get end() {
      return this[end$];
    }
    set end(value) {
      super.end = value;
    }
    get isValid() {
      return dart.notNull(this.start) >= 0 && dart.notNull(this.end) >= 0;
    }
    get isCollapsed() {
      return this.start == this.end;
    }
    get isNormalized() {
      return dart.notNull(this.end) >= dart.notNull(this.start);
    }
    textBefore(text) {
      if (!dart.test(this.isNormalized)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/text_editing.dart", 58, 12, "isNormalized");
      return text[$substring](0, this.start);
    }
    textAfter(text) {
      if (!dart.test(this.isNormalized)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/text_editing.dart", 64, 12, "isNormalized");
      return text[$substring](this.end);
    }
    textInside(text) {
      if (!dart.test(this.isNormalized)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/text_editing.dart", 70, 12, "isNormalized");
      return text[$substring](this.start, this.end);
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!src__services__text_editing.TextRange.is(other)) return false;
      let typedOther = src__services__text_editing.TextRange._check(other);
      return typedOther.start == this.start && typedOther.end == this.end;
    }
    get hashCode() {
      return ui$.hashValues(dart.hashCode(this.start), dart.hashCode(this.end));
    }
    toString() {
      return "TextRange(start: " + dart.str(this.start) + ", end: " + dart.str(this.end) + ")";
    }
  };
  (src__services__text_editing.TextRange.new = function(opts) {
    let start = opts && 'start' in opts ? opts.start : null;
    let end = opts && 'end' in opts ? opts.end : null;
    this[start$] = start;
    this[end$] = end;
    if (!(start != null && dart.notNull(start) >= -1)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/text_editing.dart", 23, 16, "start != null && start >= -1");
    if (!(end != null && dart.notNull(end) >= -1)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/text_editing.dart", 24, 16, "end != null && end >= -1");
    ;
  }).prototype = src__services__text_editing.TextRange.prototype;
  (src__services__text_editing.TextRange.collapsed = function(offset) {
    if (!(offset != null && dart.notNull(offset) >= -1)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/text_editing.dart", 30, 16, "offset != null && offset >= -1");
    this[start$] = offset;
    this[end$] = offset;
    ;
  }).prototype = src__services__text_editing.TextRange.prototype;
  dart.addTypeTests(src__services__text_editing.TextRange);
  const start$ = Symbol("TextRange.start");
  const end$ = Symbol("TextRange.end");
  dart.setMethodSignature(src__services__text_editing.TextRange, () => ({
    __proto__: dart.getMethods(src__services__text_editing.TextRange.__proto__),
    textBefore: dart.fnType(core.String, [core.String]),
    textAfter: dart.fnType(core.String, [core.String]),
    textInside: dart.fnType(core.String, [core.String])
  }));
  dart.setGetterSignature(src__services__text_editing.TextRange, () => ({
    __proto__: dart.getGetters(src__services__text_editing.TextRange.__proto__),
    isValid: core.bool,
    isCollapsed: core.bool,
    isNormalized: core.bool
  }));
  dart.setLibraryUri(src__services__text_editing.TextRange, "package:flutter_web/src/services/text_editing.dart");
  dart.setFieldSignature(src__services__text_editing.TextRange, () => ({
    __proto__: dart.getFields(src__services__text_editing.TextRange.__proto__),
    start: dart.finalFieldType(core.int),
    end: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(src__services__text_editing.TextRange, ['_equals', 'toString']);
  dart.defineExtensionAccessors(src__services__text_editing.TextRange, ['hashCode']);
  dart.defineLazy(src__services__text_editing.TextRange, {
    /*src__services__text_editing.TextRange.empty*/get empty() {
      return dart.const(new src__services__text_editing.TextRange.new({start: -1, end: -1}));
    }
  });
  src__services__text_editing.TextSelection = class TextSelection extends src__services__text_editing.TextRange {
    get baseOffset() {
      return this[baseOffset$];
    }
    set baseOffset(value) {
      super.baseOffset = value;
    }
    get extentOffset() {
      return this[extentOffset$];
    }
    set extentOffset(value) {
      super.extentOffset = value;
    }
    get affinity() {
      return this[affinity$];
    }
    set affinity(value) {
      super.affinity = value;
    }
    get isDirectional() {
      return this[isDirectional$];
    }
    set isDirectional(value) {
      super.isDirectional = value;
    }
    get base() {
      return new ui$.TextPosition.new({offset: this.baseOffset, affinity: this.affinity});
    }
    get extent() {
      return new ui$.TextPosition.new({offset: this.extentOffset, affinity: this.affinity});
    }
    toString() {
      return dart.str(this[$runtimeType]) + "(baseOffset: " + dart.str(this.baseOffset) + ", extentOffset: " + dart.str(this.extentOffset) + ", affinity: " + dart.str(this.affinity) + ", isDirectional: " + dart.str(this.isDirectional) + ")";
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!src__services__text_editing.TextSelection.is(other)) return false;
      let typedOther = src__services__text_editing.TextSelection._check(other);
      return typedOther.baseOffset == this.baseOffset && typedOther.extentOffset == this.extentOffset && dart.equals(typedOther.affinity, this.affinity) && dart.equals(typedOther.isDirectional, this.isDirectional);
    }
    get hashCode() {
      return ui$.hashValues(dart.hashCode(this.baseOffset), dart.hashCode(this.extentOffset), dart.hashCode(this.affinity), dart.hashCode(this.isDirectional));
    }
    copyWith(opts) {
      let t0, t0$, t0$0, t0$1;
      let baseOffset = opts && 'baseOffset' in opts ? opts.baseOffset : null;
      let extentOffset = opts && 'extentOffset' in opts ? opts.extentOffset : null;
      let affinity = opts && 'affinity' in opts ? opts.affinity : null;
      let isDirectional = opts && 'isDirectional' in opts ? opts.isDirectional : null;
      return new src__services__text_editing.TextSelection.new({baseOffset: (t0 = baseOffset, t0 == null ? this.baseOffset : t0), extentOffset: (t0$ = extentOffset, t0$ == null ? this.extentOffset : t0$), affinity: (t0$0 = affinity, t0$0 == null ? this.affinity : t0$0), isDirectional: (t0$1 = isDirectional, t0$1 == null ? this.isDirectional : t0$1)});
    }
  };
  (src__services__text_editing.TextSelection.new = function(opts) {
    let baseOffset = opts && 'baseOffset' in opts ? opts.baseOffset : null;
    let extentOffset = opts && 'extentOffset' in opts ? opts.extentOffset : null;
    let affinity = opts && 'affinity' in opts ? opts.affinity : ui$.TextAffinity.downstream;
    let isDirectional = opts && 'isDirectional' in opts ? opts.isDirectional : false;
    this[baseOffset$] = baseOffset;
    this[extentOffset$] = extentOffset;
    this[affinity$] = affinity;
    this[isDirectional$] = isDirectional;
    src__services__text_editing.TextSelection.__proto__.new.call(this, {start: dart.notNull(baseOffset) < dart.notNull(extentOffset) ? baseOffset : extentOffset, end: dart.notNull(baseOffset) < dart.notNull(extentOffset) ? extentOffset : baseOffset});
    ;
  }).prototype = src__services__text_editing.TextSelection.prototype;
  (src__services__text_editing.TextSelection.collapsed = function(opts) {
    let offset = opts && 'offset' in opts ? opts.offset : null;
    let affinity = opts && 'affinity' in opts ? opts.affinity : ui$.TextAffinity.downstream;
    this[affinity$] = affinity;
    this[baseOffset$] = offset;
    this[extentOffset$] = offset;
    this[isDirectional$] = false;
    src__services__text_editing.TextSelection.__proto__.collapsed.call(this, offset);
    ;
  }).prototype = src__services__text_editing.TextSelection.prototype;
  (src__services__text_editing.TextSelection.fromPosition = function(position) {
    this[baseOffset$] = position.offset;
    this[extentOffset$] = position.offset;
    this[affinity$] = position.affinity;
    this[isDirectional$] = false;
    src__services__text_editing.TextSelection.__proto__.collapsed.call(this, position.offset);
    ;
  }).prototype = src__services__text_editing.TextSelection.prototype;
  dart.addTypeTests(src__services__text_editing.TextSelection);
  const baseOffset$ = Symbol("TextSelection.baseOffset");
  const extentOffset$ = Symbol("TextSelection.extentOffset");
  const affinity$ = Symbol("TextSelection.affinity");
  const isDirectional$ = Symbol("TextSelection.isDirectional");
  dart.setMethodSignature(src__services__text_editing.TextSelection, () => ({
    __proto__: dart.getMethods(src__services__text_editing.TextSelection.__proto__),
    copyWith: dart.fnType(src__services__text_editing.TextSelection, [], {affinity: ui$.TextAffinity, baseOffset: core.int, extentOffset: core.int, isDirectional: core.bool})
  }));
  dart.setGetterSignature(src__services__text_editing.TextSelection, () => ({
    __proto__: dart.getGetters(src__services__text_editing.TextSelection.__proto__),
    base: ui$.TextPosition,
    extent: ui$.TextPosition
  }));
  dart.setLibraryUri(src__services__text_editing.TextSelection, "package:flutter_web/src/services/text_editing.dart");
  dart.setFieldSignature(src__services__text_editing.TextSelection, () => ({
    __proto__: dart.getFields(src__services__text_editing.TextSelection.__proto__),
    baseOffset: dart.finalFieldType(core.int),
    extentOffset: dart.finalFieldType(core.int),
    affinity: dart.finalFieldType(ui$.TextAffinity),
    isDirectional: dart.finalFieldType(core.bool)
  }));
  dart.defineExtensionMethods(src__services__text_editing.TextSelection, ['toString', '_equals']);
  dart.defineExtensionAccessors(src__services__text_editing.TextSelection, ['hashCode']);
  const _x = dart.privateName(src__painting__alignment, "_x");
  const _start = dart.privateName(src__painting__alignment, "_start");
  const _y = dart.privateName(src__painting__alignment, "_y");
  src__painting__alignment.AlignmentGeometry = class AlignmentGeometry extends core.Object {
    add(other) {
      return new src__painting__alignment._MixedAlignment.new(dart.notNull(this[_x]) + dart.notNull(other[_x]), dart.notNull(this[_start]) + dart.notNull(other[_start]), dart.notNull(this[_y]) + dart.notNull(other[_y]));
    }
    static lerp(a, b, t) {
      if (!(t != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/alignment.dart", 91, 12, "t != null");
      if (a == null && b == null) return null;
      if (a == null) return b['*'](t);
      if (b == null) return a['*'](1.0 - dart.notNull(t));
      if (src__painting__alignment.Alignment.is(a) && src__painting__alignment.Alignment.is(b)) return src__painting__alignment.Alignment.lerp(a, b, t);
      if (src__painting__alignment.AlignmentDirectional.is(a) && src__painting__alignment.AlignmentDirectional.is(b)) return src__painting__alignment.AlignmentDirectional.lerp(a, b, t);
      return new src__painting__alignment._MixedAlignment.new(ui$.lerpDouble(a[_x], b[_x], t), ui$.lerpDouble(a[_start], b[_start], t), ui$.lerpDouble(a[_y], b[_y], t));
    }
    toString() {
      if (this[_start] === 0.0) return src__painting__alignment.Alignment._stringify(this[_x], this[_y]);
      if (this[_x] === 0.0) return src__painting__alignment.AlignmentDirectional._stringify(this[_start], this[_y]);
      return dart.notNull(src__painting__alignment.Alignment._stringify(this[_x], this[_y])) + " + " + dart.notNull(src__painting__alignment.AlignmentDirectional._stringify(this[_start], 0.0));
    }
    _equals(other) {
      if (other == null) return false;
      if (!src__painting__alignment.AlignmentGeometry.is(other)) return false;
      let typedOther = src__painting__alignment.AlignmentGeometry._check(other);
      return this[_x] == typedOther[_x] && this[_start] == typedOther[_start] && this[_y] == typedOther[_y];
    }
    get hashCode() {
      return ui$.hashValues(this[_x], this[_start], this[_y]);
    }
  };
  (src__painting__alignment.AlignmentGeometry.new = function() {
    ;
  }).prototype = src__painting__alignment.AlignmentGeometry.prototype;
  dart.addTypeTests(src__painting__alignment.AlignmentGeometry);
  dart.setMethodSignature(src__painting__alignment.AlignmentGeometry, () => ({
    __proto__: dart.getMethods(src__painting__alignment.AlignmentGeometry.__proto__),
    add: dart.fnType(src__painting__alignment.AlignmentGeometry, [src__painting__alignment.AlignmentGeometry])
  }));
  dart.setLibraryUri(src__painting__alignment.AlignmentGeometry, "package:flutter_web/src/painting/alignment.dart");
  dart.defineExtensionMethods(src__painting__alignment.AlignmentGeometry, ['toString', '_equals']);
  dart.defineExtensionAccessors(src__painting__alignment.AlignmentGeometry, ['hashCode']);
  src__painting__alignment.Alignment = class Alignment extends src__painting__alignment.AlignmentGeometry {
    get x() {
      return this[x$];
    }
    set x(value) {
      super.x = value;
    }
    get y() {
      return this[y$];
    }
    set y(value) {
      super.y = value;
    }
    get [_x]() {
      return this.x;
    }
    get [_start]() {
      return 0.0;
    }
    get [_y]() {
      return this.y;
    }
    add(other) {
      if (src__painting__alignment.Alignment.is(other)) return this['+'](other);
      return super.add(other);
    }
    ['-'](other) {
      return new src__painting__alignment.Alignment.new(dart.notNull(this.x) - dart.notNull(other.x), dart.notNull(this.y) - dart.notNull(other.y));
    }
    ['+'](other) {
      return new src__painting__alignment.Alignment.new(dart.notNull(this.x) + dart.notNull(other.x), dart.notNull(this.y) + dart.notNull(other.y));
    }
    _negate() {
      return new src__painting__alignment.Alignment.new(-dart.notNull(this.x), -dart.notNull(this.y));
    }
    ['*'](other) {
      return new src__painting__alignment.Alignment.new(dart.notNull(this.x) * dart.notNull(other), dart.notNull(this.y) * dart.notNull(other));
    }
    ['/'](other) {
      return new src__painting__alignment.Alignment.new(dart.notNull(this.x) / dart.notNull(other), dart.notNull(this.y) / dart.notNull(other));
    }
    ['~/'](other) {
      return new src__painting__alignment.Alignment.new((dart.notNull(this.x) / dart.notNull(other))[$truncate]()[$toDouble](), (dart.notNull(this.y) / dart.notNull(other))[$truncate]()[$toDouble]());
    }
    ['%'](other) {
      return new src__painting__alignment.Alignment.new(this.x[$modulo](other), this.y[$modulo](other));
    }
    alongOffset(other) {
      let centerX = dart.notNull(other.dx) / 2.0;
      let centerY = dart.notNull(other.dy) / 2.0;
      return new ui$.Offset.new(centerX + dart.notNull(this.x) * centerX, centerY + dart.notNull(this.y) * centerY);
    }
    alongSize(other) {
      let centerX = dart.notNull(other.width) / 2.0;
      let centerY = dart.notNull(other.height) / 2.0;
      return new ui$.Offset.new(centerX + dart.notNull(this.x) * centerX, centerY + dart.notNull(this.y) * centerY);
    }
    withinRect(rect) {
      let halfWidth = dart.notNull(rect.width) / 2.0;
      let halfHeight = dart.notNull(rect.height) / 2.0;
      return new ui$.Offset.new(dart.notNull(rect.left) + halfWidth + dart.notNull(this.x) * halfWidth, dart.notNull(rect.top) + halfHeight + dart.notNull(this.y) * halfHeight);
    }
    inscribe(size, rect) {
      let halfWidthDelta = (dart.notNull(rect.width) - dart.notNull(size.width)) / 2.0;
      let halfHeightDelta = (dart.notNull(rect.height) - dart.notNull(size.height)) / 2.0;
      return new ui$.Rect.fromLTWH(dart.notNull(rect.left) + halfWidthDelta + dart.notNull(this.x) * halfWidthDelta, dart.notNull(rect.top) + halfHeightDelta + dart.notNull(this.y) * halfHeightDelta, size.width, size.height);
    }
    static lerp(a, b, t) {
      if (!(t != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/alignment.dart", 338, 12, "ert(t != ");
      if (a == null && b == null) return null;
      if (a == null) return new src__painting__alignment.Alignment.new(ui$.lerpDouble(0.0, b.x, t), ui$.lerpDouble(0.0, b.y, t));
      if (b == null) return new src__painting__alignment.Alignment.new(ui$.lerpDouble(a.x, 0.0, t), ui$.lerpDouble(a.y, 0.0, t));
      return new src__painting__alignment.Alignment.new(ui$.lerpDouble(a.x, b.x, t), ui$.lerpDouble(a.y, b.y, t));
    }
    resolve(direction) {
      return this;
    }
    static _stringify(x, y) {
      if (x === -1.0 && y === -1.0) return "topLeft";
      if (x === 0.0 && y === -1.0) return "topCenter";
      if (x === 1.0 && y === -1.0) return "topRight";
      if (x === -1.0 && y === 0.0) return "centerLeft";
      if (x === 0.0 && y === 0.0) return "center";
      if (x === 1.0 && y === 0.0) return "centerRight";
      if (x === -1.0 && y === 1.0) return "bottomLeft";
      if (x === 0.0 && y === 1.0) return "bottomCenter";
      if (x === 1.0 && y === 1.0) return "bottomRight";
      return "Alignment(" + x[$toStringAsFixed](1) + ", " + y[$toStringAsFixed](1) + ")";
    }
    toString() {
      return src__painting__alignment.Alignment._stringify(this.x, this.y);
    }
  };
  (src__painting__alignment.Alignment.new = function(x, y) {
    this[x$] = x;
    this[y$] = y;
    if (!(x != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/alignment.dart", 188, 14, "x != null");
    if (!(y != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/alignment.dart", 189, 14, "y != null");
    src__painting__alignment.Alignment.__proto__.new.call(this);
    ;
  }).prototype = src__painting__alignment.Alignment.prototype;
  dart.addTypeTests(src__painting__alignment.Alignment);
  const x$ = Symbol("Alignment.x");
  const y$ = Symbol("Alignment.y");
  dart.setMethodSignature(src__painting__alignment.Alignment, () => ({
    __proto__: dart.getMethods(src__painting__alignment.Alignment.__proto__),
    '-': dart.fnType(src__painting__alignment.Alignment, [src__painting__alignment.Alignment]),
    '+': dart.fnType(src__painting__alignment.Alignment, [src__painting__alignment.Alignment]),
    _negate: dart.fnType(src__painting__alignment.Alignment, []),
    '*': dart.fnType(src__painting__alignment.Alignment, [core.double]),
    '/': dart.fnType(src__painting__alignment.Alignment, [core.double]),
    '~/': dart.fnType(src__painting__alignment.Alignment, [core.double]),
    '%': dart.fnType(src__painting__alignment.Alignment, [core.double]),
    alongOffset: dart.fnType(ui$.Offset, [ui$.Offset]),
    alongSize: dart.fnType(ui$.Offset, [ui$.Size]),
    withinRect: dart.fnType(ui$.Offset, [ui$.Rect]),
    inscribe: dart.fnType(ui$.Rect, [ui$.Size, ui$.Rect]),
    resolve: dart.fnType(src__painting__alignment.Alignment, [ui$.TextDirection])
  }));
  dart.setGetterSignature(src__painting__alignment.Alignment, () => ({
    __proto__: dart.getGetters(src__painting__alignment.Alignment.__proto__),
    [_x]: core.double,
    [_start]: core.double,
    [_y]: core.double
  }));
  dart.setLibraryUri(src__painting__alignment.Alignment, "package:flutter_web/src/painting/alignment.dart");
  dart.setFieldSignature(src__painting__alignment.Alignment, () => ({
    __proto__: dart.getFields(src__painting__alignment.Alignment.__proto__),
    x: dart.finalFieldType(core.double),
    y: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(src__painting__alignment.Alignment, ['toString']);
  dart.defineLazy(src__painting__alignment.Alignment, {
    /*src__painting__alignment.Alignment.topLeft*/get topLeft() {
      return dart.const(new src__painting__alignment.Alignment.new(-1.0, -1.0));
    },
    /*src__painting__alignment.Alignment.topCenter*/get topCenter() {
      return dart.const(new src__painting__alignment.Alignment.new(0.0, -1.0));
    },
    /*src__painting__alignment.Alignment.topRight*/get topRight() {
      return dart.const(new src__painting__alignment.Alignment.new(1.0, -1.0));
    },
    /*src__painting__alignment.Alignment.centerLeft*/get centerLeft() {
      return dart.const(new src__painting__alignment.Alignment.new(-1.0, 0.0));
    },
    /*src__painting__alignment.Alignment.center*/get center() {
      return dart.const(new src__painting__alignment.Alignment.new(0.0, 0.0));
    },
    /*src__painting__alignment.Alignment.centerRight*/get centerRight() {
      return dart.const(new src__painting__alignment.Alignment.new(1.0, 0.0));
    },
    /*src__painting__alignment.Alignment.bottomLeft*/get bottomLeft() {
      return dart.const(new src__painting__alignment.Alignment.new(-1.0, 1.0));
    },
    /*src__painting__alignment.Alignment.bottomCenter*/get bottomCenter() {
      return dart.const(new src__painting__alignment.Alignment.new(0.0, 1.0));
    },
    /*src__painting__alignment.Alignment.bottomRight*/get bottomRight() {
      return dart.const(new src__painting__alignment.Alignment.new(1.0, 1.0));
    }
  });
  src__painting__alignment.AlignmentDirectional = class AlignmentDirectional extends src__painting__alignment.AlignmentGeometry {
    get start() {
      return this[start$0];
    }
    set start(value) {
      super.start = value;
    }
    get y() {
      return this[y$0];
    }
    set y(value) {
      super.y = value;
    }
    get [_x]() {
      return 0.0;
    }
    get [_start]() {
      return this.start;
    }
    get [_y]() {
      return this.y;
    }
    add(other) {
      if (src__painting__alignment.AlignmentDirectional.is(other)) return this['+'](other);
      return super.add(other);
    }
    ['-'](other) {
      return new src__painting__alignment.AlignmentDirectional.new(dart.notNull(this.start) - dart.notNull(other.start), dart.notNull(this.y) - dart.notNull(other.y));
    }
    ['+'](other) {
      return new src__painting__alignment.AlignmentDirectional.new(dart.notNull(this.start) + dart.notNull(other.start), dart.notNull(this.y) + dart.notNull(other.y));
    }
    _negate() {
      return new src__painting__alignment.AlignmentDirectional.new(-dart.notNull(this.start), -dart.notNull(this.y));
    }
    ['*'](other) {
      return new src__painting__alignment.AlignmentDirectional.new(dart.notNull(this.start) * dart.notNull(other), dart.notNull(this.y) * dart.notNull(other));
    }
    ['/'](other) {
      return new src__painting__alignment.AlignmentDirectional.new(dart.notNull(this.start) / dart.notNull(other), dart.notNull(this.y) / dart.notNull(other));
    }
    ['~/'](other) {
      return new src__painting__alignment.AlignmentDirectional.new((dart.notNull(this.start) / dart.notNull(other))[$truncate]()[$toDouble](), (dart.notNull(this.y) / dart.notNull(other))[$truncate]()[$toDouble]());
    }
    ['%'](other) {
      return new src__painting__alignment.AlignmentDirectional.new(this.start[$modulo](other), this.y[$modulo](other));
    }
    static lerp(a, b, t) {
      if (!(t != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/alignment.dart", 519, 12, "ert(t != ");
      if (a == null && b == null) return null;
      if (a == null) return new src__painting__alignment.AlignmentDirectional.new(ui$.lerpDouble(0.0, b.start, t), ui$.lerpDouble(0.0, b.y, t));
      if (b == null) return new src__painting__alignment.AlignmentDirectional.new(ui$.lerpDouble(a.start, 0.0, t), ui$.lerpDouble(a.y, 0.0, t));
      return new src__painting__alignment.AlignmentDirectional.new(ui$.lerpDouble(a.start, b.start, t), ui$.lerpDouble(a.y, b.y, t));
    }
    resolve(direction) {
      if (!(direction != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/alignment.dart", 531, 12, "ert(direction != ");
      switch (direction) {
        case ui$.TextDirection.rtl:
        {
          return new src__painting__alignment.Alignment.new(-dart.notNull(this.start), this.y);
        }
        case ui$.TextDirection.ltr:
        {
          return new src__painting__alignment.Alignment.new(this.start, this.y);
        }
      }
      return null;
    }
    static _stringify(start, y) {
      if (start === -1.0 && y === -1.0) return "AlignmentDirectional.topStart";
      if (start === 0.0 && y === -1.0) return "AlignmentDirectional.topCenter";
      if (start === 1.0 && y === -1.0) return "AlignmentDirectional.topEnd";
      if (start === -1.0 && y === 0.0) return "AlignmentDirectional.centerStart";
      if (start === 0.0 && y === 0.0) return "AlignmentDirectional.center";
      if (start === 1.0 && y === 0.0) return "AlignmentDirectional.centerEnd";
      if (start === -1.0 && y === 1.0) return "AlignmentDirectional.bottomStart";
      if (start === 0.0 && y === 1.0) return "AlignmentDirectional.bottomCenter";
      if (start === 1.0 && y === 1.0) return "AlignmentDirectional.bottomEnd";
      return "AlignmentDirectional(" + start[$toStringAsFixed](1) + ", " + y[$toStringAsFixed](1) + ")";
    }
    toString() {
      return src__painting__alignment.AlignmentDirectional._stringify(this.start, this.y);
    }
  };
  (src__painting__alignment.AlignmentDirectional.new = function(start, y) {
    this[start$0] = start;
    this[y$0] = y;
    if (!(start != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/alignment.dart", 394, 14, "ert(start != ");
    if (!(y != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/alignment.dart", 395, 14, "ert(y != ");
    src__painting__alignment.AlignmentDirectional.__proto__.new.call(this);
    ;
  }).prototype = src__painting__alignment.AlignmentDirectional.prototype;
  dart.addTypeTests(src__painting__alignment.AlignmentDirectional);
  const start$0 = Symbol("AlignmentDirectional.start");
  const y$0 = Symbol("AlignmentDirectional.y");
  dart.setMethodSignature(src__painting__alignment.AlignmentDirectional, () => ({
    __proto__: dart.getMethods(src__painting__alignment.AlignmentDirectional.__proto__),
    '-': dart.fnType(src__painting__alignment.AlignmentDirectional, [src__painting__alignment.AlignmentDirectional]),
    '+': dart.fnType(src__painting__alignment.AlignmentDirectional, [src__painting__alignment.AlignmentDirectional]),
    _negate: dart.fnType(src__painting__alignment.AlignmentDirectional, []),
    '*': dart.fnType(src__painting__alignment.AlignmentDirectional, [core.double]),
    '/': dart.fnType(src__painting__alignment.AlignmentDirectional, [core.double]),
    '~/': dart.fnType(src__painting__alignment.AlignmentDirectional, [core.double]),
    '%': dart.fnType(src__painting__alignment.AlignmentDirectional, [core.double]),
    resolve: dart.fnType(src__painting__alignment.Alignment, [ui$.TextDirection])
  }));
  dart.setGetterSignature(src__painting__alignment.AlignmentDirectional, () => ({
    __proto__: dart.getGetters(src__painting__alignment.AlignmentDirectional.__proto__),
    [_x]: core.double,
    [_start]: core.double,
    [_y]: core.double
  }));
  dart.setLibraryUri(src__painting__alignment.AlignmentDirectional, "package:flutter_web/src/painting/alignment.dart");
  dart.setFieldSignature(src__painting__alignment.AlignmentDirectional, () => ({
    __proto__: dart.getFields(src__painting__alignment.AlignmentDirectional.__proto__),
    start: dart.finalFieldType(core.double),
    y: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(src__painting__alignment.AlignmentDirectional, ['toString']);
  dart.defineLazy(src__painting__alignment.AlignmentDirectional, {
    /*src__painting__alignment.AlignmentDirectional.topStart*/get topStart() {
      return dart.const(new src__painting__alignment.AlignmentDirectional.new(-1.0, -1.0));
    },
    /*src__painting__alignment.AlignmentDirectional.topCenter*/get topCenter() {
      return dart.const(new src__painting__alignment.AlignmentDirectional.new(0.0, -1.0));
    },
    /*src__painting__alignment.AlignmentDirectional.topEnd*/get topEnd() {
      return dart.const(new src__painting__alignment.AlignmentDirectional.new(1.0, -1.0));
    },
    /*src__painting__alignment.AlignmentDirectional.centerStart*/get centerStart() {
      return dart.const(new src__painting__alignment.AlignmentDirectional.new(-1.0, 0.0));
    },
    /*src__painting__alignment.AlignmentDirectional.center*/get center() {
      return dart.const(new src__painting__alignment.AlignmentDirectional.new(0.0, 0.0));
    },
    /*src__painting__alignment.AlignmentDirectional.centerEnd*/get centerEnd() {
      return dart.const(new src__painting__alignment.AlignmentDirectional.new(1.0, 0.0));
    },
    /*src__painting__alignment.AlignmentDirectional.bottomStart*/get bottomStart() {
      return dart.const(new src__painting__alignment.AlignmentDirectional.new(-1.0, 1.0));
    },
    /*src__painting__alignment.AlignmentDirectional.bottomCenter*/get bottomCenter() {
      return dart.const(new src__painting__alignment.AlignmentDirectional.new(0.0, 1.0));
    },
    /*src__painting__alignment.AlignmentDirectional.bottomEnd*/get bottomEnd() {
      return dart.const(new src__painting__alignment.AlignmentDirectional.new(1.0, 1.0));
    }
  });
  src__painting__alignment._MixedAlignment = class _MixedAlignment extends src__painting__alignment.AlignmentGeometry {
    get [_x]() {
      return this[_x$];
    }
    set [_x](value) {
      super[_x] = value;
    }
    get [_start]() {
      return this[_start$];
    }
    set [_start](value) {
      super[_start] = value;
    }
    get [_y]() {
      return this[_y$];
    }
    set [_y](value) {
      super[_y] = value;
    }
    _negate() {
      return new src__painting__alignment._MixedAlignment.new(-dart.notNull(this[_x]), -dart.notNull(this[_start]), -dart.notNull(this[_y]));
    }
    ['*'](other) {
      return new src__painting__alignment._MixedAlignment.new(dart.notNull(this[_x]) * dart.notNull(other), dart.notNull(this[_start]) * dart.notNull(other), dart.notNull(this[_y]) * dart.notNull(other));
    }
    ['/'](other) {
      return new src__painting__alignment._MixedAlignment.new(dart.notNull(this[_x]) / dart.notNull(other), dart.notNull(this[_start]) / dart.notNull(other), dart.notNull(this[_y]) / dart.notNull(other));
    }
    ['~/'](other) {
      return new src__painting__alignment._MixedAlignment.new((dart.notNull(this[_x]) / dart.notNull(other))[$truncate]()[$toDouble](), (dart.notNull(this[_start]) / dart.notNull(other))[$truncate]()[$toDouble](), (dart.notNull(this[_y]) / dart.notNull(other))[$truncate]()[$toDouble]());
    }
    ['%'](other) {
      return new src__painting__alignment._MixedAlignment.new(this[_x][$modulo](other), this[_start][$modulo](other), this[_y][$modulo](other));
    }
    resolve(direction) {
      if (!(direction != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/alignment.dart", 627, 12, "ert(direction != ");
      switch (direction) {
        case ui$.TextDirection.rtl:
        {
          return new src__painting__alignment.Alignment.new(dart.notNull(this[_x]) - dart.notNull(this[_start]), this[_y]);
        }
        case ui$.TextDirection.ltr:
        {
          return new src__painting__alignment.Alignment.new(dart.notNull(this[_x]) + dart.notNull(this[_start]), this[_y]);
        }
      }
      return null;
    }
  };
  (src__painting__alignment._MixedAlignment.new = function(_x, _start, _y) {
    this[_x$] = _x;
    this[_start$] = _start;
    this[_y$] = _y;
    src__painting__alignment._MixedAlignment.__proto__.new.call(this);
    ;
  }).prototype = src__painting__alignment._MixedAlignment.prototype;
  dart.addTypeTests(src__painting__alignment._MixedAlignment);
  const _x$ = Symbol("_MixedAlignment._x");
  const _start$ = Symbol("_MixedAlignment._start");
  const _y$ = Symbol("_MixedAlignment._y");
  dart.setMethodSignature(src__painting__alignment._MixedAlignment, () => ({
    __proto__: dart.getMethods(src__painting__alignment._MixedAlignment.__proto__),
    _negate: dart.fnType(src__painting__alignment._MixedAlignment, []),
    '*': dart.fnType(src__painting__alignment._MixedAlignment, [core.double]),
    '/': dart.fnType(src__painting__alignment._MixedAlignment, [core.double]),
    '~/': dart.fnType(src__painting__alignment._MixedAlignment, [core.double]),
    '%': dart.fnType(src__painting__alignment._MixedAlignment, [core.double]),
    resolve: dart.fnType(src__painting__alignment.Alignment, [ui$.TextDirection])
  }));
  dart.setLibraryUri(src__painting__alignment._MixedAlignment, "package:flutter_web/src/painting/alignment.dart");
  dart.setFieldSignature(src__painting__alignment._MixedAlignment, () => ({
    __proto__: dart.getFields(src__painting__alignment._MixedAlignment.__proto__),
    [_x]: dart.finalFieldType(core.double),
    [_start]: dart.finalFieldType(core.double),
    [_y]: dart.finalFieldType(core.double)
  }));
  src__painting__alignment.TextAlignVertical = class TextAlignVertical extends core.Object {
    get y() {
      return this[y$1];
    }
    set y(value) {
      super.y = value;
    }
    toString() {
      return dart.str(this[$runtimeType]) + "(y: " + dart.str(this.y) + ")";
    }
  };
  (src__painting__alignment.TextAlignVertical.new = function(opts) {
    let y = opts && 'y' in opts ? opts.y : null;
    this[y$1] = y;
    if (!(y != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/alignment.dart", 657, 15, "ert(y != ");
    if (!(dart.notNull(y) >= -1.0 && dart.notNull(y) <= 1.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/alignment.dart", 658, 15, "ert(y >= -1.0 && y <=");
    ;
  }).prototype = src__painting__alignment.TextAlignVertical.prototype;
  dart.addTypeTests(src__painting__alignment.TextAlignVertical);
  const y$1 = Symbol("TextAlignVertical.y");
  dart.setLibraryUri(src__painting__alignment.TextAlignVertical, "package:flutter_web/src/painting/alignment.dart");
  dart.setFieldSignature(src__painting__alignment.TextAlignVertical, () => ({
    __proto__: dart.getFields(src__painting__alignment.TextAlignVertical.__proto__),
    y: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(src__painting__alignment.TextAlignVertical, ['toString']);
  dart.defineLazy(src__painting__alignment.TextAlignVertical, {
    /*src__painting__alignment.TextAlignVertical.top*/get top() {
      return dart.const(new src__painting__alignment.TextAlignVertical.new({y: -1.0}));
    },
    /*src__painting__alignment.TextAlignVertical.center*/get center() {
      return dart.const(new src__painting__alignment.TextAlignVertical.new({y: 0.0}));
    },
    /*src__painting__alignment.TextAlignVertical.bottom*/get bottom() {
      return dart.const(new src__painting__alignment.TextAlignVertical.new({y: 1.0}));
    }
  });
  const _name$ = dart.privateName(src__painting__basic_types, "_name");
  src__painting__basic_types.RenderComparison = class RenderComparison extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (src__painting__basic_types.RenderComparison.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = src__painting__basic_types.RenderComparison.prototype;
  dart.addTypeTests(src__painting__basic_types.RenderComparison);
  dart.setLibraryUri(src__painting__basic_types.RenderComparison, "package:flutter_web/src/painting/basic_types.dart");
  dart.setFieldSignature(src__painting__basic_types.RenderComparison, () => ({
    __proto__: dart.getFields(src__painting__basic_types.RenderComparison.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(src__painting__basic_types.RenderComparison, ['toString']);
  src__painting__basic_types.RenderComparison.identical = dart.const(new src__painting__basic_types.RenderComparison.new(0, "RenderComparison.identical"));
  src__painting__basic_types.RenderComparison.metadata = dart.const(new src__painting__basic_types.RenderComparison.new(1, "RenderComparison.metadata"));
  src__painting__basic_types.RenderComparison.paint = dart.const(new src__painting__basic_types.RenderComparison.new(2, "RenderComparison.paint"));
  src__painting__basic_types.RenderComparison.layout = dart.const(new src__painting__basic_types.RenderComparison.new(3, "RenderComparison.layout"));
  src__painting__basic_types.RenderComparison.values = dart.constList([src__painting__basic_types.RenderComparison.identical, src__painting__basic_types.RenderComparison.metadata, src__painting__basic_types.RenderComparison.paint, src__painting__basic_types.RenderComparison.layout], src__painting__basic_types.RenderComparison);
  src__painting__basic_types.Axis = class Axis extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (src__painting__basic_types.Axis.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = src__painting__basic_types.Axis.prototype;
  dart.addTypeTests(src__painting__basic_types.Axis);
  dart.setLibraryUri(src__painting__basic_types.Axis, "package:flutter_web/src/painting/basic_types.dart");
  dart.setFieldSignature(src__painting__basic_types.Axis, () => ({
    __proto__: dart.getFields(src__painting__basic_types.Axis.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(src__painting__basic_types.Axis, ['toString']);
  src__painting__basic_types.Axis.horizontal = dart.const(new src__painting__basic_types.Axis.new(0, "Axis.horizontal"));
  src__painting__basic_types.Axis.vertical = dart.const(new src__painting__basic_types.Axis.new(1, "Axis.vertical"));
  src__painting__basic_types.Axis.values = dart.constList([src__painting__basic_types.Axis.horizontal, src__painting__basic_types.Axis.vertical], src__painting__basic_types.Axis);
  src__painting__basic_types.VerticalDirection = class VerticalDirection extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (src__painting__basic_types.VerticalDirection.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = src__painting__basic_types.VerticalDirection.prototype;
  dart.addTypeTests(src__painting__basic_types.VerticalDirection);
  dart.setLibraryUri(src__painting__basic_types.VerticalDirection, "package:flutter_web/src/painting/basic_types.dart");
  dart.setFieldSignature(src__painting__basic_types.VerticalDirection, () => ({
    __proto__: dart.getFields(src__painting__basic_types.VerticalDirection.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(src__painting__basic_types.VerticalDirection, ['toString']);
  src__painting__basic_types.VerticalDirection.up = dart.const(new src__painting__basic_types.VerticalDirection.new(0, "VerticalDirection.up"));
  src__painting__basic_types.VerticalDirection.down = dart.const(new src__painting__basic_types.VerticalDirection.new(1, "VerticalDirection.down"));
  src__painting__basic_types.VerticalDirection.values = dart.constList([src__painting__basic_types.VerticalDirection.up, src__painting__basic_types.VerticalDirection.down], src__painting__basic_types.VerticalDirection);
  src__painting__basic_types.AxisDirection = class AxisDirection extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (src__painting__basic_types.AxisDirection.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = src__painting__basic_types.AxisDirection.prototype;
  dart.addTypeTests(src__painting__basic_types.AxisDirection);
  dart.setLibraryUri(src__painting__basic_types.AxisDirection, "package:flutter_web/src/painting/basic_types.dart");
  dart.setFieldSignature(src__painting__basic_types.AxisDirection, () => ({
    __proto__: dart.getFields(src__painting__basic_types.AxisDirection.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(src__painting__basic_types.AxisDirection, ['toString']);
  src__painting__basic_types.AxisDirection.up = dart.const(new src__painting__basic_types.AxisDirection.new(0, "AxisDirection.up"));
  src__painting__basic_types.AxisDirection.right = dart.const(new src__painting__basic_types.AxisDirection.new(1, "AxisDirection.right"));
  src__painting__basic_types.AxisDirection.down = dart.const(new src__painting__basic_types.AxisDirection.new(2, "AxisDirection.down"));
  src__painting__basic_types.AxisDirection.left = dart.const(new src__painting__basic_types.AxisDirection.new(3, "AxisDirection.left"));
  src__painting__basic_types.AxisDirection.values = dart.constList([src__painting__basic_types.AxisDirection.up, src__painting__basic_types.AxisDirection.right, src__painting__basic_types.AxisDirection.down, src__painting__basic_types.AxisDirection.left], src__painting__basic_types.AxisDirection);
  src__painting__basic_types.flipAxis = function(direction) {
    if (!(direction != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/basic_types.dart", 143, 10, "direction != null");
    switch (direction) {
      case src__painting__basic_types.Axis.horizontal:
      {
        return src__painting__basic_types.Axis.vertical;
      }
      case src__painting__basic_types.Axis.vertical:
      {
        return src__painting__basic_types.Axis.horizontal;
      }
    }
    return null;
  };
  src__painting__basic_types.axisDirectionToAxis = function(axisDirection) {
    if (!(axisDirection != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/basic_types.dart", 214, 10, " assert(axisDirection");
    switch (axisDirection) {
      case src__painting__basic_types.AxisDirection.up:
      case src__painting__basic_types.AxisDirection.down:
      {
        return src__painting__basic_types.Axis.vertical;
      }
      case src__painting__basic_types.AxisDirection.left:
      case src__painting__basic_types.AxisDirection.right:
      {
        return src__painting__basic_types.Axis.horizontal;
      }
    }
    return null;
  };
  src__painting__basic_types.textDirectionToAxisDirection = function(textDirection) {
    if (!(textDirection != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/basic_types.dart", 232, 10, " assert(textDirection");
    switch (textDirection) {
      case ui$.TextDirection.rtl:
      {
        return src__painting__basic_types.AxisDirection.left;
      }
      case ui$.TextDirection.ltr:
      {
        return src__painting__basic_types.AxisDirection.right;
      }
    }
    return null;
  };
  src__painting__basic_types.flipAxisDirection = function(axisDirection) {
    if (!(axisDirection != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/basic_types.dart", 252, 10, " assert(axisDirection");
    switch (axisDirection) {
      case src__painting__basic_types.AxisDirection.up:
      {
        return src__painting__basic_types.AxisDirection.down;
      }
      case src__painting__basic_types.AxisDirection.right:
      {
        return src__painting__basic_types.AxisDirection.left;
      }
      case src__painting__basic_types.AxisDirection.down:
      {
        return src__painting__basic_types.AxisDirection.up;
      }
      case src__painting__basic_types.AxisDirection.left:
      {
        return src__painting__basic_types.AxisDirection.right;
      }
    }
    return null;
  };
  src__painting__basic_types.axisDirectionIsReversed = function(axisDirection) {
    if (!(axisDirection != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/basic_types.dart", 272, 10, " assert(axisDirection");
    switch (axisDirection) {
      case src__painting__basic_types.AxisDirection.up:
      case src__painting__basic_types.AxisDirection.left:
      {
        return true;
      }
      case src__painting__basic_types.AxisDirection.down:
      case src__painting__basic_types.AxisDirection.right:
      {
        return false;
      }
    }
    return null;
  };
  const _name$0 = dart.privateName(src__services__system_chrome, "_name");
  src__services__system_chrome.DeviceOrientation = class DeviceOrientation extends core.Object {
    toString() {
      return this[_name$0];
    }
  };
  (src__services__system_chrome.DeviceOrientation.new = function(index, _name) {
    this.index = index;
    this[_name$0] = _name;
    ;
  }).prototype = src__services__system_chrome.DeviceOrientation.prototype;
  dart.addTypeTests(src__services__system_chrome.DeviceOrientation);
  dart.setLibraryUri(src__services__system_chrome.DeviceOrientation, "package:flutter_web/src/services/system_chrome.dart");
  dart.setFieldSignature(src__services__system_chrome.DeviceOrientation, () => ({
    __proto__: dart.getFields(src__services__system_chrome.DeviceOrientation.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$0]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(src__services__system_chrome.DeviceOrientation, ['toString']);
  src__services__system_chrome.DeviceOrientation.portraitUp = dart.const(new src__services__system_chrome.DeviceOrientation.new(0, "DeviceOrientation.portraitUp"));
  src__services__system_chrome.DeviceOrientation.landscapeLeft = dart.const(new src__services__system_chrome.DeviceOrientation.new(1, "DeviceOrientation.landscapeLeft"));
  src__services__system_chrome.DeviceOrientation.portraitDown = dart.const(new src__services__system_chrome.DeviceOrientation.new(2, "DeviceOrientation.portraitDown"));
  src__services__system_chrome.DeviceOrientation.landscapeRight = dart.const(new src__services__system_chrome.DeviceOrientation.new(3, "DeviceOrientation.landscapeRight"));
  src__services__system_chrome.DeviceOrientation.values = dart.constList([src__services__system_chrome.DeviceOrientation.portraitUp, src__services__system_chrome.DeviceOrientation.landscapeLeft, src__services__system_chrome.DeviceOrientation.portraitDown, src__services__system_chrome.DeviceOrientation.landscapeRight], src__services__system_chrome.DeviceOrientation);
  src__services__system_chrome.ApplicationSwitcherDescription = class ApplicationSwitcherDescription extends core.Object {
    get label() {
      return this[label$];
    }
    set label(value) {
      super.label = value;
    }
    get primaryColor() {
      return this[primaryColor$];
    }
    set primaryColor(value) {
      super.primaryColor = value;
    }
  };
  (src__services__system_chrome.ApplicationSwitcherDescription.new = function(opts) {
    let label = opts && 'label' in opts ? opts.label : null;
    let primaryColor = opts && 'primaryColor' in opts ? opts.primaryColor : null;
    this[label$] = label;
    this[primaryColor$] = primaryColor;
    ;
  }).prototype = src__services__system_chrome.ApplicationSwitcherDescription.prototype;
  dart.addTypeTests(src__services__system_chrome.ApplicationSwitcherDescription);
  const label$ = Symbol("ApplicationSwitcherDescription.label");
  const primaryColor$ = Symbol("ApplicationSwitcherDescription.primaryColor");
  dart.setLibraryUri(src__services__system_chrome.ApplicationSwitcherDescription, "package:flutter_web/src/services/system_chrome.dart");
  dart.setFieldSignature(src__services__system_chrome.ApplicationSwitcherDescription, () => ({
    __proto__: dart.getFields(src__services__system_chrome.ApplicationSwitcherDescription.__proto__),
    label: dart.finalFieldType(core.String),
    primaryColor: dart.finalFieldType(core.int)
  }));
  src__services__system_chrome.SystemUiOverlay = class SystemUiOverlay extends core.Object {
    toString() {
      return this[_name$0];
    }
  };
  (src__services__system_chrome.SystemUiOverlay.new = function(index, _name) {
    this.index = index;
    this[_name$0] = _name;
    ;
  }).prototype = src__services__system_chrome.SystemUiOverlay.prototype;
  dart.addTypeTests(src__services__system_chrome.SystemUiOverlay);
  dart.setLibraryUri(src__services__system_chrome.SystemUiOverlay, "package:flutter_web/src/services/system_chrome.dart");
  dart.setFieldSignature(src__services__system_chrome.SystemUiOverlay, () => ({
    __proto__: dart.getFields(src__services__system_chrome.SystemUiOverlay.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$0]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(src__services__system_chrome.SystemUiOverlay, ['toString']);
  src__services__system_chrome.SystemUiOverlay.top = dart.const(new src__services__system_chrome.SystemUiOverlay.new(0, "SystemUiOverlay.top"));
  src__services__system_chrome.SystemUiOverlay.bottom = dart.const(new src__services__system_chrome.SystemUiOverlay.new(1, "SystemUiOverlay.bottom"));
  src__services__system_chrome.SystemUiOverlay.values = dart.constList([src__services__system_chrome.SystemUiOverlay.top, src__services__system_chrome.SystemUiOverlay.bottom], src__services__system_chrome.SystemUiOverlay);
  const _toMap = dart.privateName(src__services__system_chrome, "_toMap");
  src__services__system_chrome.SystemUiOverlayStyle = class SystemUiOverlayStyle extends core.Object {
    get systemNavigationBarColor() {
      return this[systemNavigationBarColor$];
    }
    set systemNavigationBarColor(value) {
      super.systemNavigationBarColor = value;
    }
    get systemNavigationBarDividerColor() {
      return this[systemNavigationBarDividerColor$];
    }
    set systemNavigationBarDividerColor(value) {
      super.systemNavigationBarDividerColor = value;
    }
    get systemNavigationBarIconBrightness() {
      return this[systemNavigationBarIconBrightness$];
    }
    set systemNavigationBarIconBrightness(value) {
      super.systemNavigationBarIconBrightness = value;
    }
    get statusBarColor() {
      return this[statusBarColor$];
    }
    set statusBarColor(value) {
      super.statusBarColor = value;
    }
    get statusBarBrightness() {
      return this[statusBarBrightness$];
    }
    set statusBarBrightness(value) {
      super.statusBarBrightness = value;
    }
    get statusBarIconBrightness() {
      return this[statusBarIconBrightness$];
    }
    set statusBarIconBrightness(value) {
      super.statusBarIconBrightness = value;
    }
    [_toMap]() {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3;
      return new (IdentityMapOfString$dynamic()).from(["systemNavigationBarColor", (t0 = this.systemNavigationBarColor, t0 == null ? null : t0.value), "systemNavigationBarDividerColor", (t0$ = this.systemNavigationBarDividerColor, t0$ == null ? null : t0$.value), "statusBarColor", (t0$0 = this.statusBarColor, t0$0 == null ? null : t0$0.value), "statusBarBrightness", (t0$1 = this.statusBarBrightness, t0$1 == null ? null : dart.toString(t0$1)), "statusBarIconBrightness", (t0$2 = this.statusBarIconBrightness, t0$2 == null ? null : dart.toString(t0$2)), "systemNavigationBarIconBrightness", (t0$3 = this.systemNavigationBarIconBrightness, t0$3 == null ? null : dart.toString(t0$3))]);
    }
    toString() {
      return dart.toString(this[_toMap]());
    }
    copyWith(opts) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3;
      let systemNavigationBarColor = opts && 'systemNavigationBarColor' in opts ? opts.systemNavigationBarColor : null;
      let systemNavigationBarDividerColor = opts && 'systemNavigationBarDividerColor' in opts ? opts.systemNavigationBarDividerColor : null;
      let statusBarColor = opts && 'statusBarColor' in opts ? opts.statusBarColor : null;
      let statusBarBrightness = opts && 'statusBarBrightness' in opts ? opts.statusBarBrightness : null;
      let statusBarIconBrightness = opts && 'statusBarIconBrightness' in opts ? opts.statusBarIconBrightness : null;
      let systemNavigationBarIconBrightness = opts && 'systemNavigationBarIconBrightness' in opts ? opts.systemNavigationBarIconBrightness : null;
      return new src__services__system_chrome.SystemUiOverlayStyle.new({systemNavigationBarColor: (t0 = systemNavigationBarColor, t0 == null ? this.systemNavigationBarColor : t0), systemNavigationBarDividerColor: (t0$ = systemNavigationBarDividerColor, t0$ == null ? this.systemNavigationBarDividerColor : t0$), statusBarColor: (t0$0 = statusBarColor, t0$0 == null ? this.statusBarColor : t0$0), statusBarIconBrightness: (t0$1 = statusBarIconBrightness, t0$1 == null ? this.statusBarIconBrightness : t0$1), statusBarBrightness: (t0$2 = statusBarBrightness, t0$2 == null ? this.statusBarBrightness : t0$2), systemNavigationBarIconBrightness: (t0$3 = systemNavigationBarIconBrightness, t0$3 == null ? this.systemNavigationBarIconBrightness : t0$3)});
    }
    get hashCode() {
      return ui$.hashValues(this.systemNavigationBarColor, this.systemNavigationBarDividerColor, this.statusBarColor, this.statusBarBrightness, this.statusBarIconBrightness, this.systemNavigationBarIconBrightness);
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.equals(dart.runtimeType(other), this[$runtimeType])) return false;
      let typedOther = src__services__system_chrome.SystemUiOverlayStyle._check(other);
      return dart.equals(typedOther.systemNavigationBarColor, this.systemNavigationBarColor) && dart.equals(typedOther.systemNavigationBarDividerColor, this.systemNavigationBarDividerColor) && dart.equals(typedOther.statusBarColor, this.statusBarColor) && dart.equals(typedOther.statusBarIconBrightness, this.statusBarIconBrightness) && dart.equals(typedOther.statusBarBrightness, this.statusBarBrightness) && dart.equals(typedOther.systemNavigationBarIconBrightness, this.systemNavigationBarIconBrightness);
    }
  };
  (src__services__system_chrome.SystemUiOverlayStyle.new = function(opts) {
    let systemNavigationBarColor = opts && 'systemNavigationBarColor' in opts ? opts.systemNavigationBarColor : null;
    let systemNavigationBarDividerColor = opts && 'systemNavigationBarDividerColor' in opts ? opts.systemNavigationBarDividerColor : null;
    let systemNavigationBarIconBrightness = opts && 'systemNavigationBarIconBrightness' in opts ? opts.systemNavigationBarIconBrightness : null;
    let statusBarColor = opts && 'statusBarColor' in opts ? opts.statusBarColor : null;
    let statusBarBrightness = opts && 'statusBarBrightness' in opts ? opts.statusBarBrightness : null;
    let statusBarIconBrightness = opts && 'statusBarIconBrightness' in opts ? opts.statusBarIconBrightness : null;
    this[systemNavigationBarColor$] = systemNavigationBarColor;
    this[systemNavigationBarDividerColor$] = systemNavigationBarDividerColor;
    this[systemNavigationBarIconBrightness$] = systemNavigationBarIconBrightness;
    this[statusBarColor$] = statusBarColor;
    this[statusBarBrightness$] = statusBarBrightness;
    this[statusBarIconBrightness$] = statusBarIconBrightness;
    ;
  }).prototype = src__services__system_chrome.SystemUiOverlayStyle.prototype;
  dart.addTypeTests(src__services__system_chrome.SystemUiOverlayStyle);
  const systemNavigationBarColor$ = Symbol("SystemUiOverlayStyle.systemNavigationBarColor");
  const systemNavigationBarDividerColor$ = Symbol("SystemUiOverlayStyle.systemNavigationBarDividerColor");
  const systemNavigationBarIconBrightness$ = Symbol("SystemUiOverlayStyle.systemNavigationBarIconBrightness");
  const statusBarColor$ = Symbol("SystemUiOverlayStyle.statusBarColor");
  const statusBarBrightness$ = Symbol("SystemUiOverlayStyle.statusBarBrightness");
  const statusBarIconBrightness$ = Symbol("SystemUiOverlayStyle.statusBarIconBrightness");
  dart.setMethodSignature(src__services__system_chrome.SystemUiOverlayStyle, () => ({
    __proto__: dart.getMethods(src__services__system_chrome.SystemUiOverlayStyle.__proto__),
    [_toMap]: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    copyWith: dart.fnType(src__services__system_chrome.SystemUiOverlayStyle, [], {statusBarBrightness: ui$.Brightness, statusBarColor: ui$.Color, statusBarIconBrightness: ui$.Brightness, systemNavigationBarColor: ui$.Color, systemNavigationBarDividerColor: ui$.Color, systemNavigationBarIconBrightness: ui$.Brightness})
  }));
  dart.setLibraryUri(src__services__system_chrome.SystemUiOverlayStyle, "package:flutter_web/src/services/system_chrome.dart");
  dart.setFieldSignature(src__services__system_chrome.SystemUiOverlayStyle, () => ({
    __proto__: dart.getFields(src__services__system_chrome.SystemUiOverlayStyle.__proto__),
    systemNavigationBarColor: dart.finalFieldType(ui$.Color),
    systemNavigationBarDividerColor: dart.finalFieldType(ui$.Color),
    systemNavigationBarIconBrightness: dart.finalFieldType(ui$.Brightness),
    statusBarColor: dart.finalFieldType(ui$.Color),
    statusBarBrightness: dart.finalFieldType(ui$.Brightness),
    statusBarIconBrightness: dart.finalFieldType(ui$.Brightness)
  }));
  dart.defineExtensionMethods(src__services__system_chrome.SystemUiOverlayStyle, ['toString', '_equals']);
  dart.defineExtensionAccessors(src__services__system_chrome.SystemUiOverlayStyle, ['hashCode']);
  dart.defineLazy(src__services__system_chrome.SystemUiOverlayStyle, {
    /*src__services__system_chrome.SystemUiOverlayStyle.light*/get light() {
      return dart.const(new src__services__system_chrome.SystemUiOverlayStyle.new({systemNavigationBarColor: dart.const(new ui$.Color.new(4278190080)), systemNavigationBarDividerColor: null, statusBarColor: null, systemNavigationBarIconBrightness: ui$.Brightness.light, statusBarIconBrightness: ui$.Brightness.light, statusBarBrightness: ui$.Brightness.dark}));
    },
    /*src__services__system_chrome.SystemUiOverlayStyle.dark*/get dark() {
      return dart.const(new src__services__system_chrome.SystemUiOverlayStyle.new({systemNavigationBarColor: dart.const(new ui$.Color.new(4278190080)), systemNavigationBarDividerColor: null, statusBarColor: null, systemNavigationBarIconBrightness: ui$.Brightness.light, statusBarIconBrightness: ui$.Brightness.dark, statusBarBrightness: ui$.Brightness.light}));
    }
  });
  src__services__system_chrome.SystemChrome = class SystemChrome extends core.Object {
    static setPreferredOrientations(orientations) {
      return async.async(dart.void, function* setPreferredOrientations() {
        yield src__services__system_channels.SystemChannels.platform.invokeMethod(dart.void, "SystemChrome.setPreferredOrientations", src__services__system_chrome._stringify(orientations));
      });
    }
    static setApplicationSwitcherDescription(description) {
      return async.async(dart.void, function* setApplicationSwitcherDescription() {
        yield src__services__system_channels.SystemChannels.platform.invokeMethod(dart.void, "SystemChrome.setApplicationSwitcherDescription", new (IdentityMapOfString$dynamic()).from(["label", description.label, "primaryColor", description.primaryColor]));
      });
    }
    static setEnabledSystemUIOverlays(overlays) {
      return async.async(dart.void, function* setEnabledSystemUIOverlays() {
        yield src__services__system_channels.SystemChannels.platform.invokeMethod(dart.void, "SystemChrome.setEnabledSystemUIOverlays", src__services__system_chrome._stringify(overlays));
      });
    }
    static restoreSystemUIOverlays() {
      return async.async(dart.void, function* restoreSystemUIOverlays() {
        yield src__services__system_channels.SystemChannels.platform.invokeMethod(dart.void, "SystemChrome.restoreSystemUIOverlays", null);
      });
    }
    static setSystemUIOverlayStyle(style) {
      if (!(style != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/system_chrome.dart", 377, 12, "style != null");
      if (src__services__system_chrome.SystemChrome._pendingStyle != null) {
        src__services__system_chrome.SystemChrome._pendingStyle = style;
        return;
      }
      if (dart.equals(style, src__services__system_chrome.SystemChrome._latestStyle)) {
        return;
      }
      src__services__system_chrome.SystemChrome._pendingStyle = style;
      async.scheduleMicrotask(dart.fn(() => {
        if (!(src__services__system_chrome.SystemChrome._pendingStyle != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/system_chrome.dart", 390, 14, "_pendingStyle != null");
        if (!dart.equals(src__services__system_chrome.SystemChrome._pendingStyle, src__services__system_chrome.SystemChrome._latestStyle)) {
          src__services__system_channels.SystemChannels.platform.invokeMethod(dart.void, "SystemChrome.setSystemUIOverlayStyle", src__services__system_chrome.SystemChrome._pendingStyle[_toMap]());
          src__services__system_chrome.SystemChrome._latestStyle = src__services__system_chrome.SystemChrome._pendingStyle;
        }
        src__services__system_chrome.SystemChrome._pendingStyle = null;
      }, VoidToNull()));
    }
    static get latestStyle() {
      return src__services__system_chrome.SystemChrome._latestStyle;
    }
  };
  (src__services__system_chrome.SystemChrome.__ = function() {
    ;
  }).prototype = src__services__system_chrome.SystemChrome.prototype;
  dart.addTypeTests(src__services__system_chrome.SystemChrome);
  dart.setLibraryUri(src__services__system_chrome.SystemChrome, "package:flutter_web/src/services/system_chrome.dart");
  dart.defineLazy(src__services__system_chrome.SystemChrome, {
    /*src__services__system_chrome.SystemChrome._pendingStyle*/get _pendingStyle() {
      return null;
    },
    set _pendingStyle(_) {},
    /*src__services__system_chrome.SystemChrome._latestStyle*/get _latestStyle() {
      return null;
    },
    set _latestStyle(_) {}
  });
  src__services__system_chrome._stringify = function(list) {
    let result = JSArrayOfString().of([]);
    for (let item of list)
      result[$add](dart.toString(item));
    return result;
  };
  src__services__system_channels.SystemChannels = class SystemChannels extends core.Object {};
  (src__services__system_channels.SystemChannels.__ = function() {
    ;
  }).prototype = src__services__system_channels.SystemChannels.prototype;
  dart.addTypeTests(src__services__system_channels.SystemChannels);
  dart.setLibraryUri(src__services__system_channels.SystemChannels, "package:flutter_web/src/services/system_channels.dart");
  dart.defineLazy(src__services__system_channels.SystemChannels, {
    /*src__services__system_channels.SystemChannels.navigation*/get navigation() {
      return dart.const(new src__services__platform_channel.MethodChannel.new("flutter/navigation", dart.const(new src__services__message_codecs.JSONMethodCodec.new())));
    },
    /*src__services__system_channels.SystemChannels.platform*/get platform() {
      return dart.const(new src__services__platform_channel.OptionalMethodChannel.new("flutter/platform", dart.const(new src__services__message_codecs.JSONMethodCodec.new())));
    },
    /*src__services__system_channels.SystemChannels.textInput*/get textInput() {
      return dart.const(new src__services__platform_channel.OptionalMethodChannel.new("flutter/textinput", dart.const(new src__services__message_codecs.JSONMethodCodec.new())));
    },
    /*src__services__system_channels.SystemChannels.keyEvent*/get keyEvent() {
      return dart.const(new src__services__platform_channel.BasicMessageChannel.new("flutter/keyevent", dart.const(new src__services__message_codecs.JSONMessageCodec.new())));
    },
    /*src__services__system_channels.SystemChannels.lifecycle*/get lifecycle() {
      return dart.const(new (BasicMessageChannelOfString()).new("flutter/lifecycle", dart.const(new src__services__message_codecs.StringCodec.new())));
    },
    /*src__services__system_channels.SystemChannels.system*/get system() {
      return dart.const(new src__services__platform_channel.BasicMessageChannel.new("flutter/system", dart.const(new src__services__message_codecs.JSONMessageCodec.new())));
    },
    /*src__services__system_channels.SystemChannels.accessibility*/get accessibility() {
      return dart.const(new src__services__platform_channel.BasicMessageChannel.new("flutter/accessibility", dart.const(new src__services__message_codecs.StandardMessageCodec.new())));
    },
    /*src__services__system_channels.SystemChannels.platform_views*/get platform_views() {
      return dart.const(new src__services__platform_channel.MethodChannel.new("flutter/platform_views", dart.const(new src__services__message_codecs.StandardMethodCodec.new())));
    }
  });
  const _is_BasicMessageChannel_default = Symbol('_is_BasicMessageChannel_default');
  src__services__platform_channel.BasicMessageChannel$ = dart.generic(T => {
    let FutureOfT = () => (FutureOfT = dart.constFn(async.Future$(T)))();
    let TToFutureOfT = () => (TToFutureOfT = dart.constFn(dart.fnType(FutureOfT(), [T])))();
    class BasicMessageChannel extends core.Object {
      get name() {
        return this[name$];
      }
      set name(value) {
        super.name = value;
      }
      get codec() {
        return this[codec$];
      }
      set codec(value) {
        super.codec = value;
      }
      send(message) {
        T._check(message);
        return async.async(T, (function* send() {
          return this.codec.decodeMessage(yield src__services__platform_messages.BinaryMessages.send(this.name, this.codec.encodeMessage(message)));
        }).bind(this));
      }
      setMessageHandler(handler) {
        TToFutureOfT()._check(handler);
        if (handler == null) {
          src__services__platform_messages.BinaryMessages.setMessageHandler(this.name, null);
        } else {
          src__services__platform_messages.BinaryMessages.setMessageHandler(this.name, dart.fn(message => async.async(typed_data.ByteData, (function*() {
            return this.codec.encodeMessage(yield handler(this.codec.decodeMessage(message)));
          }).bind(this)), ByteDataToFutureOfByteData()));
        }
      }
      setMockMessageHandler(handler) {
        TToFutureOfT()._check(handler);
        if (handler == null) {
          src__services__platform_messages.BinaryMessages.setMockMessageHandler(this.name, null);
        } else {
          src__services__platform_messages.BinaryMessages.setMockMessageHandler(this.name, dart.fn(message => async.async(typed_data.ByteData, (function*() {
            return this.codec.encodeMessage(yield handler(this.codec.decodeMessage(message)));
          }).bind(this)), ByteDataToFutureOfByteData()));
        }
      }
    }
    (BasicMessageChannel.new = function(name, codec) {
      this[name$] = name;
      this[codec$] = codec;
      ;
    }).prototype = BasicMessageChannel.prototype;
    dart.addTypeTests(BasicMessageChannel);
    BasicMessageChannel.prototype[_is_BasicMessageChannel_default] = true;
    const name$ = Symbol("BasicMessageChannel.name");
    const codec$ = Symbol("BasicMessageChannel.codec");
    dart.setMethodSignature(BasicMessageChannel, () => ({
      __proto__: dart.getMethods(BasicMessageChannel.__proto__),
      send: dart.fnType(async.Future$(T), [core.Object]),
      setMessageHandler: dart.fnType(dart.void, [core.Object]),
      setMockMessageHandler: dart.fnType(dart.void, [core.Object])
    }));
    dart.setLibraryUri(BasicMessageChannel, "package:flutter_web/src/services/platform_channel.dart");
    dart.setFieldSignature(BasicMessageChannel, () => ({
      __proto__: dart.getFields(BasicMessageChannel.__proto__),
      name: dart.finalFieldType(core.String),
      codec: dart.finalFieldType(src__services__message_codec.MessageCodec$(T))
    }));
    return BasicMessageChannel;
  });
  src__services__platform_channel.BasicMessageChannel = src__services__platform_channel.BasicMessageChannel$();
  dart.addTypeTests(src__services__platform_channel.BasicMessageChannel, _is_BasicMessageChannel_default);
  let const$;
  const _handleAsMethodCall = dart.privateName(src__services__platform_channel, "_handleAsMethodCall");
  src__services__platform_channel.MethodChannel = class MethodChannel extends core.Object {
    get name() {
      return this[name$];
    }
    set name(value) {
      super.name = value;
    }
    get codec() {
      return this[codec$];
    }
    set codec(value) {
      super.codec = value;
    }
    invokeMethod(T, method, arguments$0) {
      if (arguments$0 === void 0) arguments$0 = null;
      return async.async(T, (function* invokeMethod() {
        if (!(method != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/platform_channel.dart", 296, 12, "method != null");
        let result = (yield src__services__platform_messages.BinaryMessages.send(this.name, this.codec.encodeMethodCall(new src__services__message_codec.MethodCall.new(method, arguments$0))));
        if (result == null) {
          dart.throw(new src__services__message_codec.MissingPluginException.new("No implementation found for method " + dart.str(method) + " on channel " + dart.str(this.name)));
        }
        let typedResult = T._check(this.codec.decodeEnvelope(result));
        return typedResult;
      }).bind(this));
    }
    invokeListMethod(T, method, arguments$0) {
      if (arguments$0 === void 0) arguments$0 = null;
      return async.async(core.List$(T), (function* invokeListMethod() {
        let result = (yield this.invokeMethod(core.List, method, arguments$0));
        return result[$cast](T);
      }).bind(this));
    }
    invokeMapMethod(K, V, method, arguments$0) {
      if (arguments$0 === void 0) arguments$0 = null;
      return async.async(core.Map$(K, V), (function* invokeMapMethod() {
        let result = (yield this.invokeMethod(core.Map, method, arguments$0));
        return result[$cast](K, V);
      }).bind(this));
    }
    setMethodCallHandler(handler) {
      src__services__platform_messages.BinaryMessages.setMessageHandler(this.name, handler == null ? null : dart.fn(message => this[_handleAsMethodCall](message, handler), ByteDataToFutureOfByteData()));
    }
    setMockMethodCallHandler(handler) {
      src__services__platform_messages.BinaryMessages.setMockMessageHandler(this.name, handler == null ? null : dart.fn(message => this[_handleAsMethodCall](message, handler), ByteDataToFutureOfByteData()));
    }
    [_handleAsMethodCall](message, handler) {
      return async.async(typed_data.ByteData, (function* _handleAsMethodCall() {
        let call = this.codec.decodeMethodCall(message);
        try {
          return this.codec.encodeSuccessEnvelope(yield handler(call));
        } catch (e$) {
          let ex = dart.getThrown(e$);
          if (src__services__message_codec.PlatformException.is(ex)) {
            let e = ex;
            return this.codec.encodeErrorEnvelope({code: e.code, message: e.message, details: e.details});
          } else if (src__services__message_codec.MissingPluginException.is(ex)) {
            return null;
          } else {
            let e = ex;
            return this.codec.encodeErrorEnvelope({code: "error", message: dart.toString(e), details: null});
          }
        }
      }).bind(this));
    }
  };
  (src__services__platform_channel.MethodChannel.new = function(name, codec) {
    if (codec === void 0) codec = const$ || (const$ = dart.const(new src__services__message_codecs.StandardMethodCodec.new()));
    this[name$] = name;
    this[codec$] = codec;
    ;
  }).prototype = src__services__platform_channel.MethodChannel.prototype;
  dart.addTypeTests(src__services__platform_channel.MethodChannel);
  const name$ = Symbol("MethodChannel.name");
  const codec$ = Symbol("MethodChannel.codec");
  dart.setMethodSignature(src__services__platform_channel.MethodChannel, () => ({
    __proto__: dart.getMethods(src__services__platform_channel.MethodChannel.__proto__),
    invokeMethod: dart.gFnType(T => [async.Future$(T), [core.String], [dart.dynamic]]),
    invokeListMethod: dart.gFnType(T => [async.Future$(core.List$(T)), [core.String], [dart.dynamic]]),
    invokeMapMethod: dart.gFnType((K, V) => [async.Future$(core.Map$(K, V)), [core.String], [dart.dynamic]]),
    setMethodCallHandler: dart.fnType(dart.void, [dart.fnType(async.Future, [src__services__message_codec.MethodCall])]),
    setMockMethodCallHandler: dart.fnType(dart.void, [dart.fnType(async.Future, [src__services__message_codec.MethodCall])]),
    [_handleAsMethodCall]: dart.fnType(async.Future$(typed_data.ByteData), [typed_data.ByteData, dart.fnType(async.Future, [src__services__message_codec.MethodCall])])
  }));
  dart.setLibraryUri(src__services__platform_channel.MethodChannel, "package:flutter_web/src/services/platform_channel.dart");
  dart.setFieldSignature(src__services__platform_channel.MethodChannel, () => ({
    __proto__: dart.getFields(src__services__platform_channel.MethodChannel.__proto__),
    name: dart.finalFieldType(core.String),
    codec: dart.finalFieldType(src__services__message_codec.MethodCodec)
  }));
  let const$0;
  const invokeMethod = Symbol("invokeMethod");
  src__services__platform_channel.OptionalMethodChannel = class OptionalMethodChannel extends src__services__platform_channel.MethodChannel {
    invokeMethod(T, method, arguments$0) {
      if (arguments$0 === void 0) arguments$0 = null;
      return async.async(T, (function* invokeMethod$() {
        try {
          let result = (yield this[invokeMethod](T, method, arguments$0));
          return result;
        } catch (e) {
          let ex = dart.getThrown(e);
          if (src__services__message_codec.MissingPluginException.is(ex)) {
            return null;
          } else
            throw e;
        }
      }).bind(this));
    }
    invokeListMethod(T, method, arguments$0) {
      if (arguments$0 === void 0) arguments$0 = null;
      return async.async(core.List$(T), (function* invokeListMethod() {
        let result = (yield this.invokeMethod(core.List, method, arguments$0));
        return result[$cast](T);
      }).bind(this));
    }
    invokeMapMethod(K, V, method, arguments$0) {
      if (arguments$0 === void 0) arguments$0 = null;
      return async.async(core.Map$(K, V), (function* invokeMapMethod() {
        let result = (yield this.invokeMethod(core.Map, method, arguments$0));
        return result[$cast](K, V);
      }).bind(this));
    }
    [invokeMethod](T, method, arguments$0) {
      return super.invokeMethod(T, method, arguments$0);
    }
  };
  (src__services__platform_channel.OptionalMethodChannel.new = function(name, codec) {
    if (codec === void 0) codec = const$0 || (const$0 = dart.const(new src__services__message_codecs.StandardMethodCodec.new()));
    src__services__platform_channel.OptionalMethodChannel.__proto__.new.call(this, name, codec);
    ;
  }).prototype = src__services__platform_channel.OptionalMethodChannel.prototype;
  dart.addTypeTests(src__services__platform_channel.OptionalMethodChannel);
  dart.setLibraryUri(src__services__platform_channel.OptionalMethodChannel, "package:flutter_web/src/services/platform_channel.dart");
  let const$1;
  src__services__platform_channel.EventChannel = class EventChannel extends core.Object {
    get name() {
      return this[name$0];
    }
    set name(value) {
      super.name = value;
    }
    get codec() {
      return this[codec$0];
    }
    set codec(value) {
      super.codec = value;
    }
    receiveBroadcastStream(arguments$0) {
      if (arguments$0 === void 0) arguments$0 = null;
      let methodChannel = new src__services__platform_channel.MethodChannel.new(this.name, this.codec);
      let controller = null;
      controller = async.StreamController.broadcast({onListen: dart.fn(() => async.async(core.Null, (function*() {
          src__services__platform_messages.BinaryMessages.setMessageHandler(this.name, dart.fn(reply => async.async(typed_data.ByteData, (function*() {
            if (reply == null) {
              controller.close();
            } else {
              try {
                controller.add(this.codec.decodeEnvelope(reply));
              } catch (e$) {
                let e = dart.getThrown(e$);
                if (src__services__message_codec.PlatformException.is(e)) {
                  controller.addError(e);
                } else
                  throw e$;
              }
            }
            return FutureOrOfByteData()._check(async.Future.value(null));
          }).bind(this)), ByteDataToFutureOfByteData()));
          try {
            yield methodChannel.invokeMethod(dart.dynamic, "listen", arguments$0);
          } catch (e) {
            let exception = dart.getThrown(e);
            let stack = dart.stackTrace(e);
            src__foundation__assertions.FlutterError.reportError(new src__foundation__assertions.FlutterErrorDetails.new({exception: exception, stack: stack, library: "services library", context: new src__foundation__assertions.ErrorDescription.new("while activating platform stream on channel " + dart.str(this.name))}));
          }
        }).bind(this)), VoidToFutureOfNull()), onCancel: dart.fn(() => async.async(core.Null, (function*() {
          src__services__platform_messages.BinaryMessages.setMessageHandler(this.name, null);
          try {
            yield methodChannel.invokeMethod(dart.dynamic, "cancel", arguments$0);
          } catch (e) {
            let exception = dart.getThrown(e);
            let stack = dart.stackTrace(e);
            src__foundation__assertions.FlutterError.reportError(new src__foundation__assertions.FlutterErrorDetails.new({exception: exception, stack: stack, library: "services library", context: new src__foundation__assertions.ErrorDescription.new("while de-activating platform stream on channel " + dart.str(this.name))}));
          }
        }).bind(this)), VoidToFutureOfNull())});
      return controller.stream;
    }
  };
  (src__services__platform_channel.EventChannel.new = function(name, codec) {
    if (codec === void 0) codec = const$1 || (const$1 = dart.const(new src__services__message_codecs.StandardMethodCodec.new()));
    this[name$0] = name;
    this[codec$0] = codec;
    ;
  }).prototype = src__services__platform_channel.EventChannel.prototype;
  dart.addTypeTests(src__services__platform_channel.EventChannel);
  const name$0 = Symbol("EventChannel.name");
  const codec$0 = Symbol("EventChannel.codec");
  dart.setMethodSignature(src__services__platform_channel.EventChannel, () => ({
    __proto__: dart.getMethods(src__services__platform_channel.EventChannel.__proto__),
    receiveBroadcastStream: dart.fnType(async.Stream, [], [dart.dynamic])
  }));
  dart.setLibraryUri(src__services__platform_channel.EventChannel, "package:flutter_web/src/services/platform_channel.dart");
  dart.setFieldSignature(src__services__platform_channel.EventChannel, () => ({
    __proto__: dart.getFields(src__services__platform_channel.EventChannel.__proto__),
    name: dart.finalFieldType(core.String),
    codec: dart.finalFieldType(src__services__message_codec.MethodCodec)
  }));
  src__services__platform_messages.BinaryMessages = class BinaryMessages extends core.Object {
    static _sendPlatformMessage(channel, message) {
      let completer = CompleterOfByteData().new();
      ui$.window.sendPlatformMessage(channel, message, dart.fn(reply => {
        try {
          completer.complete(reply);
        } catch (e) {
          let exception = dart.getThrown(e);
          let stack = dart.stackTrace(e);
          src__foundation__assertions.FlutterError.reportError(new src__foundation__assertions.FlutterErrorDetails.new({exception: exception, stack: stack, library: "services library", context: new src__foundation__assertions.ErrorDescription.new("during a platform message response callback")}));
        }
      }, ByteDataToNull()));
      return completer.future;
    }
    static handlePlatformMessage(channel, data, callback) {
      return async.async(dart.void, function* handlePlatformMessage() {
        let response = null;
        try {
          let handler = src__services__platform_messages.BinaryMessages._handlers[$_get](channel);
          if (handler != null) {
            response = (yield handler(data));
          }
        } catch (e) {
          let exception = dart.getThrown(e);
          let stack = dart.stackTrace(e);
          src__foundation__assertions.FlutterError.reportError(new src__foundation__assertions.FlutterErrorDetails.new({exception: exception, stack: stack, library: "services library", context: new src__foundation__assertions.ErrorDescription.new("during a platform message callback")}));
        } finally {
          callback(response);
        }
      });
    }
    static send(channel, message) {
      let handler = src__services__platform_messages.BinaryMessages._mockHandlers[$_get](channel);
      if (handler != null) return handler(message);
      return src__services__platform_messages.BinaryMessages._sendPlatformMessage(channel, message);
    }
    static setMessageHandler(channel, handler) {
      if (handler == null)
        src__services__platform_messages.BinaryMessages._handlers[$remove](channel);
      else
        src__services__platform_messages.BinaryMessages._handlers[$_set](channel, handler);
    }
    static setMockMessageHandler(channel, handler) {
      if (handler == null)
        src__services__platform_messages.BinaryMessages._mockHandlers[$remove](channel);
      else
        src__services__platform_messages.BinaryMessages._mockHandlers[$_set](channel, handler);
    }
  };
  (src__services__platform_messages.BinaryMessages.__ = function() {
    ;
  }).prototype = src__services__platform_messages.BinaryMessages.prototype;
  dart.addTypeTests(src__services__platform_messages.BinaryMessages);
  dart.setLibraryUri(src__services__platform_messages.BinaryMessages, "package:flutter_web/src/services/platform_messages.dart");
  dart.defineLazy(src__services__platform_messages.BinaryMessages, {
    /*src__services__platform_messages.BinaryMessages._handlers*/get _handlers() {
      return new (IdentityMapOfString$ByteDataToFutureOfByteData()).new();
    },
    /*src__services__platform_messages.BinaryMessages._mockHandlers*/get _mockHandlers() {
      return new (IdentityMapOfString$ByteDataToFutureOfByteData()).new();
    }
  });
  src__services__message_codecs.BinaryCodec = class BinaryCodec extends core.Object {
    decodeMessage(message) {
      return message;
    }
    encodeMessage(message) {
      typed_data.ByteData._check(message);
      return message;
    }
  };
  (src__services__message_codecs.BinaryCodec.new = function() {
    ;
  }).prototype = src__services__message_codecs.BinaryCodec.prototype;
  dart.addTypeTests(src__services__message_codecs.BinaryCodec);
  src__services__message_codecs.BinaryCodec[dart.implements] = () => [src__services__message_codec.MessageCodec$(typed_data.ByteData)];
  dart.setMethodSignature(src__services__message_codecs.BinaryCodec, () => ({
    __proto__: dart.getMethods(src__services__message_codecs.BinaryCodec.__proto__),
    decodeMessage: dart.fnType(typed_data.ByteData, [typed_data.ByteData]),
    encodeMessage: dart.fnType(typed_data.ByteData, [core.Object])
  }));
  dart.setLibraryUri(src__services__message_codecs.BinaryCodec, "package:flutter_web/src/services/message_codecs.dart");
  src__services__message_codecs.StringCodec = class StringCodec extends core.Object {
    decodeMessage(message) {
      if (message == null) return null;
      return convert.utf8.decoder.convert(message[$buffer][$asUint8List](message[$offsetInBytes], message[$lengthInBytes]));
    }
    encodeMessage(message) {
      core.String._check(message);
      if (message == null) return null;
      let encoded = typed_data.Uint8List._check(convert.utf8.encoder.convert(message));
      return encoded[$buffer][$asByteData]();
    }
  };
  (src__services__message_codecs.StringCodec.new = function() {
    ;
  }).prototype = src__services__message_codecs.StringCodec.prototype;
  dart.addTypeTests(src__services__message_codecs.StringCodec);
  src__services__message_codecs.StringCodec[dart.implements] = () => [src__services__message_codec.MessageCodec$(core.String)];
  dart.setMethodSignature(src__services__message_codecs.StringCodec, () => ({
    __proto__: dart.getMethods(src__services__message_codecs.StringCodec.__proto__),
    decodeMessage: dart.fnType(core.String, [typed_data.ByteData]),
    encodeMessage: dart.fnType(typed_data.ByteData, [core.Object])
  }));
  dart.setLibraryUri(src__services__message_codecs.StringCodec, "package:flutter_web/src/services/message_codecs.dart");
  let const$2;
  let const$3;
  src__services__message_codecs.JSONMessageCodec = class JSONMessageCodec extends core.Object {
    encodeMessage(message) {
      if (message == null) return null;
      return (const$2 || (const$2 = dart.const(new src__services__message_codecs.StringCodec.new()))).encodeMessage(convert.json.encode(message));
    }
    decodeMessage(message) {
      if (message == null) return message;
      return convert.json.decode((const$3 || (const$3 = dart.const(new src__services__message_codecs.StringCodec.new()))).decodeMessage(message));
    }
  };
  (src__services__message_codecs.JSONMessageCodec.new = function() {
    ;
  }).prototype = src__services__message_codecs.JSONMessageCodec.prototype;
  dart.addTypeTests(src__services__message_codecs.JSONMessageCodec);
  src__services__message_codecs.JSONMessageCodec[dart.implements] = () => [src__services__message_codec.MessageCodec];
  dart.setMethodSignature(src__services__message_codecs.JSONMessageCodec, () => ({
    __proto__: dart.getMethods(src__services__message_codecs.JSONMessageCodec.__proto__),
    encodeMessage: dart.fnType(typed_data.ByteData, [core.Object]),
    decodeMessage: dart.fnType(dart.dynamic, [typed_data.ByteData])
  }));
  dart.setLibraryUri(src__services__message_codecs.JSONMessageCodec, "package:flutter_web/src/services/message_codecs.dart");
  let const$4;
  let const$5;
  let const$6;
  let const$7;
  let const$8;
  src__services__message_codecs.JSONMethodCodec = class JSONMethodCodec extends core.Object {
    encodeMethodCall(call) {
      return (const$4 || (const$4 = dart.const(new src__services__message_codecs.JSONMessageCodec.new()))).encodeMessage(new (IdentityMapOfString$dynamic()).from(["method", call.method, "args", call.arguments]));
    }
    decodeMethodCall(methodCall) {
      let decoded = (const$5 || (const$5 = dart.const(new src__services__message_codecs.JSONMessageCodec.new()))).decodeMessage(methodCall);
      if (!core.Map.is(decoded)) dart.throw(new core.FormatException.new("Expected method call Map, got " + dart.str(decoded)));
      let method = dart.dsend(decoded, '_get', ["method"]);
      let arguments$0 = dart.dsend(decoded, '_get', ["args"]);
      if (typeof method == 'string') return new src__services__message_codec.MethodCall.new(method, arguments$0);
      dart.throw(new core.FormatException.new("Invalid method call: " + dart.str(decoded)));
    }
    decodeEnvelope(envelope) {
      let decoded = (const$6 || (const$6 = dart.const(new src__services__message_codecs.JSONMessageCodec.new()))).decodeMessage(envelope);
      if (!core.List.is(decoded)) dart.throw(new core.FormatException.new("Expected envelope List, got " + dart.str(decoded)));
      if (dart.equals(dart.dload(decoded, 'length'), 1)) return dart.dsend(decoded, '_get', [0]);
      if (dart.equals(dart.dload(decoded, 'length'), 3) && typeof dart.dsend(decoded, '_get', [0]) == 'string' && (dart.dsend(decoded, '_get', [1]) == null || typeof dart.dsend(decoded, '_get', [1]) == 'string')) dart.throw(new src__services__message_codec.PlatformException.new({code: core.String._check(dart.dsend(decoded, '_get', [0])), message: core.String._check(dart.dsend(decoded, '_get', [1])), details: dart.dsend(decoded, '_get', [2])}));
      dart.throw(new core.FormatException.new("Invalid envelope: " + dart.str(decoded)));
    }
    encodeSuccessEnvelope(result) {
      return (const$7 || (const$7 = dart.const(new src__services__message_codecs.JSONMessageCodec.new()))).encodeMessage([result]);
    }
    encodeErrorEnvelope(opts) {
      let code = opts && 'code' in opts ? opts.code : null;
      let message = opts && 'message' in opts ? opts.message : null;
      let details = opts && 'details' in opts ? opts.details : null;
      if (!(code != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/message_codecs.dart", 164, 12, "code != null");
      return (const$8 || (const$8 = dart.const(new src__services__message_codecs.JSONMessageCodec.new()))).encodeMessage([code, message, details]);
    }
  };
  (src__services__message_codecs.JSONMethodCodec.new = function() {
    ;
  }).prototype = src__services__message_codecs.JSONMethodCodec.prototype;
  dart.addTypeTests(src__services__message_codecs.JSONMethodCodec);
  src__services__message_codecs.JSONMethodCodec[dart.implements] = () => [src__services__message_codec.MethodCodec];
  dart.setMethodSignature(src__services__message_codecs.JSONMethodCodec, () => ({
    __proto__: dart.getMethods(src__services__message_codecs.JSONMethodCodec.__proto__),
    encodeMethodCall: dart.fnType(typed_data.ByteData, [src__services__message_codec.MethodCall]),
    decodeMethodCall: dart.fnType(src__services__message_codec.MethodCall, [typed_data.ByteData]),
    decodeEnvelope: dart.fnType(dart.dynamic, [typed_data.ByteData]),
    encodeSuccessEnvelope: dart.fnType(typed_data.ByteData, [dart.dynamic]),
    encodeErrorEnvelope: dart.fnType(typed_data.ByteData, [], {code: core.String, details: dart.dynamic, message: core.String})
  }));
  dart.setLibraryUri(src__services__message_codecs.JSONMethodCodec, "package:flutter_web/src/services/message_codecs.dart");
  let const$9;
  let const$10;
  let const$11;
  src__services__message_codecs.StandardMessageCodec = class StandardMessageCodec extends core.Object {
    encodeMessage(message) {
      if (message == null) return null;
      let buffer = new src__foundation__serialization.WriteBuffer.new();
      this.writeValue(buffer, message);
      return buffer.done();
    }
    decodeMessage(message) {
      if (message == null) return null;
      let buffer = new src__foundation__serialization.ReadBuffer.new(message);
      let result = this.readValue(buffer);
      if (dart.test(buffer.hasRemaining)) dart.throw(const$9 || (const$9 = dart.const(new core.FormatException.new("Message corrupted"))));
      return result;
    }
    writeValue(buffer, value) {
      if (value == null) {
        buffer.putUint8(src__services__message_codecs.StandardMessageCodec._valueNull);
      } else if (typeof value == 'boolean') {
        buffer.putUint8(dart.test(value) ? src__services__message_codecs.StandardMessageCodec._valueTrue : src__services__message_codecs.StandardMessageCodec._valueFalse);
      } else if (typeof value == 'number') {
        buffer.putUint8(src__services__message_codecs.StandardMessageCodec._valueFloat64);
        buffer.putFloat64(value);
      } else if (core.int.is(value)) {
        if (-2147483647 - 1 <= dart.notNull(value) && dart.notNull(value) <= 2147483647) {
          buffer.putUint8(src__services__message_codecs.StandardMessageCodec._valueInt32);
          buffer.putInt32(value);
        } else {
          buffer.putUint8(src__services__message_codecs.StandardMessageCodec._valueInt64);
          buffer.putInt64(value);
        }
      } else if (typeof value == 'string') {
        buffer.putUint8(src__services__message_codecs.StandardMessageCodec._valueString);
        let bytes = convert.utf8.encoder.convert(value);
        this.writeSize(buffer, bytes[$length]);
        buffer.putUint8List(typed_data.Uint8List._check(bytes));
      } else if (typed_data.Uint8List.is(value)) {
        buffer.putUint8(src__services__message_codecs.StandardMessageCodec._valueUint8List);
        this.writeSize(buffer, value[$length]);
        buffer.putUint8List(value);
      } else if (typed_data.Int32List.is(value)) {
        buffer.putUint8(src__services__message_codecs.StandardMessageCodec._valueInt32List);
        this.writeSize(buffer, value[$length]);
        buffer.putInt32List(value);
      } else if (typed_data.Int64List.is(value)) {
        buffer.putUint8(src__services__message_codecs.StandardMessageCodec._valueInt64List);
        this.writeSize(buffer, value[$length]);
        buffer.putInt64List(value);
      } else if (typed_data.Float64List.is(value)) {
        buffer.putUint8(src__services__message_codecs.StandardMessageCodec._valueFloat64List);
        this.writeSize(buffer, value[$length]);
        buffer.putFloat64List(value);
      } else if (core.List.is(value)) {
        buffer.putUint8(src__services__message_codecs.StandardMessageCodec._valueList);
        this.writeSize(buffer, value[$length]);
        for (let item of value) {
          this.writeValue(buffer, item);
        }
      } else if (core.Map.is(value)) {
        buffer.putUint8(src__services__message_codecs.StandardMessageCodec._valueMap);
        this.writeSize(buffer, value[$length]);
        value[$forEach](dart.fn((key, value) => {
          this.writeValue(buffer, key);
          this.writeValue(buffer, value);
        }, dynamicAnddynamicToNull()));
      } else {
        dart.throw(new core.ArgumentError.value(value));
      }
    }
    readValue(buffer) {
      if (!dart.test(buffer.hasRemaining)) dart.throw(const$10 || (const$10 = dart.const(new core.FormatException.new("Message corrupted"))));
      let type = buffer.getUint8();
      return this.readValueOfType(type, buffer);
    }
    readValueOfType(type, buffer) {
      switch (type) {
        case src__services__message_codecs.StandardMessageCodec._valueNull:
        {
          return null;
        }
        case src__services__message_codecs.StandardMessageCodec._valueTrue:
        {
          return true;
        }
        case src__services__message_codecs.StandardMessageCodec._valueFalse:
        {
          return false;
        }
        case src__services__message_codecs.StandardMessageCodec._valueInt32:
        {
          return buffer.getInt32();
        }
        case src__services__message_codecs.StandardMessageCodec._valueInt64:
        {
          return buffer.getInt64();
        }
        case src__services__message_codecs.StandardMessageCodec._valueFloat64:
        {
          return buffer.getFloat64();
        }
        case src__services__message_codecs.StandardMessageCodec._valueLargeInt:
        case src__services__message_codecs.StandardMessageCodec._valueString:
        {
          let length = this.readSize(buffer);
          return convert.utf8.decoder.convert(buffer.getUint8List(length));
        }
        case src__services__message_codecs.StandardMessageCodec._valueUint8List:
        {
          let length = this.readSize(buffer);
          return buffer.getUint8List(length);
        }
        case src__services__message_codecs.StandardMessageCodec._valueInt32List:
        {
          let length = this.readSize(buffer);
          return buffer.getInt32List(length);
        }
        case src__services__message_codecs.StandardMessageCodec._valueInt64List:
        {
          let length = this.readSize(buffer);
          return buffer.getInt64List(length);
        }
        case src__services__message_codecs.StandardMessageCodec._valueFloat64List:
        {
          let length = this.readSize(buffer);
          return buffer.getFloat64List(length);
        }
        case src__services__message_codecs.StandardMessageCodec._valueList:
        {
          let length = this.readSize(buffer);
          let result = core.List.new(length);
          for (let i = 0; i < dart.notNull(length); i = i + 1)
            dart.dsend(result, '_set', [i, this.readValue(buffer)]);
          return result;
        }
        case src__services__message_codecs.StandardMessageCodec._valueMap:
        {
          let length = this.readSize(buffer);
          let result = new _js_helper.LinkedMap.new();
          for (let i = 0; i < dart.notNull(length); i = i + 1)
            dart.dsend(result, '_set', [this.readValue(buffer), this.readValue(buffer)]);
          return result;
        }
        default:
        {
          dart.throw(const$11 || (const$11 = dart.const(new core.FormatException.new("Message corrupted"))));
        }
      }
    }
    writeSize(buffer, value) {
      if (!(0 <= dart.notNull(value) && dart.notNull(value) <= 4294967295)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/message_codecs.dart", 460, 12, "0 <= value && value <= 0xffffffff");
      if (dart.notNull(value) < 254) {
        buffer.putUint8(value);
      } else if (dart.notNull(value) <= 65535) {
        buffer.putUint8(254);
        buffer.putUint16(value);
      } else {
        buffer.putUint8(255);
        buffer.putUint32(value);
      }
    }
    readSize(buffer) {
      let value = buffer.getUint8();
      switch (value) {
        case 254:
        {
          return buffer.getUint16();
        }
        case 255:
        {
          return buffer.getUint32();
        }
        default:
        {
          return value;
        }
      }
    }
  };
  (src__services__message_codecs.StandardMessageCodec.new = function() {
    ;
  }).prototype = src__services__message_codecs.StandardMessageCodec.prototype;
  dart.addTypeTests(src__services__message_codecs.StandardMessageCodec);
  src__services__message_codecs.StandardMessageCodec[dart.implements] = () => [src__services__message_codec.MessageCodec];
  dart.setMethodSignature(src__services__message_codecs.StandardMessageCodec, () => ({
    __proto__: dart.getMethods(src__services__message_codecs.StandardMessageCodec.__proto__),
    encodeMessage: dart.fnType(typed_data.ByteData, [core.Object]),
    decodeMessage: dart.fnType(dart.dynamic, [typed_data.ByteData]),
    writeValue: dart.fnType(dart.void, [src__foundation__serialization.WriteBuffer, dart.dynamic]),
    readValue: dart.fnType(dart.dynamic, [src__foundation__serialization.ReadBuffer]),
    readValueOfType: dart.fnType(dart.dynamic, [core.int, src__foundation__serialization.ReadBuffer]),
    writeSize: dart.fnType(dart.void, [src__foundation__serialization.WriteBuffer, core.int]),
    readSize: dart.fnType(core.int, [src__foundation__serialization.ReadBuffer])
  }));
  dart.setLibraryUri(src__services__message_codecs.StandardMessageCodec, "package:flutter_web/src/services/message_codecs.dart");
  dart.defineLazy(src__services__message_codecs.StandardMessageCodec, {
    /*src__services__message_codecs.StandardMessageCodec._valueNull*/get _valueNull() {
      return 0;
    },
    /*src__services__message_codecs.StandardMessageCodec._valueTrue*/get _valueTrue() {
      return 1;
    },
    /*src__services__message_codecs.StandardMessageCodec._valueFalse*/get _valueFalse() {
      return 2;
    },
    /*src__services__message_codecs.StandardMessageCodec._valueInt32*/get _valueInt32() {
      return 3;
    },
    /*src__services__message_codecs.StandardMessageCodec._valueInt64*/get _valueInt64() {
      return 4;
    },
    /*src__services__message_codecs.StandardMessageCodec._valueLargeInt*/get _valueLargeInt() {
      return 5;
    },
    /*src__services__message_codecs.StandardMessageCodec._valueFloat64*/get _valueFloat64() {
      return 6;
    },
    /*src__services__message_codecs.StandardMessageCodec._valueString*/get _valueString() {
      return 7;
    },
    /*src__services__message_codecs.StandardMessageCodec._valueUint8List*/get _valueUint8List() {
      return 8;
    },
    /*src__services__message_codecs.StandardMessageCodec._valueInt32List*/get _valueInt32List() {
      return 9;
    },
    /*src__services__message_codecs.StandardMessageCodec._valueInt64List*/get _valueInt64List() {
      return 10;
    },
    /*src__services__message_codecs.StandardMessageCodec._valueFloat64List*/get _valueFloat64List() {
      return 11;
    },
    /*src__services__message_codecs.StandardMessageCodec._valueList*/get _valueList() {
      return 12;
    },
    /*src__services__message_codecs.StandardMessageCodec._valueMap*/get _valueMap() {
      return 13;
    }
  });
  let const$12;
  let const$13;
  let const$14;
  let const$15;
  src__services__message_codecs.StandardMethodCodec = class StandardMethodCodec extends core.Object {
    get messageCodec() {
      return this[messageCodec$];
    }
    set messageCodec(value) {
      super.messageCodec = value;
    }
    encodeMethodCall(call) {
      let buffer = new src__foundation__serialization.WriteBuffer.new();
      this.messageCodec.writeValue(buffer, call.method);
      this.messageCodec.writeValue(buffer, call.arguments);
      return buffer.done();
    }
    decodeMethodCall(methodCall) {
      let buffer = new src__foundation__serialization.ReadBuffer.new(methodCall);
      let method = this.messageCodec.readValue(buffer);
      let arguments$0 = this.messageCodec.readValue(buffer);
      if (typeof method == 'string' && !dart.test(buffer.hasRemaining))
        return new src__services__message_codec.MethodCall.new(method, arguments$0);
      else
        dart.throw(const$13 || (const$13 = dart.const(new core.FormatException.new("Invalid method call"))));
    }
    encodeSuccessEnvelope(result) {
      let buffer = new src__foundation__serialization.WriteBuffer.new();
      buffer.putUint8(0);
      this.messageCodec.writeValue(buffer, result);
      return buffer.done();
    }
    encodeErrorEnvelope(opts) {
      let code = opts && 'code' in opts ? opts.code : null;
      let message = opts && 'message' in opts ? opts.message : null;
      let details = opts && 'details' in opts ? opts.details : null;
      let buffer = new src__foundation__serialization.WriteBuffer.new();
      buffer.putUint8(1);
      this.messageCodec.writeValue(buffer, code);
      this.messageCodec.writeValue(buffer, message);
      this.messageCodec.writeValue(buffer, details);
      return buffer.done();
    }
    decodeEnvelope(envelope) {
      if (envelope[$lengthInBytes] === 0) dart.throw(const$14 || (const$14 = dart.const(new core.FormatException.new("Expected envelope, got nothing"))));
      let buffer = new src__foundation__serialization.ReadBuffer.new(envelope);
      if (buffer.getUint8() === 0) return this.messageCodec.readValue(buffer);
      let errorCode = this.messageCodec.readValue(buffer);
      let errorMessage = this.messageCodec.readValue(buffer);
      let errorDetails = this.messageCodec.readValue(buffer);
      if (typeof errorCode == 'string' && (errorMessage == null || typeof errorMessage == 'string') && !dart.test(buffer.hasRemaining))
        dart.throw(new src__services__message_codec.PlatformException.new({code: errorCode, message: core.String._check(errorMessage), details: errorDetails}));
      else
        dart.throw(const$15 || (const$15 = dart.const(new core.FormatException.new("Invalid envelope"))));
    }
  };
  (src__services__message_codecs.StandardMethodCodec.new = function(messageCodec) {
    if (messageCodec === void 0) messageCodec = const$12 || (const$12 = dart.const(new src__services__message_codecs.StandardMessageCodec.new()));
    this[messageCodec$] = messageCodec;
    ;
  }).prototype = src__services__message_codecs.StandardMethodCodec.prototype;
  dart.addTypeTests(src__services__message_codecs.StandardMethodCodec);
  const messageCodec$ = Symbol("StandardMethodCodec.messageCodec");
  src__services__message_codecs.StandardMethodCodec[dart.implements] = () => [src__services__message_codec.MethodCodec];
  dart.setMethodSignature(src__services__message_codecs.StandardMethodCodec, () => ({
    __proto__: dart.getMethods(src__services__message_codecs.StandardMethodCodec.__proto__),
    encodeMethodCall: dart.fnType(typed_data.ByteData, [src__services__message_codec.MethodCall]),
    decodeMethodCall: dart.fnType(src__services__message_codec.MethodCall, [typed_data.ByteData]),
    encodeSuccessEnvelope: dart.fnType(typed_data.ByteData, [dart.dynamic]),
    encodeErrorEnvelope: dart.fnType(typed_data.ByteData, [], {code: core.String, details: dart.dynamic, message: core.String}),
    decodeEnvelope: dart.fnType(dart.dynamic, [typed_data.ByteData])
  }));
  dart.setLibraryUri(src__services__message_codecs.StandardMethodCodec, "package:flutter_web/src/services/message_codecs.dart");
  dart.setFieldSignature(src__services__message_codecs.StandardMethodCodec, () => ({
    __proto__: dart.getFields(src__services__message_codecs.StandardMethodCodec.__proto__),
    messageCodec: dart.finalFieldType(src__services__message_codecs.StandardMessageCodec)
  }));
  const _is_MessageCodec_default = Symbol('_is_MessageCodec_default');
  src__services__message_codec.MessageCodec$ = dart.generic(T => {
    class MessageCodec extends core.Object {}
    (MessageCodec.new = function() {
      ;
    }).prototype = MessageCodec.prototype;
    dart.addTypeTests(MessageCodec);
    MessageCodec.prototype[_is_MessageCodec_default] = true;
    dart.setLibraryUri(MessageCodec, "package:flutter_web/src/services/message_codec.dart");
    return MessageCodec;
  });
  src__services__message_codec.MessageCodec = src__services__message_codec.MessageCodec$();
  dart.addTypeTests(src__services__message_codec.MessageCodec, _is_MessageCodec_default);
  src__services__message_codec.MethodCall = class MethodCall extends core.Object {
    get method() {
      return this[method$];
    }
    set method(value) {
      super.method = value;
    }
    get arguments() {
      return this[arguments$];
    }
    set arguments(value) {
      super.arguments = value;
    }
    toString() {
      return dart.str(this[$runtimeType]) + "(" + dart.str(this.method) + ", " + dart.str(this.arguments) + ")";
    }
  };
  (src__services__message_codec.MethodCall.new = function(method, arguments$0) {
    if (arguments$0 === void 0) arguments$0 = null;
    this[method$] = method;
    this[arguments$] = arguments$0;
    if (!(method != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/message_codec.dart", 39, 60, "method != null");
    ;
  }).prototype = src__services__message_codec.MethodCall.prototype;
  dart.addTypeTests(src__services__message_codec.MethodCall);
  const method$ = Symbol("MethodCall.method");
  const arguments$ = Symbol("MethodCall.arguments");
  dart.setLibraryUri(src__services__message_codec.MethodCall, "package:flutter_web/src/services/message_codec.dart");
  dart.setFieldSignature(src__services__message_codec.MethodCall, () => ({
    __proto__: dart.getFields(src__services__message_codec.MethodCall.__proto__),
    method: dart.finalFieldType(core.String),
    arguments: dart.finalFieldType(dart.dynamic)
  }));
  dart.defineExtensionMethods(src__services__message_codec.MethodCall, ['toString']);
  src__services__message_codec.MethodCodec = class MethodCodec extends core.Object {};
  (src__services__message_codec.MethodCodec.new = function() {
    ;
  }).prototype = src__services__message_codec.MethodCodec.prototype;
  dart.addTypeTests(src__services__message_codec.MethodCodec);
  dart.setLibraryUri(src__services__message_codec.MethodCodec, "package:flutter_web/src/services/message_codec.dart");
  src__services__message_codec.PlatformException = class PlatformException extends core.Object {
    get code() {
      return this[code$];
    }
    set code(value) {
      super.code = value;
    }
    get message() {
      return this[message$];
    }
    set message(value) {
      super.message = value;
    }
    get details() {
      return this[details$];
    }
    set details(value) {
      super.details = value;
    }
    toString() {
      return "PlatformException(" + dart.str(this.code) + ", " + dart.str(this.message) + ", " + dart.str(this.details) + ")";
    }
  };
  (src__services__message_codec.PlatformException.new = function(opts) {
    let code = opts && 'code' in opts ? opts.code : null;
    let message = opts && 'message' in opts ? opts.message : null;
    let details = opts && 'details' in opts ? opts.details : null;
    this[code$] = code;
    this[message$] = message;
    this[details$] = details;
    if (!(code != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/message_codec.dart", 108, 15, "code != null");
    ;
  }).prototype = src__services__message_codec.PlatformException.prototype;
  dart.addTypeTests(src__services__message_codec.PlatformException);
  const code$ = Symbol("PlatformException.code");
  const message$ = Symbol("PlatformException.message");
  const details$ = Symbol("PlatformException.details");
  src__services__message_codec.PlatformException[dart.implements] = () => [core.Exception];
  dart.setLibraryUri(src__services__message_codec.PlatformException, "package:flutter_web/src/services/message_codec.dart");
  dart.setFieldSignature(src__services__message_codec.PlatformException, () => ({
    __proto__: dart.getFields(src__services__message_codec.PlatformException.__proto__),
    code: dart.finalFieldType(core.String),
    message: dart.finalFieldType(core.String),
    details: dart.finalFieldType(dart.dynamic)
  }));
  dart.defineExtensionMethods(src__services__message_codec.PlatformException, ['toString']);
  src__services__message_codec.MissingPluginException = class MissingPluginException extends core.Object {
    get message() {
      return this[message$0];
    }
    set message(value) {
      super.message = value;
    }
    toString() {
      return "MissingPluginException(" + dart.str(this.message) + ")";
    }
  };
  (src__services__message_codec.MissingPluginException.new = function(message) {
    if (message === void 0) message = null;
    this[message$0] = message;
    ;
  }).prototype = src__services__message_codec.MissingPluginException.prototype;
  dart.addTypeTests(src__services__message_codec.MissingPluginException);
  const message$0 = Symbol("MissingPluginException.message");
  src__services__message_codec.MissingPluginException[dart.implements] = () => [core.Exception];
  dart.setLibraryUri(src__services__message_codec.MissingPluginException, "package:flutter_web/src/services/message_codec.dart");
  dart.setFieldSignature(src__services__message_codec.MissingPluginException, () => ({
    __proto__: dart.getFields(src__services__message_codec.MissingPluginException.__proto__),
    message: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(src__services__message_codec.MissingPluginException, ['toString']);
  const _is_Animation_default = Symbol('_is_Animation_default');
  src__animation__animation.Animation$ = dart.generic(T => {
    class Animation extends src__foundation__change_notifier.Listenable {
      get isDismissed() {
        return dart.equals(this.status, src__animation__animation.AnimationStatus.dismissed);
      }
      get isCompleted() {
        return dart.equals(this.status, src__animation__animation.AnimationStatus.completed);
      }
      drive(U, child) {
        if (!AnimationOfdouble().is(this)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/animation.dart", 162, 12, "this is Animation<double>");
        return child.animate(AnimationOfdouble()._check(this));
      }
      toString() {
        return dart.str(src__foundation__diagnostics.describeIdentity(this)) + "(" + dart.str(this.toStringDetails()) + ")";
      }
      toStringDetails() {
        if (!(this.status != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/animation.dart", 186, 12, "status != null");
        let icon = null;
        switch (this.status) {
          case src__animation__animation.AnimationStatus.forward:
          {
            icon = "▶";
            break;
          }
          case src__animation__animation.AnimationStatus.reverse:
          {
            icon = "◀";
            break;
          }
          case src__animation__animation.AnimationStatus.completed:
          {
            icon = "⏭";
            break;
          }
          case src__animation__animation.AnimationStatus.dismissed:
          {
            icon = "⏮";
            break;
          }
        }
        if (!(icon != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/animation.dart", 202, 12, "icon != null");
        return dart.str(icon);
      }
    }
    (Animation.new = function() {
      Animation.__proto__.new.call(this);
      ;
    }).prototype = Animation.prototype;
    dart.addTypeTests(Animation);
    Animation.prototype[_is_Animation_default] = true;
    Animation[dart.implements] = () => [src__foundation__change_notifier.ValueListenable$(T)];
    dart.setMethodSignature(Animation, () => ({
      __proto__: dart.getMethods(Animation.__proto__),
      drive: dart.gFnType(U => [src__animation__animation.Animation$(U), [src__animation__tween.Animatable$(U)]]),
      toStringDetails: dart.fnType(core.String, [])
    }));
    dart.setGetterSignature(Animation, () => ({
      __proto__: dart.getGetters(Animation.__proto__),
      isDismissed: core.bool,
      isCompleted: core.bool
    }));
    dart.setLibraryUri(Animation, "package:flutter_web/src/animation/animation.dart");
    dart.defineExtensionMethods(Animation, ['toString']);
    return Animation;
  });
  src__animation__animation.Animation = src__animation__animation.Animation$();
  dart.addTypeTests(src__animation__animation.Animation, _is_Animation_default);
  src__animation__animations._AlwaysCompleteAnimation = class _AlwaysCompleteAnimation extends src__animation__animation.Animation$(core.double) {
    addListener(listener) {
    }
    removeListener(listener) {
    }
    addStatusListener(listener) {
    }
    removeStatusListener(listener) {
    }
    get status() {
      return src__animation__animation.AnimationStatus.completed;
    }
    get value() {
      return 1.0;
    }
    toString() {
      return "kAlwaysCompleteAnimation";
    }
  };
  (src__animation__animations._AlwaysCompleteAnimation.new = function() {
    src__animation__animations._AlwaysCompleteAnimation.__proto__.new.call(this);
    ;
  }).prototype = src__animation__animations._AlwaysCompleteAnimation.prototype;
  dart.addTypeTests(src__animation__animations._AlwaysCompleteAnimation);
  dart.setMethodSignature(src__animation__animations._AlwaysCompleteAnimation, () => ({
    __proto__: dart.getMethods(src__animation__animations._AlwaysCompleteAnimation.__proto__),
    addListener: dart.fnType(dart.void, [dart.fnType(dart.void, [])]),
    removeListener: dart.fnType(dart.void, [dart.fnType(dart.void, [])]),
    addStatusListener: dart.fnType(dart.void, [dart.fnType(dart.void, [src__animation__animation.AnimationStatus])]),
    removeStatusListener: dart.fnType(dart.void, [dart.fnType(dart.void, [src__animation__animation.AnimationStatus])])
  }));
  dart.setGetterSignature(src__animation__animations._AlwaysCompleteAnimation, () => ({
    __proto__: dart.getGetters(src__animation__animations._AlwaysCompleteAnimation.__proto__),
    status: src__animation__animation.AnimationStatus,
    value: core.double
  }));
  dart.setLibraryUri(src__animation__animations._AlwaysCompleteAnimation, "package:flutter_web/src/animation/animations.dart");
  dart.defineExtensionMethods(src__animation__animations._AlwaysCompleteAnimation, ['toString']);
  src__animation__animations._AlwaysDismissedAnimation = class _AlwaysDismissedAnimation extends src__animation__animation.Animation$(core.double) {
    addListener(listener) {
    }
    removeListener(listener) {
    }
    addStatusListener(listener) {
    }
    removeStatusListener(listener) {
    }
    get status() {
      return src__animation__animation.AnimationStatus.dismissed;
    }
    get value() {
      return 0.0;
    }
    toString() {
      return "kAlwaysDismissedAnimation";
    }
  };
  (src__animation__animations._AlwaysDismissedAnimation.new = function() {
    src__animation__animations._AlwaysDismissedAnimation.__proto__.new.call(this);
    ;
  }).prototype = src__animation__animations._AlwaysDismissedAnimation.prototype;
  dart.addTypeTests(src__animation__animations._AlwaysDismissedAnimation);
  dart.setMethodSignature(src__animation__animations._AlwaysDismissedAnimation, () => ({
    __proto__: dart.getMethods(src__animation__animations._AlwaysDismissedAnimation.__proto__),
    addListener: dart.fnType(dart.void, [dart.fnType(dart.void, [])]),
    removeListener: dart.fnType(dart.void, [dart.fnType(dart.void, [])]),
    addStatusListener: dart.fnType(dart.void, [dart.fnType(dart.void, [src__animation__animation.AnimationStatus])]),
    removeStatusListener: dart.fnType(dart.void, [dart.fnType(dart.void, [src__animation__animation.AnimationStatus])])
  }));
  dart.setGetterSignature(src__animation__animations._AlwaysDismissedAnimation, () => ({
    __proto__: dart.getGetters(src__animation__animations._AlwaysDismissedAnimation.__proto__),
    status: src__animation__animation.AnimationStatus,
    value: core.double
  }));
  dart.setLibraryUri(src__animation__animations._AlwaysDismissedAnimation, "package:flutter_web/src/animation/animations.dart");
  dart.defineExtensionMethods(src__animation__animations._AlwaysDismissedAnimation, ['toString']);
  const _is_AlwaysStoppedAnimation_default = Symbol('_is_AlwaysStoppedAnimation_default');
  src__animation__animations.AlwaysStoppedAnimation$ = dart.generic(T => {
    class AlwaysStoppedAnimation extends src__animation__animation.Animation$(T) {
      get value() {
        return this[value$];
      }
      set value(value) {
        super.value = value;
      }
      addListener(listener) {
      }
      removeListener(listener) {
      }
      addStatusListener(listener) {
      }
      removeStatusListener(listener) {
      }
      get status() {
        return src__animation__animation.AnimationStatus.forward;
      }
      toStringDetails() {
        return dart.str(super.toStringDetails()) + " " + dart.str(this.value) + "; paused";
      }
    }
    (AlwaysStoppedAnimation.new = function(value) {
      this[value$] = value;
      AlwaysStoppedAnimation.__proto__.new.call(this);
      ;
    }).prototype = AlwaysStoppedAnimation.prototype;
    dart.addTypeTests(AlwaysStoppedAnimation);
    AlwaysStoppedAnimation.prototype[_is_AlwaysStoppedAnimation_default] = true;
    const value$ = Symbol("AlwaysStoppedAnimation.value");
    dart.setMethodSignature(AlwaysStoppedAnimation, () => ({
      __proto__: dart.getMethods(AlwaysStoppedAnimation.__proto__),
      addListener: dart.fnType(dart.void, [dart.fnType(dart.void, [])]),
      removeListener: dart.fnType(dart.void, [dart.fnType(dart.void, [])]),
      addStatusListener: dart.fnType(dart.void, [dart.fnType(dart.void, [src__animation__animation.AnimationStatus])]),
      removeStatusListener: dart.fnType(dart.void, [dart.fnType(dart.void, [src__animation__animation.AnimationStatus])])
    }));
    dart.setGetterSignature(AlwaysStoppedAnimation, () => ({
      __proto__: dart.getGetters(AlwaysStoppedAnimation.__proto__),
      status: src__animation__animation.AnimationStatus
    }));
    dart.setLibraryUri(AlwaysStoppedAnimation, "package:flutter_web/src/animation/animations.dart");
    dart.setFieldSignature(AlwaysStoppedAnimation, () => ({
      __proto__: dart.getFields(AlwaysStoppedAnimation.__proto__),
      value: dart.finalFieldType(T)
    }));
    return AlwaysStoppedAnimation;
  });
  src__animation__animations.AlwaysStoppedAnimation = src__animation__animations.AlwaysStoppedAnimation$();
  dart.addTypeTests(src__animation__animations.AlwaysStoppedAnimation, _is_AlwaysStoppedAnimation_default);
  const _is_AnimationWithParentMixin_default = Symbol('_is_AnimationWithParentMixin_default');
  src__animation__animations.AnimationWithParentMixin$ = dart.generic(T => {
    class AnimationWithParentMixin extends core.Object {}
    AnimationWithParentMixin[dart.mixinOn] = Object => class AnimationWithParentMixin extends Object {
      addListener(listener) {
        return this.parent.addListener(listener);
      }
      removeListener(listener) {
        return this.parent.removeListener(listener);
      }
      addStatusListener(listener) {
        return this.parent.addStatusListener(listener);
      }
      removeStatusListener(listener) {
        return this.parent.removeStatusListener(listener);
      }
      get status() {
        return this.parent.status;
      }
    };
    (AnimationWithParentMixin[dart.mixinNew] = function() {
    }).prototype = AnimationWithParentMixin.prototype;
    dart.addTypeTests(AnimationWithParentMixin);
    AnimationWithParentMixin.prototype[_is_AnimationWithParentMixin_default] = true;
    AnimationWithParentMixin[dart.implements] = () => [core.Object];
    dart.setMethodSignature(AnimationWithParentMixin, () => ({
      __proto__: dart.getMethods(AnimationWithParentMixin.__proto__),
      addListener: dart.fnType(dart.void, [dart.fnType(dart.void, [])]),
      removeListener: dart.fnType(dart.void, [dart.fnType(dart.void, [])]),
      addStatusListener: dart.fnType(dart.void, [dart.fnType(dart.void, [src__animation__animation.AnimationStatus])]),
      removeStatusListener: dart.fnType(dart.void, [dart.fnType(dart.void, [src__animation__animation.AnimationStatus])])
    }));
    dart.setGetterSignature(AnimationWithParentMixin, () => ({
      __proto__: dart.getGetters(AnimationWithParentMixin.__proto__),
      status: src__animation__animation.AnimationStatus
    }));
    dart.setLibraryUri(AnimationWithParentMixin, "package:flutter_web/src/animation/animations.dart");
    return AnimationWithParentMixin;
  });
  src__animation__animations.AnimationWithParentMixin = src__animation__animations.AnimationWithParentMixin$();
  dart.addTypeTests(src__animation__animations.AnimationWithParentMixin, _is_AnimationWithParentMixin_default);
  const _status = dart.privateName(src__animation__animations, "_status");
  const _value = dart.privateName(src__animation__animations, "_value");
  const _parent = dart.privateName(src__animation__animations, "_parent");
  const _listenerCounter = dart.privateName(src__animation__listener_helpers, "_listenerCounter");
  src__animation__listener_helpers.AnimationLazyListenerMixin = class AnimationLazyListenerMixin extends core.Object {};
  src__animation__listener_helpers.AnimationLazyListenerMixin[dart.mixinOn] = Object => class AnimationLazyListenerMixin extends Object {
    didRegisterListener() {
      if (!(dart.notNull(this[_listenerCounter]) >= 0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/listener_helpers.dart", 29, 12, "_listenerCounter >= 0");
      if (this[_listenerCounter] === 0) this.didStartListening();
      this[_listenerCounter] = dart.notNull(this[_listenerCounter]) + 1;
    }
    didUnregisterListener() {
      if (!(dart.notNull(this[_listenerCounter]) >= 1)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/listener_helpers.dart", 42, 12, "_listenerCounter >= 1");
      this[_listenerCounter] = dart.notNull(this[_listenerCounter]) - 1;
      if (this[_listenerCounter] === 0) this.didStopListening();
    }
    get isListening() {
      return dart.notNull(this[_listenerCounter]) > 0;
    }
  };
  (src__animation__listener_helpers.AnimationLazyListenerMixin[dart.mixinNew] = function() {
    this[_listenerCounter] = 0;
  }).prototype = src__animation__listener_helpers.AnimationLazyListenerMixin.prototype;
  dart.addTypeTests(src__animation__listener_helpers.AnimationLazyListenerMixin);
  src__animation__listener_helpers.AnimationLazyListenerMixin[dart.implements] = () => [core.Object];
  dart.setMethodSignature(src__animation__listener_helpers.AnimationLazyListenerMixin, () => ({
    __proto__: dart.getMethods(src__animation__listener_helpers.AnimationLazyListenerMixin.__proto__),
    didRegisterListener: dart.fnType(dart.void, []),
    didUnregisterListener: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(src__animation__listener_helpers.AnimationLazyListenerMixin, () => ({
    __proto__: dart.getGetters(src__animation__listener_helpers.AnimationLazyListenerMixin.__proto__),
    isListening: core.bool
  }));
  dart.setLibraryUri(src__animation__listener_helpers.AnimationLazyListenerMixin, "package:flutter_web/src/animation/listener_helpers.dart");
  dart.setFieldSignature(src__animation__listener_helpers.AnimationLazyListenerMixin, () => ({
    __proto__: dart.getFields(src__animation__listener_helpers.AnimationLazyListenerMixin.__proto__),
    [_listenerCounter]: dart.fieldType(core.int)
  }));
  const _listeners = dart.privateName(src__animation__listener_helpers, "_listeners");
  src__animation__listener_helpers.AnimationLocalListenersMixin = class AnimationLocalListenersMixin extends core.Object {};
  src__animation__listener_helpers.AnimationLocalListenersMixin[dart.mixinOn] = Object => class AnimationLocalListenersMixin extends Object {
    addListener(listener) {
      this.didRegisterListener();
      this[_listeners].add(listener);
    }
    removeListener(listener) {
      let removed = this[_listeners].remove(listener);
      if (dart.test(removed)) {
        this.didUnregisterListener();
      }
    }
    notifyListeners() {
      let localListeners = ListOfVoidTovoid().from(this[_listeners]);
      for (let listener of localListeners) {
        try {
          if (dart.test(this[_listeners].contains(listener))) listener();
        } catch (e) {
          let exception = dart.getThrown(e);
          let stack = dart.stackTrace(e);
          src__foundation__assertions.FlutterError.reportError(new src__foundation__assertions.FlutterErrorDetails.new({exception: exception, stack: stack, library: "animation library", context: new src__foundation__assertions.ErrorDescription.new("while notifying listeners for " + dart.str(this[$runtimeType])), informationCollector: dart.fn(() => new (SyncIterableOfDiagnosticsPropertyOfAnimationLocalListenersMixin()).new((function*() {
              yield new (DiagnosticsPropertyOfAnimationLocalListenersMixin()).new("The " + dart.str(this[$runtimeType]) + " notifying listeners was", this, {style: src__foundation__diagnostics.DiagnosticsTreeStyle.errorProperty});
            }).bind(this)), VoidToIterableOfDiagnosticsPropertyOfAnimationLocalListenersMixin())}));
        }
      }
    }
  };
  (src__animation__listener_helpers.AnimationLocalListenersMixin[dart.mixinNew] = function() {
    this[_listeners] = new (ObserverListOfVoidTovoid()).new();
  }).prototype = src__animation__listener_helpers.AnimationLocalListenersMixin.prototype;
  dart.addTypeTests(src__animation__listener_helpers.AnimationLocalListenersMixin);
  src__animation__listener_helpers.AnimationLocalListenersMixin[dart.implements] = () => [core.Object];
  dart.setMethodSignature(src__animation__listener_helpers.AnimationLocalListenersMixin, () => ({
    __proto__: dart.getMethods(src__animation__listener_helpers.AnimationLocalListenersMixin.__proto__),
    addListener: dart.fnType(dart.void, [dart.fnType(dart.void, [])]),
    removeListener: dart.fnType(dart.void, [dart.fnType(dart.void, [])]),
    notifyListeners: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(src__animation__listener_helpers.AnimationLocalListenersMixin, "package:flutter_web/src/animation/listener_helpers.dart");
  dart.setFieldSignature(src__animation__listener_helpers.AnimationLocalListenersMixin, () => ({
    __proto__: dart.getFields(src__animation__listener_helpers.AnimationLocalListenersMixin.__proto__),
    [_listeners]: dart.finalFieldType(src__foundation__observer_list.ObserverList$(dart.fnType(dart.void, [])))
  }));
  const _statusListeners = dart.privateName(src__animation__listener_helpers, "_statusListeners");
  src__animation__listener_helpers.AnimationLocalStatusListenersMixin = class AnimationLocalStatusListenersMixin extends core.Object {};
  src__animation__listener_helpers.AnimationLocalStatusListenersMixin[dart.mixinOn] = Object => class AnimationLocalStatusListenersMixin extends Object {
    addStatusListener(listener) {
      this.didRegisterListener();
      this[_statusListeners].add(listener);
    }
    removeStatusListener(listener) {
      let removed = this[_statusListeners].remove(listener);
      if (dart.test(removed)) {
        this.didUnregisterListener();
      }
    }
    notifyStatusListeners(status) {
      let localListeners = ListOfAnimationStatusTovoid().from(this[_statusListeners]);
      for (let listener of localListeners) {
        try {
          if (dart.test(this[_statusListeners].contains(listener))) listener(status);
        } catch (e) {
          let exception = dart.getThrown(e);
          let stack = dart.stackTrace(e);
          src__foundation__assertions.FlutterError.reportError(new src__foundation__assertions.FlutterErrorDetails.new({exception: exception, stack: stack, library: "animation library", context: new src__foundation__assertions.ErrorDescription.new("while notifying status listeners for " + dart.str(this[$runtimeType])), informationCollector: dart.fn(() => new (SyncIterableOfDiagnosticsPropertyOfAnimationLocalStatusListenersMixin()).new((function*() {
              yield new (DiagnosticsPropertyOfAnimationLocalStatusListenersMixin()).new("The " + dart.str(this[$runtimeType]) + " notifying status listeners was", this, {style: src__foundation__diagnostics.DiagnosticsTreeStyle.errorProperty});
            }).bind(this)), VoidToIterableOfDiagnosticsPropertyOfAnimationLocalStatusListenersMixin())}));
        }
      }
    }
  };
  (src__animation__listener_helpers.AnimationLocalStatusListenersMixin[dart.mixinNew] = function() {
    this[_statusListeners] = new (ObserverListOfAnimationStatusTovoid()).new();
  }).prototype = src__animation__listener_helpers.AnimationLocalStatusListenersMixin.prototype;
  dart.addTypeTests(src__animation__listener_helpers.AnimationLocalStatusListenersMixin);
  src__animation__listener_helpers.AnimationLocalStatusListenersMixin[dart.implements] = () => [core.Object];
  dart.setMethodSignature(src__animation__listener_helpers.AnimationLocalStatusListenersMixin, () => ({
    __proto__: dart.getMethods(src__animation__listener_helpers.AnimationLocalStatusListenersMixin.__proto__),
    addStatusListener: dart.fnType(dart.void, [dart.fnType(dart.void, [src__animation__animation.AnimationStatus])]),
    removeStatusListener: dart.fnType(dart.void, [dart.fnType(dart.void, [src__animation__animation.AnimationStatus])]),
    notifyStatusListeners: dart.fnType(dart.void, [src__animation__animation.AnimationStatus])
  }));
  dart.setLibraryUri(src__animation__listener_helpers.AnimationLocalStatusListenersMixin, "package:flutter_web/src/animation/listener_helpers.dart");
  dart.setFieldSignature(src__animation__listener_helpers.AnimationLocalStatusListenersMixin, () => ({
    __proto__: dart.getFields(src__animation__listener_helpers.AnimationLocalStatusListenersMixin.__proto__),
    [_statusListeners]: dart.finalFieldType(src__foundation__observer_list.ObserverList$(dart.fnType(dart.void, [src__animation__animation.AnimationStatus])))
  }));
  const Animation_AnimationLazyListenerMixin$ = class Animation_AnimationLazyListenerMixin extends src__animation__animation.Animation$(core.double) {};
  (Animation_AnimationLazyListenerMixin$.new = function() {
    src__animation__listener_helpers.AnimationLazyListenerMixin[dart.mixinNew].call(this);
    Animation_AnimationLazyListenerMixin$.__proto__.new.call(this);
  }).prototype = Animation_AnimationLazyListenerMixin$.prototype;
  dart.applyMixin(Animation_AnimationLazyListenerMixin$, src__animation__listener_helpers.AnimationLazyListenerMixin);
  const Animation_AnimationLocalListenersMixin$ = class Animation_AnimationLocalListenersMixin extends Animation_AnimationLazyListenerMixin$ {};
  (Animation_AnimationLocalListenersMixin$.new = function() {
    src__animation__listener_helpers.AnimationLocalListenersMixin[dart.mixinNew].call(this);
    Animation_AnimationLocalListenersMixin$.__proto__.new.call(this);
  }).prototype = Animation_AnimationLocalListenersMixin$.prototype;
  dart.applyMixin(Animation_AnimationLocalListenersMixin$, src__animation__listener_helpers.AnimationLocalListenersMixin);
  const Animation_AnimationLocalStatusListenersMixin$ = class Animation_AnimationLocalStatusListenersMixin extends Animation_AnimationLocalListenersMixin$ {};
  (Animation_AnimationLocalStatusListenersMixin$.new = function() {
    src__animation__listener_helpers.AnimationLocalStatusListenersMixin[dart.mixinNew].call(this);
    Animation_AnimationLocalStatusListenersMixin$.__proto__.new.call(this);
  }).prototype = Animation_AnimationLocalStatusListenersMixin$.prototype;
  dart.applyMixin(Animation_AnimationLocalStatusListenersMixin$, src__animation__listener_helpers.AnimationLocalStatusListenersMixin);
  src__animation__animations.ProxyAnimation = class ProxyAnimation extends Animation_AnimationLocalStatusListenersMixin$ {
    get parent() {
      return this[_parent];
    }
    set parent(value) {
      if (dart.equals(value, this[_parent])) return;
      if (this[_parent] != null) {
        this[_status] = this[_parent].status;
        this[_value] = this[_parent].value;
        if (dart.test(this.isListening)) this.didStopListening();
      }
      this[_parent] = value;
      if (this[_parent] != null) {
        if (dart.test(this.isListening)) this.didStartListening();
        if (this[_value] != this[_parent].value) this.notifyListeners();
        if (!dart.equals(this[_status], this[_parent].status)) this.notifyStatusListeners(this[_parent].status);
        this[_status] = null;
        this[_value] = null;
      }
    }
    didStartListening() {
      if (this[_parent] != null) {
        this[_parent].addListener(dart.bind(this, 'notifyListeners'));
        this[_parent].addStatusListener(dart.bind(this, 'notifyStatusListeners'));
      }
    }
    didStopListening() {
      if (this[_parent] != null) {
        this[_parent].removeListener(dart.bind(this, 'notifyListeners'));
        this[_parent].removeStatusListener(dart.bind(this, 'notifyStatusListeners'));
      }
    }
    get status() {
      return this[_parent] != null ? this[_parent].status : this[_status];
    }
    get value() {
      return this[_parent] != null ? this[_parent].value : this[_value];
    }
    toString() {
      if (this.parent == null) return dart.str(this[$runtimeType]) + "(null; " + dart.str(super.toStringDetails()) + " " + this.value[$toStringAsFixed](3) + ")";
      return dart.str(this.parent) + "➩" + dart.str(this[$runtimeType]);
    }
  };
  (src__animation__animations.ProxyAnimation.new = function(animation) {
    if (animation === void 0) animation = null;
    this[_status] = null;
    this[_value] = null;
    this[_parent] = null;
    src__animation__animations.ProxyAnimation.__proto__.new.call(this);
    this[_parent] = animation;
    if (this[_parent] == null) {
      this[_status] = src__animation__animation.AnimationStatus.dismissed;
      this[_value] = 0.0;
    }
  }).prototype = src__animation__animations.ProxyAnimation.prototype;
  dart.addTypeTests(src__animation__animations.ProxyAnimation);
  dart.setMethodSignature(src__animation__animations.ProxyAnimation, () => ({
    __proto__: dart.getMethods(src__animation__animations.ProxyAnimation.__proto__),
    didStartListening: dart.fnType(dart.void, []),
    didStopListening: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(src__animation__animations.ProxyAnimation, () => ({
    __proto__: dart.getGetters(src__animation__animations.ProxyAnimation.__proto__),
    parent: src__animation__animation.Animation$(core.double),
    status: src__animation__animation.AnimationStatus,
    value: core.double
  }));
  dart.setSetterSignature(src__animation__animations.ProxyAnimation, () => ({
    __proto__: dart.getSetters(src__animation__animations.ProxyAnimation.__proto__),
    parent: src__animation__animation.Animation$(core.double)
  }));
  dart.setLibraryUri(src__animation__animations.ProxyAnimation, "package:flutter_web/src/animation/animations.dart");
  dart.setFieldSignature(src__animation__animations.ProxyAnimation, () => ({
    __proto__: dart.getFields(src__animation__animations.ProxyAnimation.__proto__),
    [_status]: dart.fieldType(src__animation__animation.AnimationStatus),
    [_value]: dart.fieldType(core.double),
    [_parent]: dart.fieldType(src__animation__animation.Animation$(core.double))
  }));
  dart.defineExtensionMethods(src__animation__animations.ProxyAnimation, ['toString']);
  const _statusChangeHandler = dart.privateName(src__animation__animations, "_statusChangeHandler");
  const _reverseStatus = dart.privateName(src__animation__animations, "_reverseStatus");
  const Animation_AnimationLazyListenerMixin$$ = class Animation_AnimationLazyListenerMixin extends src__animation__animation.Animation$(core.double) {};
  (Animation_AnimationLazyListenerMixin$$.new = function() {
    src__animation__listener_helpers.AnimationLazyListenerMixin[dart.mixinNew].call(this);
    Animation_AnimationLazyListenerMixin$$.__proto__.new.call(this);
  }).prototype = Animation_AnimationLazyListenerMixin$$.prototype;
  dart.applyMixin(Animation_AnimationLazyListenerMixin$$, src__animation__listener_helpers.AnimationLazyListenerMixin);
  const Animation_AnimationLocalStatusListenersMixin$$ = class Animation_AnimationLocalStatusListenersMixin extends Animation_AnimationLazyListenerMixin$$ {};
  (Animation_AnimationLocalStatusListenersMixin$$.new = function() {
    src__animation__listener_helpers.AnimationLocalStatusListenersMixin[dart.mixinNew].call(this);
    Animation_AnimationLocalStatusListenersMixin$$.__proto__.new.call(this);
  }).prototype = Animation_AnimationLocalStatusListenersMixin$$.prototype;
  dart.applyMixin(Animation_AnimationLocalStatusListenersMixin$$, src__animation__listener_helpers.AnimationLocalStatusListenersMixin);
  src__animation__animations.ReverseAnimation = class ReverseAnimation extends Animation_AnimationLocalStatusListenersMixin$$ {
    get parent() {
      return this[parent$];
    }
    set parent(value) {
      super.parent = value;
    }
    addListener(listener) {
      this.didRegisterListener();
      this.parent.addListener(listener);
    }
    removeListener(listener) {
      this.parent.removeListener(listener);
      this.didUnregisterListener();
    }
    didStartListening() {
      this.parent.addStatusListener(dart.bind(this, _statusChangeHandler));
    }
    didStopListening() {
      this.parent.removeStatusListener(dart.bind(this, _statusChangeHandler));
    }
    [_statusChangeHandler](status) {
      this.notifyStatusListeners(this[_reverseStatus](status));
    }
    get status() {
      return this[_reverseStatus](this.parent.status);
    }
    get value() {
      return 1.0 - dart.notNull(this.parent.value);
    }
    [_reverseStatus](status) {
      if (!(status != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/animations.dart", 304, 12, "status != null");
      switch (status) {
        case src__animation__animation.AnimationStatus.forward:
        {
          return src__animation__animation.AnimationStatus.reverse;
        }
        case src__animation__animation.AnimationStatus.reverse:
        {
          return src__animation__animation.AnimationStatus.forward;
        }
        case src__animation__animation.AnimationStatus.completed:
        {
          return src__animation__animation.AnimationStatus.dismissed;
        }
        case src__animation__animation.AnimationStatus.dismissed:
        {
          return src__animation__animation.AnimationStatus.completed;
        }
      }
      return null;
    }
    toString() {
      return dart.str(this.parent) + "➪" + dart.str(this[$runtimeType]);
    }
  };
  (src__animation__animations.ReverseAnimation.new = function(parent) {
    this[parent$] = parent;
    if (!(parent != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/animations.dart", 266, 14, "parent != null");
    src__animation__animations.ReverseAnimation.__proto__.new.call(this);
    ;
  }).prototype = src__animation__animations.ReverseAnimation.prototype;
  dart.addTypeTests(src__animation__animations.ReverseAnimation);
  const parent$ = Symbol("ReverseAnimation.parent");
  dart.setMethodSignature(src__animation__animations.ReverseAnimation, () => ({
    __proto__: dart.getMethods(src__animation__animations.ReverseAnimation.__proto__),
    addListener: dart.fnType(dart.void, [dart.fnType(dart.void, [])]),
    removeListener: dart.fnType(dart.void, [dart.fnType(dart.void, [])]),
    didStartListening: dart.fnType(dart.void, []),
    didStopListening: dart.fnType(dart.void, []),
    [_statusChangeHandler]: dart.fnType(dart.void, [src__animation__animation.AnimationStatus]),
    [_reverseStatus]: dart.fnType(src__animation__animation.AnimationStatus, [src__animation__animation.AnimationStatus])
  }));
  dart.setGetterSignature(src__animation__animations.ReverseAnimation, () => ({
    __proto__: dart.getGetters(src__animation__animations.ReverseAnimation.__proto__),
    status: src__animation__animation.AnimationStatus,
    value: core.double
  }));
  dart.setLibraryUri(src__animation__animations.ReverseAnimation, "package:flutter_web/src/animation/animations.dart");
  dart.setFieldSignature(src__animation__animations.ReverseAnimation, () => ({
    __proto__: dart.getFields(src__animation__animations.ReverseAnimation.__proto__),
    parent: dart.finalFieldType(src__animation__animation.Animation$(core.double))
  }));
  dart.defineExtensionMethods(src__animation__animations.ReverseAnimation, ['toString']);
  const _curveDirection = dart.privateName(src__animation__animations, "_curveDirection");
  const _updateCurveDirection = dart.privateName(src__animation__animations, "_updateCurveDirection");
  const _useForwardCurve = dart.privateName(src__animation__animations, "_useForwardCurve");
  const Animation_AnimationWithParentMixin$ = class Animation_AnimationWithParentMixin extends src__animation__animation.Animation$(core.double) {};
  (Animation_AnimationWithParentMixin$.new = function() {
    Animation_AnimationWithParentMixin$.__proto__.new.call(this);
  }).prototype = Animation_AnimationWithParentMixin$.prototype;
  dart.applyMixin(Animation_AnimationWithParentMixin$, src__animation__animations.AnimationWithParentMixin$(core.double));
  src__animation__animations.CurvedAnimation = class CurvedAnimation extends Animation_AnimationWithParentMixin$ {
    get parent() {
      return this[parent$0];
    }
    set parent(value) {
      super.parent = value;
    }
    get curve() {
      return this[curve$];
    }
    set curve(value) {
      this[curve$] = value;
    }
    get reverseCurve() {
      return this[reverseCurve$];
    }
    set reverseCurve(value) {
      this[reverseCurve$] = value;
    }
    [_updateCurveDirection](status) {
      switch (status) {
        case src__animation__animation.AnimationStatus.dismissed:
        case src__animation__animation.AnimationStatus.completed:
        {
          this[_curveDirection] = null;
          break;
        }
        case src__animation__animation.AnimationStatus.forward:
        {
          this[_curveDirection] == null ? this[_curveDirection] = src__animation__animation.AnimationStatus.forward : null;
          break;
        }
        case src__animation__animation.AnimationStatus.reverse:
        {
          this[_curveDirection] == null ? this[_curveDirection] = src__animation__animation.AnimationStatus.reverse : null;
          break;
        }
      }
    }
    get [_useForwardCurve]() {
      let t11;
      return this.reverseCurve == null || !dart.equals((t11 = this[_curveDirection], t11 == null ? this.parent.status : t11), src__animation__animation.AnimationStatus.reverse);
    }
    get value() {
      let activeCurve = dart.test(this[_useForwardCurve]) ? this.curve : this.reverseCurve;
      let t = this.parent.value;
      if (activeCurve == null) return t;
      if (t === 0.0 || t === 1.0) {
        if (!dart.test(dart.fn(() => {
          let transformedValue = activeCurve.transform(t);
          let roundedTransformedValue = transformedValue[$round]()[$toDouble]();
          if (roundedTransformedValue !== t) {
            dart.throw(src__foundation__assertions.FlutterError.new("Invalid curve endpoint at " + dart.str(t) + ".\n" + "Curves must map 0.0 to near zero and 1.0 to near one but " + dart.str(dart.runtimeType(activeCurve)) + " mapped " + dart.str(t) + " to " + dart.str(transformedValue) + ", which " + "is near " + dart.str(roundedTransformedValue) + "."));
          }
          return true;
        }, VoidTobool())())) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/animations.dart", 441, 14, "() {\n        final double transformedValue = activeCurve.transform(t);\n        final double roundedTransformedValue = transformedValue.round().toDouble();\n        if (roundedTransformedValue != t) {\n          throw FlutterError(\n            'Invalid curve endpoint at $t.\\n'\n            'Curves must map 0.0 to near zero and 1.0 to near one but '\n            '${activeCurve.runtimeType} mapped $t to $transformedValue, which '\n            'is near $roundedTransformedValue.'\n          );\n        }\n        return true;\n      }()");
        return t;
      }
      return activeCurve.transform(t);
    }
    toString() {
      if (this.reverseCurve == null) return dart.str(this.parent) + "➩" + dart.str(this.curve);
      if (dart.test(this[_useForwardCurve])) return dart.str(this.parent) + "➩" + dart.str(this.curve) + "ₒₙ/" + dart.str(this.reverseCurve);
      return dart.str(this.parent) + "➩" + dart.str(this.curve) + "/" + dart.str(this.reverseCurve) + "ₒₙ";
    }
  };
  (src__animation__animations.CurvedAnimation.new = function(opts) {
    let parent = opts && 'parent' in opts ? opts.parent : null;
    let curve = opts && 'curve' in opts ? opts.curve : null;
    let reverseCurve = opts && 'reverseCurve' in opts ? opts.reverseCurve : null;
    this[_curveDirection] = null;
    this[parent$0] = parent;
    this[curve$] = curve;
    this[reverseCurve$] = reverseCurve;
    if (!(parent != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/animations.dart", 379, 15, "parent != null");
    if (!(curve != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/animations.dart", 380, 15, "curve != null");
    src__animation__animations.CurvedAnimation.__proto__.new.call(this);
    this[_updateCurveDirection](this.parent.status);
    this.parent.addStatusListener(dart.bind(this, _updateCurveDirection));
  }).prototype = src__animation__animations.CurvedAnimation.prototype;
  dart.addTypeTests(src__animation__animations.CurvedAnimation);
  const parent$0 = Symbol("CurvedAnimation.parent");
  const curve$ = Symbol("CurvedAnimation.curve");
  const reverseCurve$ = Symbol("CurvedAnimation.reverseCurve");
  dart.setMethodSignature(src__animation__animations.CurvedAnimation, () => ({
    __proto__: dart.getMethods(src__animation__animations.CurvedAnimation.__proto__),
    [_updateCurveDirection]: dart.fnType(dart.void, [src__animation__animation.AnimationStatus])
  }));
  dart.setGetterSignature(src__animation__animations.CurvedAnimation, () => ({
    __proto__: dart.getGetters(src__animation__animations.CurvedAnimation.__proto__),
    [_useForwardCurve]: core.bool,
    value: core.double
  }));
  dart.setLibraryUri(src__animation__animations.CurvedAnimation, "package:flutter_web/src/animation/animations.dart");
  dart.setFieldSignature(src__animation__animations.CurvedAnimation, () => ({
    __proto__: dart.getFields(src__animation__animations.CurvedAnimation.__proto__),
    parent: dart.finalFieldType(src__animation__animation.Animation$(core.double)),
    curve: dart.fieldType(src__animation__curves.Curve),
    reverseCurve: dart.fieldType(src__animation__curves.Curve),
    [_curveDirection]: dart.fieldType(src__animation__animation.AnimationStatus)
  }));
  dart.defineExtensionMethods(src__animation__animations.CurvedAnimation, ['toString']);
  const _name$1 = dart.privateName(src__animation__animations, "_name");
  src__animation__animations._TrainHoppingMode = class _TrainHoppingMode extends core.Object {
    toString() {
      return this[_name$1];
    }
  };
  (src__animation__animations._TrainHoppingMode.new = function(index, _name) {
    this.index = index;
    this[_name$1] = _name;
    ;
  }).prototype = src__animation__animations._TrainHoppingMode.prototype;
  dart.addTypeTests(src__animation__animations._TrainHoppingMode);
  dart.setLibraryUri(src__animation__animations._TrainHoppingMode, "package:flutter_web/src/animation/animations.dart");
  dart.setFieldSignature(src__animation__animations._TrainHoppingMode, () => ({
    __proto__: dart.getFields(src__animation__animations._TrainHoppingMode.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$1]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(src__animation__animations._TrainHoppingMode, ['toString']);
  src__animation__animations._TrainHoppingMode.minimize = dart.const(new src__animation__animations._TrainHoppingMode.new(0, "_TrainHoppingMode.minimize"));
  src__animation__animations._TrainHoppingMode.maximize = dart.const(new src__animation__animations._TrainHoppingMode.new(1, "_TrainHoppingMode.maximize"));
  src__animation__animations._TrainHoppingMode.values = dart.constList([src__animation__animations._TrainHoppingMode.minimize, src__animation__animations._TrainHoppingMode.maximize], src__animation__animations._TrainHoppingMode);
  const _mode = dart.privateName(src__animation__animations, "_mode");
  const _lastStatus = dart.privateName(src__animation__animations, "_lastStatus");
  const _lastValue = dart.privateName(src__animation__animations, "_lastValue");
  const _currentTrain$ = dart.privateName(src__animation__animations, "_currentTrain");
  const _nextTrain$ = dart.privateName(src__animation__animations, "_nextTrain");
  const _valueChangeHandler = dart.privateName(src__animation__animations, "_valueChangeHandler");
  src__animation__listener_helpers.AnimationEagerListenerMixin = class AnimationEagerListenerMixin extends core.Object {};
  src__animation__listener_helpers.AnimationEagerListenerMixin[dart.mixinOn] = Object => class AnimationEagerListenerMixin extends Object {
    didRegisterListener() {
    }
    didUnregisterListener() {
    }
    dispose() {
    }
  };
  (src__animation__listener_helpers.AnimationEagerListenerMixin[dart.mixinNew] = function() {
  }).prototype = src__animation__listener_helpers.AnimationEagerListenerMixin.prototype;
  dart.addTypeTests(src__animation__listener_helpers.AnimationEagerListenerMixin);
  src__animation__listener_helpers.AnimationEagerListenerMixin[dart.implements] = () => [core.Object];
  dart.setMethodSignature(src__animation__listener_helpers.AnimationEagerListenerMixin, () => ({
    __proto__: dart.getMethods(src__animation__listener_helpers.AnimationEagerListenerMixin.__proto__),
    didRegisterListener: dart.fnType(dart.void, []),
    didUnregisterListener: dart.fnType(dart.void, []),
    dispose: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(src__animation__listener_helpers.AnimationEagerListenerMixin, "package:flutter_web/src/animation/listener_helpers.dart");
  const Animation_AnimationEagerListenerMixin$ = class Animation_AnimationEagerListenerMixin extends src__animation__animation.Animation$(core.double) {};
  (Animation_AnimationEagerListenerMixin$.new = function() {
    Animation_AnimationEagerListenerMixin$.__proto__.new.call(this);
  }).prototype = Animation_AnimationEagerListenerMixin$.prototype;
  dart.applyMixin(Animation_AnimationEagerListenerMixin$, src__animation__listener_helpers.AnimationEagerListenerMixin);
  const Animation_AnimationLocalListenersMixin$$ = class Animation_AnimationLocalListenersMixin extends Animation_AnimationEagerListenerMixin$ {};
  (Animation_AnimationLocalListenersMixin$$.new = function() {
    src__animation__listener_helpers.AnimationLocalListenersMixin[dart.mixinNew].call(this);
    Animation_AnimationLocalListenersMixin$$.__proto__.new.call(this);
  }).prototype = Animation_AnimationLocalListenersMixin$$.prototype;
  dart.applyMixin(Animation_AnimationLocalListenersMixin$$, src__animation__listener_helpers.AnimationLocalListenersMixin);
  const Animation_AnimationLocalStatusListenersMixin$$0 = class Animation_AnimationLocalStatusListenersMixin extends Animation_AnimationLocalListenersMixin$$ {};
  (Animation_AnimationLocalStatusListenersMixin$$0.new = function() {
    src__animation__listener_helpers.AnimationLocalStatusListenersMixin[dart.mixinNew].call(this);
    Animation_AnimationLocalStatusListenersMixin$$0.__proto__.new.call(this);
  }).prototype = Animation_AnimationLocalStatusListenersMixin$$0.prototype;
  dart.applyMixin(Animation_AnimationLocalStatusListenersMixin$$0, src__animation__listener_helpers.AnimationLocalStatusListenersMixin);
  src__animation__animations.TrainHoppingAnimation = class TrainHoppingAnimation extends Animation_AnimationLocalStatusListenersMixin$$0 {
    get onSwitchedTrain() {
      return this[onSwitchedTrain$];
    }
    set onSwitchedTrain(value) {
      this[onSwitchedTrain$] = value;
    }
    get currentTrain() {
      return this[_currentTrain$];
    }
    [_statusChangeHandler](status) {
      if (!(this[_currentTrain$] != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/animations.dart", 534, 12, "_currentTrain != null");
      if (!dart.equals(status, this[_lastStatus])) {
        this.notifyListeners();
        this[_lastStatus] = status;
      }
      if (!(this[_lastStatus] != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/animations.dart", 539, 12, "_lastStatus != null");
    }
    get status() {
      return this[_currentTrain$].status;
    }
    [_valueChangeHandler]() {
      let t11;
      if (!(this[_currentTrain$] != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/animations.dart", 547, 12, "_currentTrain != null");
      let hop = false;
      if (this[_nextTrain$] != null) {
        if (!(this[_mode] != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/animations.dart", 550, 14, "_mode != null");
        switch (this[_mode]) {
          case src__animation__animations._TrainHoppingMode.minimize:
          {
            hop = dart.notNull(this[_nextTrain$].value) <= dart.notNull(this[_currentTrain$].value);
            break;
          }
          case src__animation__animations._TrainHoppingMode.maximize:
          {
            hop = dart.notNull(this[_nextTrain$].value) >= dart.notNull(this[_currentTrain$].value);
            break;
          }
        }
        if (hop) {
          t11 = this[_currentTrain$];
          t11.removeStatusListener(dart.bind(this, _statusChangeHandler));
          t11.removeListener(dart.bind(this, _valueChangeHandler));
          t11;
          this[_currentTrain$] = this[_nextTrain$];
          this[_nextTrain$] = null;
          this[_currentTrain$].addStatusListener(dart.bind(this, _statusChangeHandler));
          this[_statusChangeHandler](this[_currentTrain$].status);
        }
      }
      let newValue = this.value;
      if (newValue != this[_lastValue]) {
        this.notifyListeners();
        this[_lastValue] = newValue;
      }
      if (!(this[_lastValue] != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/animations.dart", 574, 12, "_lastValue != null");
      if (hop && this.onSwitchedTrain != null) this.onSwitchedTrain();
    }
    get value() {
      return this[_currentTrain$].value;
    }
    dispose() {
      let t11;
      if (!(this[_currentTrain$] != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/animations.dart", 586, 12, "_currentTrain != null");
      this[_currentTrain$].removeStatusListener(dart.bind(this, _statusChangeHandler));
      this[_currentTrain$].removeListener(dart.bind(this, _valueChangeHandler));
      this[_currentTrain$] = null;
      t11 = this[_nextTrain$];
      t11 == null ? null : t11.removeListener(dart.bind(this, _valueChangeHandler));
      this[_nextTrain$] = null;
      super.dispose();
    }
    toString() {
      if (this[_nextTrain$] != null) return dart.str(this.currentTrain) + "➩" + dart.str(this[$runtimeType]) + "(next: " + dart.str(this[_nextTrain$]) + ")";
      return dart.str(this.currentTrain) + "➩" + dart.str(this[$runtimeType]) + "(no next)";
    }
  };
  (src__animation__animations.TrainHoppingAnimation.new = function(_currentTrain, _nextTrain, opts) {
    let t11;
    let onSwitchedTrain = opts && 'onSwitchedTrain' in opts ? opts.onSwitchedTrain : null;
    this[_mode] = null;
    this[_lastStatus] = null;
    this[_lastValue] = null;
    this[_currentTrain$] = _currentTrain;
    this[_nextTrain$] = _nextTrain;
    this[onSwitchedTrain$] = onSwitchedTrain;
    if (!(_currentTrain != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/animations.dart", 498, 16, "_currentTrain != null");
    src__animation__animations.TrainHoppingAnimation.__proto__.new.call(this);
    if (this[_nextTrain$] != null) {
      if (this[_currentTrain$].value == this[_nextTrain$].value) {
        this[_currentTrain$] = this[_nextTrain$];
        this[_nextTrain$] = null;
      } else if (dart.notNull(this[_currentTrain$].value) > dart.notNull(this[_nextTrain$].value)) {
        this[_mode] = src__animation__animations._TrainHoppingMode.maximize;
      } else {
        if (!(dart.notNull(this[_currentTrain$].value) < dart.notNull(this[_nextTrain$].value))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/animations.dart", 506, 16, "_currentTrain.value < _nextTrain.value");
        this[_mode] = src__animation__animations._TrainHoppingMode.minimize;
      }
    }
    this[_currentTrain$].addStatusListener(dart.bind(this, _statusChangeHandler));
    this[_currentTrain$].addListener(dart.bind(this, _valueChangeHandler));
    t11 = this[_nextTrain$];
    t11 == null ? null : t11.addListener(dart.bind(this, _valueChangeHandler));
    if (!(this[_mode] != null || this[_nextTrain$] == null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/animations.dart", 513, 12, "_mode != null || _nextTrain == null");
  }).prototype = src__animation__animations.TrainHoppingAnimation.prototype;
  dart.addTypeTests(src__animation__animations.TrainHoppingAnimation);
  const onSwitchedTrain$ = Symbol("TrainHoppingAnimation.onSwitchedTrain");
  dart.setMethodSignature(src__animation__animations.TrainHoppingAnimation, () => ({
    __proto__: dart.getMethods(src__animation__animations.TrainHoppingAnimation.__proto__),
    [_statusChangeHandler]: dart.fnType(dart.void, [src__animation__animation.AnimationStatus]),
    [_valueChangeHandler]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(src__animation__animations.TrainHoppingAnimation, () => ({
    __proto__: dart.getGetters(src__animation__animations.TrainHoppingAnimation.__proto__),
    currentTrain: src__animation__animation.Animation$(core.double),
    status: src__animation__animation.AnimationStatus,
    value: core.double
  }));
  dart.setLibraryUri(src__animation__animations.TrainHoppingAnimation, "package:flutter_web/src/animation/animations.dart");
  dart.setFieldSignature(src__animation__animations.TrainHoppingAnimation, () => ({
    __proto__: dart.getFields(src__animation__animations.TrainHoppingAnimation.__proto__),
    [_currentTrain$]: dart.fieldType(src__animation__animation.Animation$(core.double)),
    [_nextTrain$]: dart.fieldType(src__animation__animation.Animation$(core.double)),
    [_mode]: dart.fieldType(src__animation__animations._TrainHoppingMode),
    onSwitchedTrain: dart.fieldType(dart.fnType(dart.void, [])),
    [_lastStatus]: dart.fieldType(src__animation__animation.AnimationStatus),
    [_lastValue]: dart.fieldType(core.double)
  }));
  dart.defineExtensionMethods(src__animation__animations.TrainHoppingAnimation, ['toString']);
  const _maybeNotifyListeners = dart.privateName(src__animation__animations, "_maybeNotifyListeners");
  const _maybeNotifyStatusListeners = dart.privateName(src__animation__animations, "_maybeNotifyStatusListeners");
  const _is_CompoundAnimation_default = Symbol('_is_CompoundAnimation_default');
  src__animation__animations.CompoundAnimation$ = dart.generic(T => {
    const Animation_AnimationLazyListenerMixin$ = class Animation_AnimationLazyListenerMixin extends src__animation__animation.Animation$(T) {};
    (Animation_AnimationLazyListenerMixin$.new = function() {
      src__animation__listener_helpers.AnimationLazyListenerMixin[dart.mixinNew].call(this);
      Animation_AnimationLazyListenerMixin$.__proto__.new.call(this);
    }).prototype = Animation_AnimationLazyListenerMixin$.prototype;
    dart.applyMixin(Animation_AnimationLazyListenerMixin$, src__animation__listener_helpers.AnimationLazyListenerMixin);
    const Animation_AnimationLocalListenersMixin$ = class Animation_AnimationLocalListenersMixin extends Animation_AnimationLazyListenerMixin$ {};
    (Animation_AnimationLocalListenersMixin$.new = function() {
      src__animation__listener_helpers.AnimationLocalListenersMixin[dart.mixinNew].call(this);
      Animation_AnimationLocalListenersMixin$.__proto__.new.call(this);
    }).prototype = Animation_AnimationLocalListenersMixin$.prototype;
    dart.applyMixin(Animation_AnimationLocalListenersMixin$, src__animation__listener_helpers.AnimationLocalListenersMixin);
    const Animation_AnimationLocalStatusListenersMixin$ = class Animation_AnimationLocalStatusListenersMixin extends Animation_AnimationLocalListenersMixin$ {};
    (Animation_AnimationLocalStatusListenersMixin$.new = function() {
      src__animation__listener_helpers.AnimationLocalStatusListenersMixin[dart.mixinNew].call(this);
      Animation_AnimationLocalStatusListenersMixin$.__proto__.new.call(this);
    }).prototype = Animation_AnimationLocalStatusListenersMixin$.prototype;
    dart.applyMixin(Animation_AnimationLocalStatusListenersMixin$, src__animation__listener_helpers.AnimationLocalStatusListenersMixin);
    class CompoundAnimation extends Animation_AnimationLocalStatusListenersMixin$ {
      get first() {
        return this[first$];
      }
      set first(value) {
        super.first = value;
      }
      get next() {
        return this[next$];
      }
      set next(value) {
        super.next = value;
      }
      didStartListening() {
        this.first.addListener(dart.bind(this, _maybeNotifyListeners));
        this.first.addStatusListener(dart.bind(this, _maybeNotifyStatusListeners));
        this.next.addListener(dart.bind(this, _maybeNotifyListeners));
        this.next.addStatusListener(dart.bind(this, _maybeNotifyStatusListeners));
      }
      didStopListening() {
        this.first.removeListener(dart.bind(this, _maybeNotifyListeners));
        this.first.removeStatusListener(dart.bind(this, _maybeNotifyStatusListeners));
        this.next.removeListener(dart.bind(this, _maybeNotifyListeners));
        this.next.removeStatusListener(dart.bind(this, _maybeNotifyStatusListeners));
      }
      get status() {
        if (dart.equals(this.next.status, src__animation__animation.AnimationStatus.forward) || dart.equals(this.next.status, src__animation__animation.AnimationStatus.reverse)) return this.next.status;
        return this.first.status;
      }
      toString() {
        return dart.str(this[$runtimeType]) + "(" + dart.str(this.first) + ", " + dart.str(this.next) + ")";
      }
      [_maybeNotifyStatusListeners](_) {
        if (!dart.equals(this.status, this[_lastStatus])) {
          this[_lastStatus] = this.status;
          this.notifyStatusListeners(this.status);
        }
      }
      [_maybeNotifyListeners]() {
        if (!dart.equals(this.value, this[_lastValue])) {
          this[_lastValue] = this.value;
          this.notifyListeners();
        }
      }
    }
    (CompoundAnimation.new = function(opts) {
      let first = opts && 'first' in opts ? opts.first : null;
      let next = opts && 'next' in opts ? opts.next : null;
      this[_lastStatus] = null;
      this[_lastValue] = null;
      this[first$] = first;
      this[next$] = next;
      if (!(first != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/animations.dart", 620, 15, "first != null");
      if (!(next != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/animations.dart", 621, 15, "next != null");
      CompoundAnimation.__proto__.new.call(this);
      ;
    }).prototype = CompoundAnimation.prototype;
    dart.addTypeTests(CompoundAnimation);
    CompoundAnimation.prototype[_is_CompoundAnimation_default] = true;
    const first$ = Symbol("CompoundAnimation.first");
    const next$ = Symbol("CompoundAnimation.next");
    dart.setMethodSignature(CompoundAnimation, () => ({
      __proto__: dart.getMethods(CompoundAnimation.__proto__),
      didStartListening: dart.fnType(dart.void, []),
      didStopListening: dart.fnType(dart.void, []),
      [_maybeNotifyStatusListeners]: dart.fnType(dart.void, [src__animation__animation.AnimationStatus]),
      [_maybeNotifyListeners]: dart.fnType(dart.void, [])
    }));
    dart.setGetterSignature(CompoundAnimation, () => ({
      __proto__: dart.getGetters(CompoundAnimation.__proto__),
      status: src__animation__animation.AnimationStatus
    }));
    dart.setLibraryUri(CompoundAnimation, "package:flutter_web/src/animation/animations.dart");
    dart.setFieldSignature(CompoundAnimation, () => ({
      __proto__: dart.getFields(CompoundAnimation.__proto__),
      first: dart.finalFieldType(src__animation__animation.Animation$(T)),
      next: dart.finalFieldType(src__animation__animation.Animation$(T)),
      [_lastStatus]: dart.fieldType(src__animation__animation.AnimationStatus),
      [_lastValue]: dart.fieldType(T)
    }));
    dart.defineExtensionMethods(CompoundAnimation, ['toString']);
    return CompoundAnimation;
  });
  src__animation__animations.CompoundAnimation = src__animation__animations.CompoundAnimation$();
  dart.addTypeTests(src__animation__animations.CompoundAnimation, _is_CompoundAnimation_default);
  src__animation__animations.AnimationMean = class AnimationMean extends src__animation__animations.CompoundAnimation$(core.double) {
    get value() {
      return (dart.notNull(this.first.value) + dart.notNull(this.next.value)) / 2.0;
    }
  };
  (src__animation__animations.AnimationMean.new = function(opts) {
    let left = opts && 'left' in opts ? opts.left : null;
    let right = opts && 'right' in opts ? opts.right : null;
    src__animation__animations.AnimationMean.__proto__.new.call(this, {first: left, next: right});
    ;
  }).prototype = src__animation__animations.AnimationMean.prototype;
  dart.addTypeTests(src__animation__animations.AnimationMean);
  dart.setGetterSignature(src__animation__animations.AnimationMean, () => ({
    __proto__: dart.getGetters(src__animation__animations.AnimationMean.__proto__),
    value: core.double
  }));
  dart.setLibraryUri(src__animation__animations.AnimationMean, "package:flutter_web/src/animation/animations.dart");
  const _is_AnimationMax_default = Symbol('_is_AnimationMax_default');
  src__animation__animations.AnimationMax$ = dart.generic(T => {
    class AnimationMax extends src__animation__animations.CompoundAnimation$(T) {
      get value() {
        return math.max(T, this.first.value, this.next.value);
      }
    }
    (AnimationMax.new = function(first, next) {
      AnimationMax.__proto__.new.call(this, {first: first, next: next});
      ;
    }).prototype = AnimationMax.prototype;
    dart.addTypeTests(AnimationMax);
    AnimationMax.prototype[_is_AnimationMax_default] = true;
    dart.setGetterSignature(AnimationMax, () => ({
      __proto__: dart.getGetters(AnimationMax.__proto__),
      value: T
    }));
    dart.setLibraryUri(AnimationMax, "package:flutter_web/src/animation/animations.dart");
    return AnimationMax;
  });
  src__animation__animations.AnimationMax = src__animation__animations.AnimationMax$();
  dart.addTypeTests(src__animation__animations.AnimationMax, _is_AnimationMax_default);
  const _is_AnimationMin_default = Symbol('_is_AnimationMin_default');
  src__animation__animations.AnimationMin$ = dart.generic(T => {
    class AnimationMin extends src__animation__animations.CompoundAnimation$(T) {
      get value() {
        return math.min(T, this.first.value, this.next.value);
      }
    }
    (AnimationMin.new = function(first, next) {
      AnimationMin.__proto__.new.call(this, {first: first, next: next});
      ;
    }).prototype = AnimationMin.prototype;
    dart.addTypeTests(AnimationMin);
    AnimationMin.prototype[_is_AnimationMin_default] = true;
    dart.setGetterSignature(AnimationMin, () => ({
      __proto__: dart.getGetters(AnimationMin.__proto__),
      value: T
    }));
    dart.setLibraryUri(AnimationMin, "package:flutter_web/src/animation/animations.dart");
    return AnimationMin;
  });
  src__animation__animations.AnimationMin = src__animation__animations.AnimationMin$();
  dart.addTypeTests(src__animation__animations.AnimationMin, _is_AnimationMin_default);
  dart.defineLazy(src__animation__animations, {
    /*src__animation__animations.kAlwaysCompleteAnimation*/get kAlwaysCompleteAnimation() {
      return dart.const(new src__animation__animations._AlwaysCompleteAnimation.new());
    },
    /*src__animation__animations.kAlwaysDismissedAnimation*/get kAlwaysDismissedAnimation() {
      return dart.const(new src__animation__animations._AlwaysDismissedAnimation.new());
    }
  });
  const _name$2 = dart.privateName(src__animation__animation, "_name");
  src__animation__animation.AnimationStatus = class AnimationStatus extends core.Object {
    toString() {
      return this[_name$2];
    }
  };
  (src__animation__animation.AnimationStatus.new = function(index, _name) {
    this.index = index;
    this[_name$2] = _name;
    ;
  }).prototype = src__animation__animation.AnimationStatus.prototype;
  dart.addTypeTests(src__animation__animation.AnimationStatus);
  dart.setLibraryUri(src__animation__animation.AnimationStatus, "package:flutter_web/src/animation/animation.dart");
  dart.setFieldSignature(src__animation__animation.AnimationStatus, () => ({
    __proto__: dart.getFields(src__animation__animation.AnimationStatus.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$2]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(src__animation__animation.AnimationStatus, ['toString']);
  src__animation__animation.AnimationStatus.dismissed = dart.const(new src__animation__animation.AnimationStatus.new(0, "AnimationStatus.dismissed"));
  src__animation__animation.AnimationStatus.forward = dart.const(new src__animation__animation.AnimationStatus.new(1, "AnimationStatus.forward"));
  src__animation__animation.AnimationStatus.reverse = dart.const(new src__animation__animation.AnimationStatus.new(2, "AnimationStatus.reverse"));
  src__animation__animation.AnimationStatus.completed = dart.const(new src__animation__animation.AnimationStatus.new(3, "AnimationStatus.completed"));
  src__animation__animation.AnimationStatus.values = dart.constList([src__animation__animation.AnimationStatus.dismissed, src__animation__animation.AnimationStatus.forward, src__animation__animation.AnimationStatus.reverse, src__animation__animation.AnimationStatus.completed], src__animation__animation.AnimationStatus);
  const _is_Animatable_default = Symbol('_is_Animatable_default');
  src__animation__tween.Animatable$ = dart.generic(T => {
    let _AnimatedEvaluationOfT = () => (_AnimatedEvaluationOfT = dart.constFn(src__animation__tween._AnimatedEvaluation$(T)))();
    let _ChainedEvaluationOfT = () => (_ChainedEvaluationOfT = dart.constFn(src__animation__tween._ChainedEvaluation$(T)))();
    class Animatable extends core.Object {
      evaluate(animation) {
        return this.transform(animation.value);
      }
      animate(parent) {
        return new (_AnimatedEvaluationOfT()).new(parent, this);
      }
      chain(parent) {
        return new (_ChainedEvaluationOfT()).new(parent, this);
      }
    }
    (Animatable.new = function() {
      ;
    }).prototype = Animatable.prototype;
    dart.addTypeTests(Animatable);
    Animatable.prototype[_is_Animatable_default] = true;
    dart.setMethodSignature(Animatable, () => ({
      __proto__: dart.getMethods(Animatable.__proto__),
      evaluate: dart.fnType(T, [src__animation__animation.Animation$(core.double)]),
      animate: dart.fnType(src__animation__animation.Animation$(T), [src__animation__animation.Animation$(core.double)]),
      chain: dart.fnType(src__animation__tween.Animatable$(T), [src__animation__tween.Animatable$(core.double)])
    }));
    dart.setLibraryUri(Animatable, "package:flutter_web/src/animation/tween.dart");
    return Animatable;
  });
  src__animation__tween.Animatable = src__animation__tween.Animatable$();
  dart.addTypeTests(src__animation__tween.Animatable, _is_Animatable_default);
  const _evaluatable$ = dart.privateName(src__animation__tween, "_evaluatable");
  const _is__AnimatedEvaluation_default = Symbol('_is__AnimatedEvaluation_default');
  src__animation__tween._AnimatedEvaluation$ = dart.generic(T => {
    const Animation_AnimationWithParentMixin$ = class Animation_AnimationWithParentMixin extends src__animation__animation.Animation$(T) {};
    (Animation_AnimationWithParentMixin$.new = function() {
      Animation_AnimationWithParentMixin$.__proto__.new.call(this);
    }).prototype = Animation_AnimationWithParentMixin$.prototype;
    dart.applyMixin(Animation_AnimationWithParentMixin$, src__animation__animations.AnimationWithParentMixin$(core.double));
    class _AnimatedEvaluation extends Animation_AnimationWithParentMixin$ {
      get parent() {
        return this[parent$];
      }
      set parent(value) {
        super.parent = value;
      }
      get value() {
        return this[_evaluatable$].evaluate(this.parent);
      }
      toString() {
        return dart.str(this.parent) + "➩" + dart.str(this[_evaluatable$]) + "➩" + dart.str(this.value);
      }
      toStringDetails() {
        return dart.str(super.toStringDetails()) + " " + dart.str(this[_evaluatable$]);
      }
    }
    (_AnimatedEvaluation.new = function(parent, _evaluatable) {
      this[parent$] = parent;
      this[_evaluatable$] = _evaluatable;
      _AnimatedEvaluation.__proto__.new.call(this);
      ;
    }).prototype = _AnimatedEvaluation.prototype;
    dart.addTypeTests(_AnimatedEvaluation);
    _AnimatedEvaluation.prototype[_is__AnimatedEvaluation_default] = true;
    const parent$ = Symbol("_AnimatedEvaluation.parent");
    dart.setGetterSignature(_AnimatedEvaluation, () => ({
      __proto__: dart.getGetters(_AnimatedEvaluation.__proto__),
      value: T
    }));
    dart.setLibraryUri(_AnimatedEvaluation, "package:flutter_web/src/animation/tween.dart");
    dart.setFieldSignature(_AnimatedEvaluation, () => ({
      __proto__: dart.getFields(_AnimatedEvaluation.__proto__),
      parent: dart.finalFieldType(src__animation__animation.Animation$(core.double)),
      [_evaluatable$]: dart.finalFieldType(src__animation__tween.Animatable$(T))
    }));
    dart.defineExtensionMethods(_AnimatedEvaluation, ['toString']);
    return _AnimatedEvaluation;
  });
  src__animation__tween._AnimatedEvaluation = src__animation__tween._AnimatedEvaluation$();
  dart.addTypeTests(src__animation__tween._AnimatedEvaluation, _is__AnimatedEvaluation_default);
  const _parent$ = dart.privateName(src__animation__tween, "_parent");
  const _is__ChainedEvaluation_default = Symbol('_is__ChainedEvaluation_default');
  src__animation__tween._ChainedEvaluation$ = dart.generic(T => {
    class _ChainedEvaluation extends src__animation__tween.Animatable$(T) {
      transform(t) {
        return this[_evaluatable$].transform(this[_parent$].transform(t));
      }
      toString() {
        return dart.str(this[_parent$]) + "➩" + dart.str(this[_evaluatable$]);
      }
    }
    (_ChainedEvaluation.new = function(_parent, _evaluatable) {
      this[_parent$] = _parent;
      this[_evaluatable$] = _evaluatable;
      _ChainedEvaluation.__proto__.new.call(this);
      ;
    }).prototype = _ChainedEvaluation.prototype;
    dart.addTypeTests(_ChainedEvaluation);
    _ChainedEvaluation.prototype[_is__ChainedEvaluation_default] = true;
    dart.setMethodSignature(_ChainedEvaluation, () => ({
      __proto__: dart.getMethods(_ChainedEvaluation.__proto__),
      transform: dart.fnType(T, [core.double])
    }));
    dart.setLibraryUri(_ChainedEvaluation, "package:flutter_web/src/animation/tween.dart");
    dart.setFieldSignature(_ChainedEvaluation, () => ({
      __proto__: dart.getFields(_ChainedEvaluation.__proto__),
      [_parent$]: dart.finalFieldType(src__animation__tween.Animatable$(core.double)),
      [_evaluatable$]: dart.finalFieldType(src__animation__tween.Animatable$(T))
    }));
    dart.defineExtensionMethods(_ChainedEvaluation, ['toString']);
    return _ChainedEvaluation;
  });
  src__animation__tween._ChainedEvaluation = src__animation__tween._ChainedEvaluation$();
  dart.addTypeTests(src__animation__tween._ChainedEvaluation, _is__ChainedEvaluation_default);
  const _is_Tween_default = Symbol('_is_Tween_default');
  src__animation__tween.Tween$ = dart.generic(T => {
    class Tween extends src__animation__tween.Animatable$(T) {
      get begin() {
        return this[begin$];
      }
      set begin(value) {
        this[begin$] = T._check(value);
      }
      get end() {
        return this[end$];
      }
      set end(value) {
        this[end$] = T._check(value);
      }
      lerp(t) {
        if (!(this.begin != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/tween.dart", 237, 12, "ssert(begin !");
        if (!(this.end != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/tween.dart", 238, 12, "ssert(end !");
        return T._check(dart.dsend(this.begin, '+', [dart.dsend(dart.dsend(this.end, '-', [this.begin]), '*', [t])]));
      }
      transform(t) {
        if (t === 0.0) return this.begin;
        if (t === 1.0) return this.end;
        return this.lerp(t);
      }
      toString() {
        return dart.str(this[$runtimeType]) + "(" + dart.str(this.begin) + " → " + dart.str(this.end) + ")";
      }
    }
    (Tween.new = function(opts) {
      let begin = opts && 'begin' in opts ? opts.begin : null;
      let end = opts && 'end' in opts ? opts.end : null;
      this[begin$] = begin;
      this[end$] = end;
      Tween.__proto__.new.call(this);
      ;
    }).prototype = Tween.prototype;
    dart.addTypeTests(Tween);
    Tween.prototype[_is_Tween_default] = true;
    const begin$ = Symbol("Tween.begin");
    const end$ = Symbol("Tween.end");
    dart.setMethodSignature(Tween, () => ({
      __proto__: dart.getMethods(Tween.__proto__),
      lerp: dart.fnType(T, [core.double]),
      transform: dart.fnType(T, [core.double])
    }));
    dart.setLibraryUri(Tween, "package:flutter_web/src/animation/tween.dart");
    dart.setFieldSignature(Tween, () => ({
      __proto__: dart.getFields(Tween.__proto__),
      begin: dart.fieldType(T),
      end: dart.fieldType(T)
    }));
    dart.defineExtensionMethods(Tween, ['toString']);
    return Tween;
  });
  src__animation__tween.Tween = src__animation__tween.Tween$();
  dart.addTypeTests(src__animation__tween.Tween, _is_Tween_default);
  const _is_ReverseTween_default = Symbol('_is_ReverseTween_default');
  src__animation__tween.ReverseTween$ = dart.generic(T => {
    class ReverseTween extends src__animation__tween.Tween$(T) {
      get parent() {
        return this[parent$];
      }
      set parent(value) {
        super.parent = value;
      }
      lerp(t) {
        return this.parent.lerp(1.0 - dart.notNull(t));
      }
    }
    (ReverseTween.new = function(parent) {
      this[parent$] = parent;
      if (!(parent != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/tween.dart", 271, 14, "ssert(parent !");
      ReverseTween.__proto__.new.call(this, {begin: parent.end, end: parent.begin});
      ;
    }).prototype = ReverseTween.prototype;
    dart.addTypeTests(ReverseTween);
    ReverseTween.prototype[_is_ReverseTween_default] = true;
    const parent$ = Symbol("ReverseTween.parent");
    dart.setLibraryUri(ReverseTween, "package:flutter_web/src/animation/tween.dart");
    dart.setFieldSignature(ReverseTween, () => ({
      __proto__: dart.getFields(ReverseTween.__proto__),
      parent: dart.finalFieldType(src__animation__tween.Tween$(T))
    }));
    return ReverseTween;
  });
  src__animation__tween.ReverseTween = src__animation__tween.ReverseTween$();
  dart.addTypeTests(src__animation__tween.ReverseTween, _is_ReverseTween_default);
  src__animation__tween.ColorTween = class ColorTween extends src__animation__tween.Tween$(ui$.Color) {
    lerp(t) {
      return ui$.Color.lerp(this.begin, this.end, t);
    }
  };
  (src__animation__tween.ColorTween.new = function(opts) {
    let begin = opts && 'begin' in opts ? opts.begin : null;
    let end = opts && 'end' in opts ? opts.end : null;
    src__animation__tween.ColorTween.__proto__.new.call(this, {begin: begin, end: end});
    ;
  }).prototype = src__animation__tween.ColorTween.prototype;
  dart.addTypeTests(src__animation__tween.ColorTween);
  dart.setLibraryUri(src__animation__tween.ColorTween, "package:flutter_web/src/animation/tween.dart");
  src__animation__tween.SizeTween = class SizeTween extends src__animation__tween.Tween$(ui$.Size) {
    lerp(t) {
      return ui$.Size.lerp(this.begin, this.end, t);
    }
  };
  (src__animation__tween.SizeTween.new = function(opts) {
    let begin = opts && 'begin' in opts ? opts.begin : null;
    let end = opts && 'end' in opts ? opts.end : null;
    src__animation__tween.SizeTween.__proto__.new.call(this, {begin: begin, end: end});
    ;
  }).prototype = src__animation__tween.SizeTween.prototype;
  dart.addTypeTests(src__animation__tween.SizeTween);
  dart.setLibraryUri(src__animation__tween.SizeTween, "package:flutter_web/src/animation/tween.dart");
  src__animation__tween.RectTween = class RectTween extends src__animation__tween.Tween$(ui$.Rect) {
    lerp(t) {
      return ui$.Rect.lerp(this.begin, this.end, t);
    }
  };
  (src__animation__tween.RectTween.new = function(opts) {
    let begin = opts && 'begin' in opts ? opts.begin : null;
    let end = opts && 'end' in opts ? opts.end : null;
    src__animation__tween.RectTween.__proto__.new.call(this, {begin: begin, end: end});
    ;
  }).prototype = src__animation__tween.RectTween.prototype;
  dart.addTypeTests(src__animation__tween.RectTween);
  dart.setLibraryUri(src__animation__tween.RectTween, "package:flutter_web/src/animation/tween.dart");
  src__animation__tween.IntTween = class IntTween extends src__animation__tween.Tween$(core.int) {
    lerp(t) {
      return (dart.notNull(this.begin) + (dart.notNull(this.end) - dart.notNull(this.begin)) * dart.notNull(t))[$round]();
    }
  };
  (src__animation__tween.IntTween.new = function(opts) {
    let begin = opts && 'begin' in opts ? opts.begin : null;
    let end = opts && 'end' in opts ? opts.end : null;
    src__animation__tween.IntTween.__proto__.new.call(this, {begin: begin, end: end});
    ;
  }).prototype = src__animation__tween.IntTween.prototype;
  dart.addTypeTests(src__animation__tween.IntTween);
  dart.setLibraryUri(src__animation__tween.IntTween, "package:flutter_web/src/animation/tween.dart");
  src__animation__tween.StepTween = class StepTween extends src__animation__tween.Tween$(core.int) {
    lerp(t) {
      return (dart.notNull(this.begin) + (dart.notNull(this.end) - dart.notNull(this.begin)) * dart.notNull(t))[$floor]();
    }
  };
  (src__animation__tween.StepTween.new = function(opts) {
    let begin = opts && 'begin' in opts ? opts.begin : null;
    let end = opts && 'end' in opts ? opts.end : null;
    src__animation__tween.StepTween.__proto__.new.call(this, {begin: begin, end: end});
    ;
  }).prototype = src__animation__tween.StepTween.prototype;
  dart.addTypeTests(src__animation__tween.StepTween);
  dart.setLibraryUri(src__animation__tween.StepTween, "package:flutter_web/src/animation/tween.dart");
  const _is_ConstantTween_default = Symbol('_is_ConstantTween_default');
  src__animation__tween.ConstantTween$ = dart.generic(T => {
    class ConstantTween extends src__animation__tween.Tween$(T) {
      lerp(t) {
        return this.begin;
      }
      toString() {
        return dart.str(this[$runtimeType]) + "(value: begin)";
      }
    }
    (ConstantTween.new = function(value) {
      ConstantTween.__proto__.new.call(this, {begin: value, end: value});
      ;
    }).prototype = ConstantTween.prototype;
    dart.addTypeTests(ConstantTween);
    ConstantTween.prototype[_is_ConstantTween_default] = true;
    dart.setLibraryUri(ConstantTween, "package:flutter_web/src/animation/tween.dart");
    dart.defineExtensionMethods(ConstantTween, ['toString']);
    return ConstantTween;
  });
  src__animation__tween.ConstantTween = src__animation__tween.ConstantTween$();
  dart.addTypeTests(src__animation__tween.ConstantTween, _is_ConstantTween_default);
  src__animation__tween.CurveTween = class CurveTween extends src__animation__tween.Animatable$(core.double) {
    get curve() {
      return this[curve$0];
    }
    set curve(value) {
      this[curve$0] = value;
    }
    transform(t) {
      if (t === 0.0 || t === 1.0) {
        if (!(this.curve.transform(t)[$round]() === t)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/tween.dart", 446, 14, "ssert(curve.transform(t).round(");
        return t;
      }
      return this.curve.transform(t);
    }
    toString() {
      return dart.str(this[$runtimeType]) + "(curve: " + dart.str(this.curve) + ")";
    }
  };
  (src__animation__tween.CurveTween.new = function(opts) {
    let curve = opts && 'curve' in opts ? opts.curve : null;
    this[curve$0] = curve;
    if (!(curve != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/tween.dart", 438, 14, "ssert(curve !");
    src__animation__tween.CurveTween.__proto__.new.call(this);
    ;
  }).prototype = src__animation__tween.CurveTween.prototype;
  dart.addTypeTests(src__animation__tween.CurveTween);
  const curve$0 = Symbol("CurveTween.curve");
  dart.setMethodSignature(src__animation__tween.CurveTween, () => ({
    __proto__: dart.getMethods(src__animation__tween.CurveTween.__proto__),
    transform: dart.fnType(core.double, [core.double])
  }));
  dart.setLibraryUri(src__animation__tween.CurveTween, "package:flutter_web/src/animation/tween.dart");
  dart.setFieldSignature(src__animation__tween.CurveTween, () => ({
    __proto__: dart.getFields(src__animation__tween.CurveTween.__proto__),
    curve: dart.fieldType(src__animation__curves.Curve)
  }));
  dart.defineExtensionMethods(src__animation__tween.CurveTween, ['toString']);
  src__animation__curves.Curve = class Curve extends core.Object {
    transform(t) {
      if (!(dart.notNull(t) >= 0.0 && dart.notNull(t) <= 1.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/curves.dart", 44, 12, "t >= 0.0 && t <= 1.0");
      if (t === 0.0 || t === 1.0) {
        return t;
      }
      return this.transformInternal(t);
    }
    transformInternal(t) {
      dart.throw(new core.UnimplementedError.new());
    }
    get flipped() {
      return new src__animation__curves.FlippedCurve.new(this);
    }
    toString() {
      return dart.str(this[$runtimeType]);
    }
  };
  (src__animation__curves.Curve.new = function() {
    ;
  }).prototype = src__animation__curves.Curve.prototype;
  dart.addTypeTests(src__animation__curves.Curve);
  dart.setMethodSignature(src__animation__curves.Curve, () => ({
    __proto__: dart.getMethods(src__animation__curves.Curve.__proto__),
    transform: dart.fnType(core.double, [core.double]),
    transformInternal: dart.fnType(core.double, [core.double])
  }));
  dart.setGetterSignature(src__animation__curves.Curve, () => ({
    __proto__: dart.getGetters(src__animation__curves.Curve.__proto__),
    flipped: src__animation__curves.Curve
  }));
  dart.setLibraryUri(src__animation__curves.Curve, "package:flutter_web/src/animation/curves.dart");
  dart.defineExtensionMethods(src__animation__curves.Curve, ['toString']);
  src__animation__curves._Linear = class _Linear extends src__animation__curves.Curve {
    transformInternal(t) {
      return t;
    }
  };
  (src__animation__curves._Linear.__ = function() {
    src__animation__curves._Linear.__proto__.new.call(this);
    ;
  }).prototype = src__animation__curves._Linear.prototype;
  dart.addTypeTests(src__animation__curves._Linear);
  dart.setLibraryUri(src__animation__curves._Linear, "package:flutter_web/src/animation/curves.dart");
  src__animation__curves.SawTooth = class SawTooth extends src__animation__curves.Curve {
    get count() {
      return this[count$];
    }
    set count(value) {
      super.count = value;
    }
    transformInternal(t) {
      t = dart.notNull(t) * dart.notNull(this.count);
      return dart.notNull(t) - t[$truncateToDouble]();
    }
    toString() {
      return dart.str(this[$runtimeType]) + "(" + dart.str(this.count) + ")";
    }
  };
  (src__animation__curves.SawTooth.new = function(count) {
    this[count$] = count;
    if (!(count != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/curves.dart", 98, 39, "count != null");
    src__animation__curves.SawTooth.__proto__.new.call(this);
    ;
  }).prototype = src__animation__curves.SawTooth.prototype;
  dart.addTypeTests(src__animation__curves.SawTooth);
  const count$ = Symbol("SawTooth.count");
  dart.setLibraryUri(src__animation__curves.SawTooth, "package:flutter_web/src/animation/curves.dart");
  dart.setFieldSignature(src__animation__curves.SawTooth, () => ({
    __proto__: dart.getFields(src__animation__curves.SawTooth.__proto__),
    count: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(src__animation__curves.SawTooth, ['toString']);
  src__animation__curves.Interval = class Interval extends src__animation__curves.Curve {
    get begin() {
      return this[begin$];
    }
    set begin(value) {
      super.begin = value;
    }
    get end() {
      return this[end$0];
    }
    set end(value) {
      super.end = value;
    }
    get curve() {
      return this[curve$1];
    }
    set curve(value) {
      super.curve = value;
    }
    transformInternal(t) {
      if (!(dart.notNull(this.begin) >= 0.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/curves.dart", 148, 12, "begin >= 0.0");
      if (!(dart.notNull(this.begin) <= 1.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/curves.dart", 149, 12, "begin <= 1.0");
      if (!(dart.notNull(this.end) >= 0.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/curves.dart", 150, 12, "end >= 0.0");
      if (!(dart.notNull(this.end) <= 1.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/curves.dart", 151, 12, "end <= 1.0");
      if (!(dart.notNull(this.end) >= dart.notNull(this.begin))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/curves.dart", 152, 12, "end >= begin");
      t = ((dart.notNull(t) - dart.notNull(this.begin)) / (dart.notNull(this.end) - dart.notNull(this.begin)))[$clamp](0.0, 1.0);
      if (t === 0.0 || t === 1.0) return t;
      return this.curve.transform(t);
    }
    toString() {
      if (!src__animation__curves._Linear.is(this.curve)) return dart.str(this[$runtimeType]) + "(" + dart.str(this.begin) + "⋯" + dart.str(this.end) + ")➩" + dart.str(this.curve);
      return dart.str(this[$runtimeType]) + "(" + dart.str(this.begin) + "⋯" + dart.str(this.end) + ")";
    }
  };
  (src__animation__curves.Interval.new = function(begin, end, opts) {
    let curve = opts && 'curve' in opts ? opts.curve : src__animation__curves.Curves.linear;
    this[begin$] = begin;
    this[end$0] = end;
    this[curve$1] = curve;
    if (!(begin != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/curves.dart", 129, 14, "begin != null");
    if (!(end != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/curves.dart", 130, 14, "end != null");
    if (!(curve != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/curves.dart", 131, 14, "curve != null");
    src__animation__curves.Interval.__proto__.new.call(this);
    ;
  }).prototype = src__animation__curves.Interval.prototype;
  dart.addTypeTests(src__animation__curves.Interval);
  const begin$ = Symbol("Interval.begin");
  const end$0 = Symbol("Interval.end");
  const curve$1 = Symbol("Interval.curve");
  dart.setLibraryUri(src__animation__curves.Interval, "package:flutter_web/src/animation/curves.dart");
  dart.setFieldSignature(src__animation__curves.Interval, () => ({
    __proto__: dart.getFields(src__animation__curves.Interval.__proto__),
    begin: dart.finalFieldType(core.double),
    end: dart.finalFieldType(core.double),
    curve: dart.finalFieldType(src__animation__curves.Curve)
  }));
  dart.defineExtensionMethods(src__animation__curves.Interval, ['toString']);
  src__animation__curves.Threshold = class Threshold extends src__animation__curves.Curve {
    get threshold() {
      return this[threshold$];
    }
    set threshold(value) {
      super.threshold = value;
    }
    transformInternal(t) {
      if (!(dart.notNull(this.threshold) >= 0.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/curves.dart", 183, 12, "threshold >= 0.0");
      if (!(dart.notNull(this.threshold) <= 1.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/curves.dart", 184, 12, "threshold <= 1.0");
      return dart.notNull(t) < dart.notNull(this.threshold) ? 0.0 : 1.0;
    }
  };
  (src__animation__curves.Threshold.new = function(threshold) {
    this[threshold$] = threshold;
    if (!(threshold != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/curves.dart", 174, 44, "threshold != null");
    src__animation__curves.Threshold.__proto__.new.call(this);
    ;
  }).prototype = src__animation__curves.Threshold.prototype;
  dart.addTypeTests(src__animation__curves.Threshold);
  const threshold$ = Symbol("Threshold.threshold");
  dart.setLibraryUri(src__animation__curves.Threshold, "package:flutter_web/src/animation/curves.dart");
  dart.setFieldSignature(src__animation__curves.Threshold, () => ({
    __proto__: dart.getFields(src__animation__curves.Threshold.__proto__),
    threshold: dart.finalFieldType(core.double)
  }));
  const _evaluateCubic = dart.privateName(src__animation__curves, "_evaluateCubic");
  src__animation__curves.Cubic = class Cubic extends src__animation__curves.Curve {
    get a() {
      return this[a$];
    }
    set a(value) {
      super.a = value;
    }
    get b() {
      return this[b$];
    }
    set b(value) {
      super.b = value;
    }
    get c() {
      return this[c$];
    }
    set c(value) {
      super.c = value;
    }
    get d() {
      return this[d$];
    }
    set d(value) {
      super.d = value;
    }
    [_evaluateCubic](a, b, m) {
      return 3 * dart.notNull(a) * (1 - dart.notNull(m)) * (1 - dart.notNull(m)) * dart.notNull(m) + 3 * dart.notNull(b) * (1 - dart.notNull(m)) * dart.notNull(m) * dart.notNull(m) + dart.notNull(m) * dart.notNull(m) * dart.notNull(m);
    }
    transformInternal(t) {
      let start = 0.0;
      let end = 1.0;
      while (true) {
        let midpoint = (start + end) / 2;
        let estimate = this[_evaluateCubic](this.a, this.c, midpoint);
        if ((dart.notNull(t) - dart.notNull(estimate))[$abs]() < dart.notNull(src__animation__curves.Cubic._cubicErrorBound)) return this[_evaluateCubic](this.b, this.d, midpoint);
        if (dart.notNull(estimate) < dart.notNull(t))
          start = midpoint;
        else
          end = midpoint;
      }
    }
    toString() {
      return dart.str(this[$runtimeType]) + "(" + this.a[$toStringAsFixed](2) + ", " + this.b[$toStringAsFixed](2) + ", " + this.c[$toStringAsFixed](2) + ", " + this.d[$toStringAsFixed](2) + ")";
    }
  };
  (src__animation__curves.Cubic.new = function(a, b, c, d) {
    this[a$] = a;
    this[b$] = b;
    this[c$] = c;
    this[d$] = d;
    if (!(a != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/curves.dart", 212, 14, "(a != nul");
    if (!(b != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/curves.dart", 213, 14, "(b != nul");
    if (!(c != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/curves.dart", 214, 14, "(c != nul");
    if (!(d != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/curves.dart", 215, 14, "(d != nul");
    src__animation__curves.Cubic.__proto__.new.call(this);
    ;
  }).prototype = src__animation__curves.Cubic.prototype;
  dart.addTypeTests(src__animation__curves.Cubic);
  const a$ = Symbol("Cubic.a");
  const b$ = Symbol("Cubic.b");
  const c$ = Symbol("Cubic.c");
  const d$ = Symbol("Cubic.d");
  dart.setMethodSignature(src__animation__curves.Cubic, () => ({
    __proto__: dart.getMethods(src__animation__curves.Cubic.__proto__),
    [_evaluateCubic]: dart.fnType(core.double, [core.double, core.double, core.double])
  }));
  dart.setLibraryUri(src__animation__curves.Cubic, "package:flutter_web/src/animation/curves.dart");
  dart.setFieldSignature(src__animation__curves.Cubic, () => ({
    __proto__: dart.getFields(src__animation__curves.Cubic.__proto__),
    a: dart.finalFieldType(core.double),
    b: dart.finalFieldType(core.double),
    c: dart.finalFieldType(core.double),
    d: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(src__animation__curves.Cubic, ['toString']);
  dart.defineLazy(src__animation__curves.Cubic, {
    /*src__animation__curves.Cubic._cubicErrorBound*/get _cubicErrorBound() {
      return 0.001;
    }
  });
  src__animation__curves.FlippedCurve = class FlippedCurve extends src__animation__curves.Curve {
    get curve() {
      return this[curve$2];
    }
    set curve(value) {
      super.curve = value;
    }
    transformInternal(t) {
      return 1.0 - dart.notNull(this.curve.transform(1.0 - dart.notNull(t)));
    }
    toString() {
      return dart.str(this[$runtimeType]) + "(" + dart.str(this.curve) + ")";
    }
  };
  (src__animation__curves.FlippedCurve.new = function(curve) {
    this[curve$2] = curve;
    if (!(curve != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/curves.dart", 293, 43, "(curve != nul");
    src__animation__curves.FlippedCurve.__proto__.new.call(this);
    ;
  }).prototype = src__animation__curves.FlippedCurve.prototype;
  dart.addTypeTests(src__animation__curves.FlippedCurve);
  const curve$2 = Symbol("FlippedCurve.curve");
  dart.setLibraryUri(src__animation__curves.FlippedCurve, "package:flutter_web/src/animation/curves.dart");
  dart.setFieldSignature(src__animation__curves.FlippedCurve, () => ({
    __proto__: dart.getFields(src__animation__curves.FlippedCurve.__proto__),
    curve: dart.finalFieldType(src__animation__curves.Curve)
  }));
  dart.defineExtensionMethods(src__animation__curves.FlippedCurve, ['toString']);
  src__animation__curves._DecelerateCurve = class _DecelerateCurve extends src__animation__curves.Curve {
    transformInternal(t) {
      t = 1.0 - dart.notNull(t);
      return 1.0 - dart.notNull(t) * dart.notNull(t);
    }
  };
  (src__animation__curves._DecelerateCurve.__ = function() {
    src__animation__curves._DecelerateCurve.__proto__.new.call(this);
    ;
  }).prototype = src__animation__curves._DecelerateCurve.prototype;
  dart.addTypeTests(src__animation__curves._DecelerateCurve);
  dart.setLibraryUri(src__animation__curves._DecelerateCurve, "package:flutter_web/src/animation/curves.dart");
  src__animation__curves._BounceInCurve = class _BounceInCurve extends src__animation__curves.Curve {
    transformInternal(t) {
      return 1.0 - dart.notNull(src__animation__curves._bounce(1.0 - dart.notNull(t)));
    }
  };
  (src__animation__curves._BounceInCurve.__ = function() {
    src__animation__curves._BounceInCurve.__proto__.new.call(this);
    ;
  }).prototype = src__animation__curves._BounceInCurve.prototype;
  dart.addTypeTests(src__animation__curves._BounceInCurve);
  dart.setLibraryUri(src__animation__curves._BounceInCurve, "package:flutter_web/src/animation/curves.dart");
  src__animation__curves._BounceOutCurve = class _BounceOutCurve extends src__animation__curves.Curve {
    transformInternal(t) {
      return src__animation__curves._bounce(t);
    }
  };
  (src__animation__curves._BounceOutCurve.__ = function() {
    src__animation__curves._BounceOutCurve.__proto__.new.call(this);
    ;
  }).prototype = src__animation__curves._BounceOutCurve.prototype;
  dart.addTypeTests(src__animation__curves._BounceOutCurve);
  dart.setLibraryUri(src__animation__curves._BounceOutCurve, "package:flutter_web/src/animation/curves.dart");
  src__animation__curves._BounceInOutCurve = class _BounceInOutCurve extends src__animation__curves.Curve {
    transformInternal(t) {
      if (dart.notNull(t) < 0.5)
        return (1.0 - dart.notNull(src__animation__curves._bounce(1.0 - dart.notNull(t) * 2.0))) * 0.5;
      else
        return dart.notNull(src__animation__curves._bounce(dart.notNull(t) * 2.0 - 1.0)) * 0.5 + 0.5;
    }
  };
  (src__animation__curves._BounceInOutCurve.__ = function() {
    src__animation__curves._BounceInOutCurve.__proto__.new.call(this);
    ;
  }).prototype = src__animation__curves._BounceInOutCurve.prototype;
  dart.addTypeTests(src__animation__curves._BounceInOutCurve);
  dart.setLibraryUri(src__animation__curves._BounceInOutCurve, "package:flutter_web/src/animation/curves.dart");
  src__animation__curves.ElasticInCurve = class ElasticInCurve extends src__animation__curves.Curve {
    get period() {
      return this[period$];
    }
    set period(value) {
      super.period = value;
    }
    transformInternal(t) {
      let s = dart.notNull(this.period) / 4.0;
      t = dart.notNull(t) - 1.0;
      return -math.pow(2.0, 10.0 * dart.notNull(t)) * math.sin((dart.notNull(t) - s) * (dart.notNull(math.pi) * 2.0) / dart.notNull(this.period));
    }
    toString() {
      return dart.str(this[$runtimeType]) + "(" + dart.str(this.period) + ")";
    }
  };
  (src__animation__curves.ElasticInCurve.new = function(period) {
    if (period === void 0) period = 0.4;
    this[period$] = period;
    src__animation__curves.ElasticInCurve.__proto__.new.call(this);
    ;
  }).prototype = src__animation__curves.ElasticInCurve.prototype;
  dart.addTypeTests(src__animation__curves.ElasticInCurve);
  const period$ = Symbol("ElasticInCurve.period");
  dart.setLibraryUri(src__animation__curves.ElasticInCurve, "package:flutter_web/src/animation/curves.dart");
  dart.setFieldSignature(src__animation__curves.ElasticInCurve, () => ({
    __proto__: dart.getFields(src__animation__curves.ElasticInCurve.__proto__),
    period: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(src__animation__curves.ElasticInCurve, ['toString']);
  src__animation__curves.ElasticOutCurve = class ElasticOutCurve extends src__animation__curves.Curve {
    get period() {
      return this[period$0];
    }
    set period(value) {
      super.period = value;
    }
    transformInternal(t) {
      let s = dart.notNull(this.period) / 4.0;
      return math.pow(2.0, -10 * dart.notNull(t)) * math.sin((dart.notNull(t) - s) * (dart.notNull(math.pi) * 2.0) / dart.notNull(this.period)) + 1.0;
    }
    toString() {
      return dart.str(this[$runtimeType]) + "(" + dart.str(this.period) + ")";
    }
  };
  (src__animation__curves.ElasticOutCurve.new = function(period) {
    if (period === void 0) period = 0.4;
    this[period$0] = period;
    src__animation__curves.ElasticOutCurve.__proto__.new.call(this);
    ;
  }).prototype = src__animation__curves.ElasticOutCurve.prototype;
  dart.addTypeTests(src__animation__curves.ElasticOutCurve);
  const period$0 = Symbol("ElasticOutCurve.period");
  dart.setLibraryUri(src__animation__curves.ElasticOutCurve, "package:flutter_web/src/animation/curves.dart");
  dart.setFieldSignature(src__animation__curves.ElasticOutCurve, () => ({
    __proto__: dart.getFields(src__animation__curves.ElasticOutCurve.__proto__),
    period: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(src__animation__curves.ElasticOutCurve, ['toString']);
  src__animation__curves.ElasticInOutCurve = class ElasticInOutCurve extends src__animation__curves.Curve {
    get period() {
      return this[period$1];
    }
    set period(value) {
      super.period = value;
    }
    transformInternal(t) {
      let s = dart.notNull(this.period) / 4.0;
      t = 2.0 * dart.notNull(t) - 1.0;
      if (dart.notNull(t) < 0.0)
        return -0.5 * math.pow(2.0, 10.0 * dart.notNull(t)) * math.sin((dart.notNull(t) - s) * (dart.notNull(math.pi) * 2.0) / dart.notNull(this.period));
      else
        return math.pow(2.0, -10.0 * dart.notNull(t)) * math.sin((dart.notNull(t) - s) * (dart.notNull(math.pi) * 2.0) / dart.notNull(this.period)) * 0.5 + 1.0;
    }
    toString() {
      return dart.str(this[$runtimeType]) + "(" + dart.str(this.period) + ")";
    }
  };
  (src__animation__curves.ElasticInOutCurve.new = function(period) {
    if (period === void 0) period = 0.4;
    this[period$1] = period;
    src__animation__curves.ElasticInOutCurve.__proto__.new.call(this);
    ;
  }).prototype = src__animation__curves.ElasticInOutCurve.prototype;
  dart.addTypeTests(src__animation__curves.ElasticInOutCurve);
  const period$1 = Symbol("ElasticInOutCurve.period");
  dart.setLibraryUri(src__animation__curves.ElasticInOutCurve, "package:flutter_web/src/animation/curves.dart");
  dart.setFieldSignature(src__animation__curves.ElasticInOutCurve, () => ({
    __proto__: dart.getFields(src__animation__curves.ElasticInOutCurve.__proto__),
    period: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(src__animation__curves.ElasticInOutCurve, ['toString']);
  src__animation__curves.Curves = class Curves extends core.Object {};
  (src__animation__curves.Curves.__ = function() {
    ;
  }).prototype = src__animation__curves.Curves.prototype;
  dart.addTypeTests(src__animation__curves.Curves);
  dart.setLibraryUri(src__animation__curves.Curves, "package:flutter_web/src/animation/curves.dart");
  dart.defineLazy(src__animation__curves.Curves, {
    /*src__animation__curves.Curves.linear*/get linear() {
      return dart.const(new src__animation__curves._Linear.__());
    },
    /*src__animation__curves.Curves.decelerate*/get decelerate() {
      return dart.const(new src__animation__curves._DecelerateCurve.__());
    },
    /*src__animation__curves.Curves.fastLinearToSlowEaseIn*/get fastLinearToSlowEaseIn() {
      return dart.const(new src__animation__curves.Cubic.new(0.18, 1.0, 0.04, 1.0));
    },
    /*src__animation__curves.Curves.ease*/get ease() {
      return dart.const(new src__animation__curves.Cubic.new(0.25, 0.1, 0.25, 1.0));
    },
    /*src__animation__curves.Curves.easeIn*/get easeIn() {
      return dart.const(new src__animation__curves.Cubic.new(0.42, 0.0, 1.0, 1.0));
    },
    /*src__animation__curves.Curves.easeInToLinear*/get easeInToLinear() {
      return dart.const(new src__animation__curves.Cubic.new(0.67, 0.03, 0.65, 0.09));
    },
    /*src__animation__curves.Curves.easeInSine*/get easeInSine() {
      return dart.const(new src__animation__curves.Cubic.new(0.47, 0.0, 0.745, 0.715));
    },
    /*src__animation__curves.Curves.easeInQuad*/get easeInQuad() {
      return dart.const(new src__animation__curves.Cubic.new(0.55, 0.085, 0.68, 0.53));
    },
    /*src__animation__curves.Curves.easeInCubic*/get easeInCubic() {
      return dart.const(new src__animation__curves.Cubic.new(0.55, 0.055, 0.675, 0.19));
    },
    /*src__animation__curves.Curves.easeInQuart*/get easeInQuart() {
      return dart.const(new src__animation__curves.Cubic.new(0.895, 0.03, 0.685, 0.22));
    },
    /*src__animation__curves.Curves.easeInQuint*/get easeInQuint() {
      return dart.const(new src__animation__curves.Cubic.new(0.755, 0.05, 0.855, 0.06));
    },
    /*src__animation__curves.Curves.easeInExpo*/get easeInExpo() {
      return dart.const(new src__animation__curves.Cubic.new(0.95, 0.05, 0.795, 0.035));
    },
    /*src__animation__curves.Curves.easeInCirc*/get easeInCirc() {
      return dart.const(new src__animation__curves.Cubic.new(0.6, 0.04, 0.98, 0.335));
    },
    /*src__animation__curves.Curves.easeInBack*/get easeInBack() {
      return dart.const(new src__animation__curves.Cubic.new(0.6, -0.28, 0.735, 0.045));
    },
    /*src__animation__curves.Curves.easeOut*/get easeOut() {
      return dart.const(new src__animation__curves.Cubic.new(0.0, 0.0, 0.58, 1.0));
    },
    /*src__animation__curves.Curves.linearToEaseOut*/get linearToEaseOut() {
      return dart.const(new src__animation__curves.Cubic.new(0.35, 0.91, 0.33, 0.97));
    },
    /*src__animation__curves.Curves.easeOutSine*/get easeOutSine() {
      return dart.const(new src__animation__curves.Cubic.new(0.39, 0.575, 0.565, 1.0));
    },
    /*src__animation__curves.Curves.easeOutQuad*/get easeOutQuad() {
      return dart.const(new src__animation__curves.Cubic.new(0.25, 0.46, 0.45, 0.94));
    },
    /*src__animation__curves.Curves.easeOutCubic*/get easeOutCubic() {
      return dart.const(new src__animation__curves.Cubic.new(0.215, 0.61, 0.355, 1.0));
    },
    /*src__animation__curves.Curves.easeOutQuart*/get easeOutQuart() {
      return dart.const(new src__animation__curves.Cubic.new(0.165, 0.84, 0.44, 1.0));
    },
    /*src__animation__curves.Curves.easeOutQuint*/get easeOutQuint() {
      return dart.const(new src__animation__curves.Cubic.new(0.23, 1.0, 0.32, 1.0));
    },
    /*src__animation__curves.Curves.easeOutExpo*/get easeOutExpo() {
      return dart.const(new src__animation__curves.Cubic.new(0.19, 1.0, 0.22, 1.0));
    },
    /*src__animation__curves.Curves.easeOutCirc*/get easeOutCirc() {
      return dart.const(new src__animation__curves.Cubic.new(0.075, 0.82, 0.165, 1.0));
    },
    /*src__animation__curves.Curves.easeOutBack*/get easeOutBack() {
      return dart.const(new src__animation__curves.Cubic.new(0.175, 0.885, 0.32, 1.275));
    },
    /*src__animation__curves.Curves.easeInOut*/get easeInOut() {
      return dart.const(new src__animation__curves.Cubic.new(0.42, 0.0, 0.58, 1.0));
    },
    /*src__animation__curves.Curves.easeInOutSine*/get easeInOutSine() {
      return dart.const(new src__animation__curves.Cubic.new(0.445, 0.05, 0.55, 0.95));
    },
    /*src__animation__curves.Curves.easeInOutQuad*/get easeInOutQuad() {
      return dart.const(new src__animation__curves.Cubic.new(0.455, 0.03, 0.515, 0.955));
    },
    /*src__animation__curves.Curves.easeInOutCubic*/get easeInOutCubic() {
      return dart.const(new src__animation__curves.Cubic.new(0.645, 0.045, 0.355, 1.0));
    },
    /*src__animation__curves.Curves.easeInOutQuart*/get easeInOutQuart() {
      return dart.const(new src__animation__curves.Cubic.new(0.77, 0.0, 0.175, 1.0));
    },
    /*src__animation__curves.Curves.easeInOutQuint*/get easeInOutQuint() {
      return dart.const(new src__animation__curves.Cubic.new(0.86, 0.0, 0.07, 1.0));
    },
    /*src__animation__curves.Curves.easeInOutExpo*/get easeInOutExpo() {
      return dart.const(new src__animation__curves.Cubic.new(1.0, 0.0, 0.0, 1.0));
    },
    /*src__animation__curves.Curves.easeInOutCirc*/get easeInOutCirc() {
      return dart.const(new src__animation__curves.Cubic.new(0.785, 0.135, 0.15, 0.86));
    },
    /*src__animation__curves.Curves.easeInOutBack*/get easeInOutBack() {
      return dart.const(new src__animation__curves.Cubic.new(0.68, -0.55, 0.265, 1.55));
    },
    /*src__animation__curves.Curves.fastOutSlowIn*/get fastOutSlowIn() {
      return dart.const(new src__animation__curves.Cubic.new(0.4, 0.0, 0.2, 1.0));
    },
    /*src__animation__curves.Curves.slowMiddle*/get slowMiddle() {
      return dart.const(new src__animation__curves.Cubic.new(0.15, 0.85, 0.85, 0.15));
    },
    /*src__animation__curves.Curves.bounceIn*/get bounceIn() {
      return dart.const(new src__animation__curves._BounceInCurve.__());
    },
    /*src__animation__curves.Curves.bounceOut*/get bounceOut() {
      return dart.const(new src__animation__curves._BounceOutCurve.__());
    },
    /*src__animation__curves.Curves.bounceInOut*/get bounceInOut() {
      return dart.const(new src__animation__curves._BounceInOutCurve.__());
    },
    /*src__animation__curves.Curves.elasticIn*/get elasticIn() {
      return dart.const(new src__animation__curves.ElasticInCurve.new());
    },
    /*src__animation__curves.Curves.elasticOut*/get elasticOut() {
      return dart.const(new src__animation__curves.ElasticOutCurve.new());
    },
    /*src__animation__curves.Curves.elasticInOut*/get elasticInOut() {
      return dart.const(new src__animation__curves.ElasticInOutCurve.new());
    }
  });
  src__animation__curves._bounce = function(t) {
    if (dart.notNull(t) < 1.0 / 2.75) {
      return 7.5625 * dart.notNull(t) * dart.notNull(t);
    } else if (dart.notNull(t) < 2 / 2.75) {
      t = dart.notNull(t) - 1.5 / 2.75;
      return 7.5625 * dart.notNull(t) * dart.notNull(t) + 0.75;
    } else if (dart.notNull(t) < 2.5 / 2.75) {
      t = dart.notNull(t) - 2.25 / 2.75;
      return 7.5625 * dart.notNull(t) * dart.notNull(t) + 0.9375;
    }
    t = dart.notNull(t) - 2.625 / 2.75;
    return 7.5625 * dart.notNull(t) * dart.notNull(t) + 0.984375;
  };
  const _entries = dart.privateName(src__gestures__recognizer, "_entries");
  const _trackedPointers = dart.privateName(src__gestures__recognizer, "_trackedPointers");
  const _team = dart.privateName(src__gestures__recognizer, "_team");
  const _addPointerToArena = dart.privateName(src__gestures__recognizer, "_addPointerToArena");
  const _pointerToKind = dart.privateName(src__gestures__recognizer, "_pointerToKind");
  const _kindFilter = dart.privateName(src__gestures__recognizer, "_kindFilter");
  src__gestures__arena.GestureArenaMember = class GestureArenaMember extends core.Object {};
  (src__gestures__arena.GestureArenaMember.new = function() {
    ;
  }).prototype = src__gestures__arena.GestureArenaMember.prototype;
  dart.addTypeTests(src__gestures__arena.GestureArenaMember);
  dart.setLibraryUri(src__gestures__arena.GestureArenaMember, "package:flutter_web/src/gestures/arena.dart");
  const GestureArenaMember_DiagnosticableTreeMixin$ = class GestureArenaMember_DiagnosticableTreeMixin extends src__gestures__arena.GestureArenaMember {};
  (GestureArenaMember_DiagnosticableTreeMixin$.new = function() {
  }).prototype = GestureArenaMember_DiagnosticableTreeMixin$.prototype;
  dart.applyMixin(GestureArenaMember_DiagnosticableTreeMixin$, src__foundation__diagnostics.DiagnosticableTreeMixin);
  src__gestures__recognizer.GestureRecognizer = class GestureRecognizer extends GestureArenaMember_DiagnosticableTreeMixin$ {
    get debugOwner() {
      return this[debugOwner$];
    }
    set debugOwner(value) {
      super.debugOwner = value;
    }
    addPointer(event) {
      this[_pointerToKind][$_set](event.pointer, event.kind);
      if (dart.test(this.isPointerAllowed(event))) {
        this.addAllowedPointer(event);
      } else {
        this.handleNonAllowedPointer(event);
      }
    }
    addAllowedPointer(event) {
    }
    handleNonAllowedPointer(event) {
    }
    isPointerAllowed(event) {
      return this[_kindFilter] == null || dart.equals(this[_kindFilter], event.kind);
    }
    getKindForPointer(pointer) {
      if (!dart.test(this[_pointerToKind][$containsKey](pointer))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/recognizer.dart", 141, 12, "_pointerToKind.containsKey(pointer)");
      return this[_pointerToKind][$_get](pointer);
    }
    dispose() {
    }
    invokeCallback(T, name, callback, opts) {
      let debugReport = opts && 'debugReport' in opts ? opts.debugReport : null;
      if (!(callback != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/recognizer.dart", 169, 12, "callback != null");
      let result = null;
      try {
        if (!dart.test(dart.fn(() => {
          let t11;
          if (dart.test(src__gestures__debug.debugPrintRecognizerCallbacksTrace)) {
            let report = debugReport != null ? debugReport() : null;
            let prefix = dart.test(src__gestures__debug.debugPrintGestureArenaDiagnostics) ? " "[$times](19) + "❙ " : "";
            src__foundation__print.debugPrint(prefix + dart.str(this) + " calling " + dart.str(name) + " callback." + (dart.equals((t11 = report, t11 == null ? null : t11[$isNotEmpty]), true) ? " " + dart.str(report) : ""));
          }
          return true;
        }, VoidTobool())())) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/recognizer.dart", 172, 14, "() {\n        if (debugPrintRecognizerCallbacksTrace) {\n          final String report = debugReport != null ? debugReport() : null;\n          // The 19 in the line below is the width of the prefix used by\n          // _debugLogDiagnostic in arena.dart.\n          final String prefix = debugPrintGestureArenaDiagnostics ? ' ' * 19 + '❙ ' : '';\n          debugPrint('$prefix$this calling $name callback.${ report?.isNotEmpty == true ? \" $report\" : \"\" }');\n        }\n        return true;\n      }");
        result = callback();
      } catch (e) {
        let exception = dart.getThrown(e);
        let stack = dart.stackTrace(e);
        src__foundation__assertions.FlutterError.reportError(new src__foundation__assertions.FlutterErrorDetails.new({exception: exception, stack: stack, library: "gesture", context: new src__foundation__assertions.ErrorDescription.new("while handling a gesture"), informationCollector: dart.fn(() => new (SyncIterableOfDiagnosticsNode()).new((function*() {
            yield new src__foundation__diagnostics.StringProperty.new("Handler", name);
            yield new (DiagnosticsPropertyOfGestureRecognizer()).new("Recognizer", this, {style: src__foundation__diagnostics.DiagnosticsTreeStyle.errorProperty});
          }).bind(this)), VoidToIterableOfDiagnosticsNode())}));
      }
      return result;
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (DiagnosticsPropertyOfObject()).new("debugOwner", this.debugOwner, {defaultValue: null}));
    }
  };
  (src__gestures__recognizer.GestureRecognizer.new = function(opts) {
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    let kind = opts && 'kind' in opts ? opts.kind : null;
    this[_pointerToKind] = new (IdentityMapOfint$PointerDeviceKind()).new();
    this[debugOwner$] = debugOwner;
    this[_kindFilter] = kind;
    ;
  }).prototype = src__gestures__recognizer.GestureRecognizer.prototype;
  dart.addTypeTests(src__gestures__recognizer.GestureRecognizer);
  const debugOwner$ = Symbol("GestureRecognizer.debugOwner");
  dart.setMethodSignature(src__gestures__recognizer.GestureRecognizer, () => ({
    __proto__: dart.getMethods(src__gestures__recognizer.GestureRecognizer.__proto__),
    addPointer: dart.fnType(dart.void, [src__gestures__events.PointerDownEvent]),
    addAllowedPointer: dart.fnType(dart.void, [src__gestures__events.PointerDownEvent]),
    handleNonAllowedPointer: dart.fnType(dart.void, [src__gestures__events.PointerDownEvent]),
    isPointerAllowed: dart.fnType(core.bool, [src__gestures__events.PointerDownEvent]),
    getKindForPointer: dart.fnType(ui$.PointerDeviceKind, [core.int]),
    dispose: dart.fnType(dart.void, []),
    invokeCallback: dart.gFnType(T => [T, [core.String, dart.fnType(T, [])], {debugReport: dart.fnType(core.String, [])}])
  }));
  dart.setLibraryUri(src__gestures__recognizer.GestureRecognizer, "package:flutter_web/src/gestures/recognizer.dart");
  dart.setFieldSignature(src__gestures__recognizer.GestureRecognizer, () => ({
    __proto__: dart.getFields(src__gestures__recognizer.GestureRecognizer.__proto__),
    debugOwner: dart.finalFieldType(core.Object),
    [_kindFilter]: dart.finalFieldType(ui$.PointerDeviceKind),
    [_pointerToKind]: dart.finalFieldType(core.Map$(core.int, ui$.PointerDeviceKind))
  }));
  src__gestures__recognizer.OneSequenceGestureRecognizer = class OneSequenceGestureRecognizer extends src__gestures__recognizer.GestureRecognizer {
    handleNonAllowedPointer(event) {
      this.resolve(src__gestures__arena.GestureDisposition.rejected);
    }
    acceptGesture(pointer) {
    }
    rejectGesture(pointer) {
    }
    resolve(disposition) {
      let localEntries = ListOfGestureArenaEntry().from(this[_entries][$values]);
      this[_entries][$clear]();
      for (let entry of localEntries)
        entry.resolve(disposition);
    }
    dispose() {
      this.resolve(src__gestures__arena.GestureDisposition.rejected);
      for (let pointer of this[_trackedPointers])
        src__gestures__binding.GestureBinding.instance.pointerRouter.removeRoute(pointer, dart.bind(this, 'handleEvent'));
      this[_trackedPointers].clear();
      if (!dart.test(this[_entries][$isEmpty])) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/recognizer.dart", 264, 12, "t(_entries.isEmp");
      super.dispose();
    }
    get team() {
      return this[_team];
    }
    set team(value) {
      if (!(value != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/recognizer.dart", 282, 12, "t(value != nu");
      if (!dart.test(this[_entries][$isEmpty])) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/recognizer.dart", 283, 12, "t(_entries.isEmp");
      if (!dart.test(this[_trackedPointers][$isEmpty])) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/recognizer.dart", 284, 12, "t(_trackedPointers.isEmp");
      if (!(this[_team] == null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/recognizer.dart", 285, 12, "t(_team == nu");
      this[_team] = value;
    }
    [_addPointerToArena](pointer) {
      if (this[_team] != null) return this[_team].add(pointer, this);
      return src__gestures__binding.GestureBinding.instance.gestureArena.add(pointer, this);
    }
    startTrackingPointer(pointer, transform) {
      if (transform === void 0) transform = null;
      src__gestures__binding.GestureBinding.instance.pointerRouter.addRoute(pointer, dart.bind(this, 'handleEvent'), transform);
      this[_trackedPointers].add(pointer);
      if (!!dart.test(this[_entries][$containsValue](pointer))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/recognizer.dart", 308, 12, "t(!_entries.containsValue(pointe");
      this[_entries][$_set](pointer, this[_addPointerToArena](pointer));
    }
    stopTrackingPointer(pointer) {
      if (dart.test(this[_trackedPointers].contains(pointer))) {
        src__gestures__binding.GestureBinding.instance.pointerRouter.removeRoute(pointer, dart.bind(this, 'handleEvent'));
        this[_trackedPointers].remove(pointer);
        if (dart.test(this[_trackedPointers][$isEmpty])) this.didStopTrackingLastPointer(pointer);
      }
    }
    stopTrackingIfPointerNoLongerDown(event) {
      if (src__gestures__events.PointerUpEvent.is(event) || src__gestures__events.PointerCancelEvent.is(event)) this.stopTrackingPointer(event.pointer);
    }
  };
  (src__gestures__recognizer.OneSequenceGestureRecognizer.new = function(opts) {
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    let kind = opts && 'kind' in opts ? opts.kind : null;
    this[_entries] = new (IdentityMapOfint$GestureArenaEntry()).new();
    this[_trackedPointers] = new (_IdentityHashSetOfint()).new();
    this[_team] = null;
    src__gestures__recognizer.OneSequenceGestureRecognizer.__proto__.new.call(this, {debugOwner: debugOwner, kind: kind});
    ;
  }).prototype = src__gestures__recognizer.OneSequenceGestureRecognizer.prototype;
  dart.addTypeTests(src__gestures__recognizer.OneSequenceGestureRecognizer);
  dart.setMethodSignature(src__gestures__recognizer.OneSequenceGestureRecognizer, () => ({
    __proto__: dart.getMethods(src__gestures__recognizer.OneSequenceGestureRecognizer.__proto__),
    acceptGesture: dart.fnType(dart.void, [core.int]),
    rejectGesture: dart.fnType(dart.void, [core.int]),
    resolve: dart.fnType(dart.void, [src__gestures__arena.GestureDisposition]),
    [_addPointerToArena]: dart.fnType(src__gestures__arena.GestureArenaEntry, [core.int]),
    startTrackingPointer: dart.fnType(dart.void, [core.int], [vector_math_64$.Matrix4]),
    stopTrackingPointer: dart.fnType(dart.void, [core.int]),
    stopTrackingIfPointerNoLongerDown: dart.fnType(dart.void, [src__gestures__events.PointerEvent])
  }));
  dart.setGetterSignature(src__gestures__recognizer.OneSequenceGestureRecognizer, () => ({
    __proto__: dart.getGetters(src__gestures__recognizer.OneSequenceGestureRecognizer.__proto__),
    team: src__gestures__team.GestureArenaTeam
  }));
  dart.setSetterSignature(src__gestures__recognizer.OneSequenceGestureRecognizer, () => ({
    __proto__: dart.getSetters(src__gestures__recognizer.OneSequenceGestureRecognizer.__proto__),
    team: src__gestures__team.GestureArenaTeam
  }));
  dart.setLibraryUri(src__gestures__recognizer.OneSequenceGestureRecognizer, "package:flutter_web/src/gestures/recognizer.dart");
  dart.setFieldSignature(src__gestures__recognizer.OneSequenceGestureRecognizer, () => ({
    __proto__: dart.getFields(src__gestures__recognizer.OneSequenceGestureRecognizer.__proto__),
    [_entries]: dart.finalFieldType(core.Map$(core.int, src__gestures__arena.GestureArenaEntry)),
    [_trackedPointers]: dart.finalFieldType(core.Set$(core.int)),
    [_team]: dart.fieldType(src__gestures__team.GestureArenaTeam)
  }));
  src__gestures__eager.EagerGestureRecognizer = class EagerGestureRecognizer extends src__gestures__recognizer.OneSequenceGestureRecognizer {
    addAllowedPointer(event) {
      this.startTrackingPointer(event.pointer, event.transform);
      this.resolve(src__gestures__arena.GestureDisposition.accepted);
      this.stopTrackingPointer(event.pointer);
    }
    get debugDescription() {
      return "eager";
    }
    didStopTrackingLastPointer(pointer) {
    }
    handleEvent(event) {
    }
  };
  (src__gestures__eager.EagerGestureRecognizer.new = function(opts) {
    let kind = opts && 'kind' in opts ? opts.kind : null;
    src__gestures__eager.EagerGestureRecognizer.__proto__.new.call(this, {kind: kind});
    ;
  }).prototype = src__gestures__eager.EagerGestureRecognizer.prototype;
  dart.addTypeTests(src__gestures__eager.EagerGestureRecognizer);
  dart.setMethodSignature(src__gestures__eager.EagerGestureRecognizer, () => ({
    __proto__: dart.getMethods(src__gestures__eager.EagerGestureRecognizer.__proto__),
    didStopTrackingLastPointer: dart.fnType(dart.void, [core.int]),
    handleEvent: dart.fnType(dart.void, [src__gestures__events.PointerEvent])
  }));
  dart.setGetterSignature(src__gestures__eager.EagerGestureRecognizer, () => ({
    __proto__: dart.getGetters(src__gestures__eager.EagerGestureRecognizer.__proto__),
    debugDescription: core.String
  }));
  dart.setLibraryUri(src__gestures__eager.EagerGestureRecognizer, "package:flutter_web/src/gestures/eager.dart");
  const _name$3 = dart.privateName(src__gestures__recognizer, "_name");
  src__gestures__recognizer.DragStartBehavior = class DragStartBehavior extends core.Object {
    toString() {
      return this[_name$3];
    }
  };
  (src__gestures__recognizer.DragStartBehavior.new = function(index, _name) {
    this.index = index;
    this[_name$3] = _name;
    ;
  }).prototype = src__gestures__recognizer.DragStartBehavior.prototype;
  dart.addTypeTests(src__gestures__recognizer.DragStartBehavior);
  dart.setLibraryUri(src__gestures__recognizer.DragStartBehavior, "package:flutter_web/src/gestures/recognizer.dart");
  dart.setFieldSignature(src__gestures__recognizer.DragStartBehavior, () => ({
    __proto__: dart.getFields(src__gestures__recognizer.DragStartBehavior.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$3]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(src__gestures__recognizer.DragStartBehavior, ['toString']);
  src__gestures__recognizer.DragStartBehavior.down = dart.const(new src__gestures__recognizer.DragStartBehavior.new(0, "DragStartBehavior.down"));
  src__gestures__recognizer.DragStartBehavior.start = dart.const(new src__gestures__recognizer.DragStartBehavior.new(1, "DragStartBehavior.start"));
  src__gestures__recognizer.DragStartBehavior.values = dart.constList([src__gestures__recognizer.DragStartBehavior.down, src__gestures__recognizer.DragStartBehavior.start], src__gestures__recognizer.DragStartBehavior);
  src__gestures__recognizer.GestureRecognizerState = class GestureRecognizerState extends core.Object {
    toString() {
      return this[_name$3];
    }
  };
  (src__gestures__recognizer.GestureRecognizerState.new = function(index, _name) {
    this.index = index;
    this[_name$3] = _name;
    ;
  }).prototype = src__gestures__recognizer.GestureRecognizerState.prototype;
  dart.addTypeTests(src__gestures__recognizer.GestureRecognizerState);
  dart.setLibraryUri(src__gestures__recognizer.GestureRecognizerState, "package:flutter_web/src/gestures/recognizer.dart");
  dart.setFieldSignature(src__gestures__recognizer.GestureRecognizerState, () => ({
    __proto__: dart.getFields(src__gestures__recognizer.GestureRecognizerState.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$3]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(src__gestures__recognizer.GestureRecognizerState, ['toString']);
  src__gestures__recognizer.GestureRecognizerState.ready = dart.const(new src__gestures__recognizer.GestureRecognizerState.new(0, "GestureRecognizerState.ready"));
  src__gestures__recognizer.GestureRecognizerState.possible = dart.const(new src__gestures__recognizer.GestureRecognizerState.new(1, "GestureRecognizerState.possible"));
  src__gestures__recognizer.GestureRecognizerState.defunct = dart.const(new src__gestures__recognizer.GestureRecognizerState.new(2, "GestureRecognizerState.defunct"));
  src__gestures__recognizer.GestureRecognizerState.values = dart.constList([src__gestures__recognizer.GestureRecognizerState.ready, src__gestures__recognizer.GestureRecognizerState.possible, src__gestures__recognizer.GestureRecognizerState.defunct], src__gestures__recognizer.GestureRecognizerState);
  const _gestureAccepted = dart.privateName(src__gestures__recognizer, "_gestureAccepted");
  const _timer = dart.privateName(src__gestures__recognizer, "_timer");
  const _getGlobalDistance = dart.privateName(src__gestures__recognizer, "_getGlobalDistance");
  const _stopTimer = dart.privateName(src__gestures__recognizer, "_stopTimer");
  src__gestures__recognizer.PrimaryPointerGestureRecognizer = class PrimaryPointerGestureRecognizer extends src__gestures__recognizer.OneSequenceGestureRecognizer {
    get deadline() {
      return this[deadline$];
    }
    set deadline(value) {
      super.deadline = value;
    }
    get preAcceptSlopTolerance() {
      return this[preAcceptSlopTolerance$];
    }
    set preAcceptSlopTolerance(value) {
      super.preAcceptSlopTolerance = value;
    }
    get postAcceptSlopTolerance() {
      return this[postAcceptSlopTolerance$];
    }
    set postAcceptSlopTolerance(value) {
      super.postAcceptSlopTolerance = value;
    }
    get state() {
      return this[state];
    }
    set state(value) {
      this[state] = value;
    }
    get primaryPointer() {
      return this[primaryPointer];
    }
    set primaryPointer(value) {
      this[primaryPointer] = value;
    }
    get initialPosition() {
      return this[initialPosition];
    }
    set initialPosition(value) {
      this[initialPosition] = value;
    }
    addAllowedPointer(event) {
      this.startTrackingPointer(event.pointer, event.transform);
      if (dart.equals(this.state, src__gestures__recognizer.GestureRecognizerState.ready)) {
        this.state = src__gestures__recognizer.GestureRecognizerState.possible;
        this.primaryPointer = event.pointer;
        this.initialPosition = new src__gestures__recognizer.OffsetPair.new({local: event.localPosition, global: event.position});
        if (this.deadline != null) this[_timer] = async.Timer.new(this.deadline, dart.fn(() => this.didExceedDeadlineWithEvent(event), VoidTovoid()));
      }
    }
    handleEvent(event) {
      if (!!dart.equals(this.state, src__gestures__recognizer.GestureRecognizerState.ready)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/recognizer.dart", 440, 12, "t(state != GestureRecognizerState.rea");
      if (dart.equals(this.state, src__gestures__recognizer.GestureRecognizerState.possible) && event.pointer == this.primaryPointer) {
        let isPreAcceptSlopPastTolerance = !dart.test(this[_gestureAccepted]) && this.preAcceptSlopTolerance != null && dart.notNull(this[_getGlobalDistance](event)) > dart.notNull(this.preAcceptSlopTolerance);
        let isPostAcceptSlopPastTolerance = dart.test(this[_gestureAccepted]) && this.postAcceptSlopTolerance != null && dart.notNull(this[_getGlobalDistance](event)) > dart.notNull(this.postAcceptSlopTolerance);
        if (src__gestures__events.PointerMoveEvent.is(event) && (isPreAcceptSlopPastTolerance || isPostAcceptSlopPastTolerance)) {
          this.resolve(src__gestures__arena.GestureDisposition.rejected);
          this.stopTrackingPointer(this.primaryPointer);
        } else {
          this.handlePrimaryPointer(event);
        }
      }
      this.stopTrackingIfPointerNoLongerDown(event);
    }
    didExceedDeadline() {
      if (!(this.deadline == null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/recognizer.dart", 471, 12, "t(deadline == nu");
    }
    didExceedDeadlineWithEvent(event) {
      this.didExceedDeadline();
    }
    acceptGesture(pointer) {
      this[_gestureAccepted] = true;
    }
    rejectGesture(pointer) {
      if (pointer == this.primaryPointer && dart.equals(this.state, src__gestures__recognizer.GestureRecognizerState.possible)) {
        this[_stopTimer]();
        this.state = src__gestures__recognizer.GestureRecognizerState.defunct;
      }
    }
    didStopTrackingLastPointer(pointer) {
      if (!!dart.equals(this.state, src__gestures__recognizer.GestureRecognizerState.ready)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/recognizer.dart", 499, 12, "t(state != GestureRecognizerState.rea");
      this[_stopTimer]();
      this.state = src__gestures__recognizer.GestureRecognizerState.ready;
    }
    dispose() {
      this[_stopTimer]();
      super.dispose();
    }
    [_stopTimer]() {
      if (this[_timer] != null) {
        this[_timer].cancel();
        this[_timer] = null;
      }
    }
    [_getGlobalDistance](event) {
      let offset = event.position['-'](this.initialPosition.global);
      return offset.distance;
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (EnumPropertyOfGestureRecognizerState()).new("state", this.state));
    }
  };
  (src__gestures__recognizer.PrimaryPointerGestureRecognizer.new = function(opts) {
    let deadline = opts && 'deadline' in opts ? opts.deadline : null;
    let preAcceptSlopTolerance = opts && 'preAcceptSlopTolerance' in opts ? opts.preAcceptSlopTolerance : src__gestures__constants.kTouchSlop;
    let postAcceptSlopTolerance = opts && 'postAcceptSlopTolerance' in opts ? opts.postAcceptSlopTolerance : src__gestures__constants.kTouchSlop;
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    let kind = opts && 'kind' in opts ? opts.kind : null;
    this[state] = src__gestures__recognizer.GestureRecognizerState.ready;
    this[primaryPointer] = null;
    this[initialPosition] = null;
    this[_gestureAccepted] = false;
    this[_timer] = null;
    this[deadline$] = deadline;
    this[preAcceptSlopTolerance$] = preAcceptSlopTolerance;
    this[postAcceptSlopTolerance$] = postAcceptSlopTolerance;
    if (!(preAcceptSlopTolerance == null || dart.notNull(preAcceptSlopTolerance) >= 0)) dart.assertFailed("The preAcceptSlopTolerance must be positive or null", "org-dartlang-app:///packages/flutter_web/src/gestures/recognizer.dart", 378, 10, "  preAcceptSlopTolerance == null || preAcceptSlopTolerance >=");
    if (!(postAcceptSlopTolerance == null || dart.notNull(postAcceptSlopTolerance) >= 0)) dart.assertFailed("The postAcceptSlopTolerance must be positive or null", "org-dartlang-app:///packages/flutter_web/src/gestures/recognizer.dart", 382, 10, "  postAcceptSlopTolerance == null || postAcceptSlopTolerance >=");
    src__gestures__recognizer.PrimaryPointerGestureRecognizer.__proto__.new.call(this, {debugOwner: debugOwner, kind: kind});
    ;
  }).prototype = src__gestures__recognizer.PrimaryPointerGestureRecognizer.prototype;
  dart.addTypeTests(src__gestures__recognizer.PrimaryPointerGestureRecognizer);
  const deadline$ = Symbol("PrimaryPointerGestureRecognizer.deadline");
  const preAcceptSlopTolerance$ = Symbol("PrimaryPointerGestureRecognizer.preAcceptSlopTolerance");
  const postAcceptSlopTolerance$ = Symbol("PrimaryPointerGestureRecognizer.postAcceptSlopTolerance");
  const state = Symbol("PrimaryPointerGestureRecognizer.state");
  const primaryPointer = Symbol("PrimaryPointerGestureRecognizer.primaryPointer");
  const initialPosition = Symbol("PrimaryPointerGestureRecognizer.initialPosition");
  dart.setMethodSignature(src__gestures__recognizer.PrimaryPointerGestureRecognizer, () => ({
    __proto__: dart.getMethods(src__gestures__recognizer.PrimaryPointerGestureRecognizer.__proto__),
    handleEvent: dart.fnType(dart.void, [src__gestures__events.PointerEvent]),
    didExceedDeadline: dart.fnType(dart.void, []),
    didExceedDeadlineWithEvent: dart.fnType(dart.void, [src__gestures__events.PointerDownEvent]),
    didStopTrackingLastPointer: dart.fnType(dart.void, [core.int]),
    [_stopTimer]: dart.fnType(dart.void, []),
    [_getGlobalDistance]: dart.fnType(core.double, [src__gestures__events.PointerEvent])
  }));
  dart.setLibraryUri(src__gestures__recognizer.PrimaryPointerGestureRecognizer, "package:flutter_web/src/gestures/recognizer.dart");
  dart.setFieldSignature(src__gestures__recognizer.PrimaryPointerGestureRecognizer, () => ({
    __proto__: dart.getFields(src__gestures__recognizer.PrimaryPointerGestureRecognizer.__proto__),
    deadline: dart.finalFieldType(core.Duration),
    preAcceptSlopTolerance: dart.finalFieldType(core.double),
    postAcceptSlopTolerance: dart.finalFieldType(core.double),
    state: dart.fieldType(src__gestures__recognizer.GestureRecognizerState),
    primaryPointer: dart.fieldType(core.int),
    initialPosition: dart.fieldType(src__gestures__recognizer.OffsetPair),
    [_gestureAccepted]: dart.fieldType(core.bool),
    [_timer]: dart.fieldType(async.Timer)
  }));
  src__gestures__recognizer.OffsetPair = class OffsetPair extends core.Object {
    get local() {
      return this[local$];
    }
    set local(value) {
      super.local = value;
    }
    get global() {
      return this[global$];
    }
    set global(value) {
      super.global = value;
    }
    static fromEventPosition(event) {
      return new src__gestures__recognizer.OffsetPair.new({local: event.localPosition, global: event.position});
    }
    static fromEventDelta(event) {
      return new src__gestures__recognizer.OffsetPair.new({local: event.localDelta, global: event.delta});
    }
    ['+'](other) {
      return new src__gestures__recognizer.OffsetPair.new({local: this.local['+'](other.local), global: this.global['+'](other.global)});
    }
    ['-'](other) {
      return new src__gestures__recognizer.OffsetPair.new({local: this.local['-'](other.local), global: this.global['-'](other.global)});
    }
    toString() {
      return dart.str(this[$runtimeType]) + "(local: " + dart.str(this.local) + ", global: " + dart.str(this.global) + ")";
    }
  };
  (src__gestures__recognizer.OffsetPair.new = function(opts) {
    let local = opts && 'local' in opts ? opts.local : null;
    let global = opts && 'global' in opts ? opts.global : null;
    this[local$] = local;
    this[global$] = global;
    ;
  }).prototype = src__gestures__recognizer.OffsetPair.prototype;
  dart.addTypeTests(src__gestures__recognizer.OffsetPair);
  const local$ = Symbol("OffsetPair.local");
  const global$ = Symbol("OffsetPair.global");
  dart.setMethodSignature(src__gestures__recognizer.OffsetPair, () => ({
    __proto__: dart.getMethods(src__gestures__recognizer.OffsetPair.__proto__),
    '+': dart.fnType(src__gestures__recognizer.OffsetPair, [src__gestures__recognizer.OffsetPair]),
    '-': dart.fnType(src__gestures__recognizer.OffsetPair, [src__gestures__recognizer.OffsetPair])
  }));
  dart.setLibraryUri(src__gestures__recognizer.OffsetPair, "package:flutter_web/src/gestures/recognizer.dart");
  dart.setFieldSignature(src__gestures__recognizer.OffsetPair, () => ({
    __proto__: dart.getFields(src__gestures__recognizer.OffsetPair.__proto__),
    local: dart.finalFieldType(ui$.Offset),
    global: dart.finalFieldType(ui$.Offset)
  }));
  dart.defineExtensionMethods(src__gestures__recognizer.OffsetPair, ['toString']);
  dart.defineLazy(src__gestures__recognizer.OffsetPair, {
    /*src__gestures__recognizer.OffsetPair.zero*/get zero() {
      return dart.const(new src__gestures__recognizer.OffsetPair.new({local: ui$.Offset.zero, global: ui$.Offset.zero}));
    }
  });
  const _routeMap = dart.privateName(src__gestures__pointer_router, "_routeMap");
  const _globalRoutes = dart.privateName(src__gestures__pointer_router, "_globalRoutes");
  const _dispatch = dart.privateName(src__gestures__pointer_router, "_dispatch");
  src__gestures__pointer_router.PointerRouter = class PointerRouter extends core.Object {
    addRoute(pointer, route, transform) {
      if (transform === void 0) transform = null;
      let routes = this[_routeMap][$putIfAbsent](pointer, dart.fn(() => new (_HashSetOf_RouteEntry()).new(), VoidToLinkedHashSetOf_RouteEntry()));
      if (!!dart.test(routes[$any](src__gestures__pointer_router._RouteEntry.isRoutePredicate(route)))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/pointer_router.dart", 29, 12, "!routes.any(_RouteEntry.isRoutePredicate(route))");
      routes.add(new src__gestures__pointer_router._RouteEntry.new({route: route, transform: transform}));
    }
    removeRoute(pointer, route) {
      if (!dart.test(this[_routeMap][$containsKey](pointer))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/pointer_router.dart", 41, 12, "_routeMap.containsKey(pointer)");
      let routes = this[_routeMap][$_get](pointer);
      if (!dart.test(routes[$any](src__gestures__pointer_router._RouteEntry.isRoutePredicate(route)))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/pointer_router.dart", 43, 12, "routes.any(_RouteEntry.isRoutePredicate(route))");
      routes.removeWhere(src__gestures__pointer_router._RouteEntry.isRoutePredicate(route));
      if (dart.test(routes[$isEmpty])) this[_routeMap][$remove](pointer);
    }
    addGlobalRoute(route, transform) {
      if (transform === void 0) transform = null;
      if (!!dart.test(this[_globalRoutes][$any](src__gestures__pointer_router._RouteEntry.isRoutePredicate(route)))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/pointer_router.dart", 56, 12, "!_globalRoutes.any(_RouteEntry.isRoutePredicate(route))");
      this[_globalRoutes].add(new src__gestures__pointer_router._RouteEntry.new({route: route, transform: transform}));
    }
    removeGlobalRoute(route) {
      if (!dart.test(this[_globalRoutes][$any](src__gestures__pointer_router._RouteEntry.isRoutePredicate(route)))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/pointer_router.dart", 68, 12, "_globalRoutes.any(_RouteEntry.isRoutePredicate(route))");
      this[_globalRoutes].removeWhere(src__gestures__pointer_router._RouteEntry.isRoutePredicate(route));
    }
    [_dispatch](event, entry) {
      try {
        event = event.transformed(entry.transform);
        entry.route(event);
      } catch (e) {
        let exception = dart.getThrown(e);
        let stack = dart.stackTrace(e);
        src__foundation__assertions.FlutterError.reportError(new src__gestures__pointer_router.FlutterErrorDetailsForPointerRouter.new({exception: exception, stack: stack, library: "gesture library", context: new src__foundation__assertions.ErrorDescription.new("while routing a pointer event"), router: this, route: entry.route, event: event, informationCollector: dart.fn(() => new (SyncIterableOfDiagnosticsPropertyOfPointerEvent()).new(function*() {
            yield new (DiagnosticsPropertyOfPointerEvent()).new("Event", event, {style: src__foundation__diagnostics.DiagnosticsTreeStyle.errorProperty});
          }), VoidToIterableOfDiagnosticsPropertyOfPointerEvent())}));
      }
    }
    route(event) {
      let routes = this[_routeMap][$_get](event.pointer);
      let globalRoutes = ListOf_RouteEntry().from(this[_globalRoutes]);
      if (routes != null) {
        for (let entry of ListOf_RouteEntry().from(routes)) {
          if (dart.test(routes[$any](src__gestures__pointer_router._RouteEntry.isRoutePredicate(entry.route)))) this[_dispatch](event, entry);
        }
      }
      for (let entry of globalRoutes) {
        if (dart.test(this[_globalRoutes][$any](src__gestures__pointer_router._RouteEntry.isRoutePredicate(entry.route)))) this[_dispatch](event, entry);
      }
    }
  };
  (src__gestures__pointer_router.PointerRouter.new = function() {
    this[_routeMap] = new (IdentityMapOfint$LinkedHashSetOf_RouteEntry()).new();
    this[_globalRoutes] = new (_HashSetOf_RouteEntry()).new();
    ;
  }).prototype = src__gestures__pointer_router.PointerRouter.prototype;
  dart.addTypeTests(src__gestures__pointer_router.PointerRouter);
  dart.setMethodSignature(src__gestures__pointer_router.PointerRouter, () => ({
    __proto__: dart.getMethods(src__gestures__pointer_router.PointerRouter.__proto__),
    addRoute: dart.fnType(dart.void, [core.int, dart.fnType(dart.void, [src__gestures__events.PointerEvent])], [vector_math_64$.Matrix4]),
    removeRoute: dart.fnType(dart.void, [core.int, dart.fnType(dart.void, [src__gestures__events.PointerEvent])]),
    addGlobalRoute: dart.fnType(dart.void, [dart.fnType(dart.void, [src__gestures__events.PointerEvent])], [vector_math_64$.Matrix4]),
    removeGlobalRoute: dart.fnType(dart.void, [dart.fnType(dart.void, [src__gestures__events.PointerEvent])]),
    [_dispatch]: dart.fnType(dart.void, [src__gestures__events.PointerEvent, src__gestures__pointer_router._RouteEntry]),
    route: dart.fnType(dart.void, [src__gestures__events.PointerEvent])
  }));
  dart.setLibraryUri(src__gestures__pointer_router.PointerRouter, "package:flutter_web/src/gestures/pointer_router.dart");
  dart.setFieldSignature(src__gestures__pointer_router.PointerRouter, () => ({
    __proto__: dart.getFields(src__gestures__pointer_router.PointerRouter.__proto__),
    [_routeMap]: dart.finalFieldType(core.Map$(core.int, collection.LinkedHashSet$(src__gestures__pointer_router._RouteEntry))),
    [_globalRoutes]: dart.finalFieldType(collection.LinkedHashSet$(src__gestures__pointer_router._RouteEntry))
  }));
  src__gestures__pointer_router.FlutterErrorDetailsForPointerRouter = class FlutterErrorDetailsForPointerRouter extends src__foundation__assertions.FlutterErrorDetails {
    get router() {
      return this[router$];
    }
    set router(value) {
      super.router = value;
    }
    get route() {
      return this[route$];
    }
    set route(value) {
      super.route = value;
    }
    get event() {
      return this[event$];
    }
    set event(value) {
      super.event = value;
    }
  };
  (src__gestures__pointer_router.FlutterErrorDetailsForPointerRouter.new = function(opts) {
    let exception = opts && 'exception' in opts ? opts.exception : null;
    let stack = opts && 'stack' in opts ? opts.stack : null;
    let library = opts && 'library' in opts ? opts.library : null;
    let context = opts && 'context' in opts ? opts.context : null;
    let router = opts && 'router' in opts ? opts.router : null;
    let route = opts && 'route' in opts ? opts.route : null;
    let event = opts && 'event' in opts ? opts.event : null;
    let informationCollector = opts && 'informationCollector' in opts ? opts.informationCollector : null;
    let silent = opts && 'silent' in opts ? opts.silent : false;
    this[router$] = router;
    this[route$] = route;
    this[event$] = event;
    src__gestures__pointer_router.FlutterErrorDetailsForPointerRouter.__proto__.new.call(this, {exception: exception, stack: stack, library: library, context: context, informationCollector: informationCollector, silent: silent});
    ;
  }).prototype = src__gestures__pointer_router.FlutterErrorDetailsForPointerRouter.prototype;
  dart.addTypeTests(src__gestures__pointer_router.FlutterErrorDetailsForPointerRouter);
  const router$ = Symbol("FlutterErrorDetailsForPointerRouter.router");
  const route$ = Symbol("FlutterErrorDetailsForPointerRouter.route");
  const event$ = Symbol("FlutterErrorDetailsForPointerRouter.event");
  dart.setLibraryUri(src__gestures__pointer_router.FlutterErrorDetailsForPointerRouter, "package:flutter_web/src/gestures/pointer_router.dart");
  dart.setFieldSignature(src__gestures__pointer_router.FlutterErrorDetailsForPointerRouter, () => ({
    __proto__: dart.getFields(src__gestures__pointer_router.FlutterErrorDetailsForPointerRouter.__proto__),
    router: dart.finalFieldType(src__gestures__pointer_router.PointerRouter),
    route: dart.finalFieldType(dart.fnType(dart.void, [src__gestures__events.PointerEvent])),
    event: dart.finalFieldType(src__gestures__events.PointerEvent)
  }));
  src__gestures__pointer_router._RouteEntry = class _RouteEntry extends core.Object {
    static isRoutePredicate(route) {
      return dart.fn(entry => dart.equals(entry.route, route), _RouteEntryTobool());
    }
  };
  (src__gestures__pointer_router._RouteEntry.new = function(opts) {
    let route = opts && 'route' in opts ? opts.route : null;
    let transform = opts && 'transform' in opts ? opts.transform : null;
    this.route = route;
    this.transform = transform;
    ;
  }).prototype = src__gestures__pointer_router._RouteEntry.prototype;
  dart.addTypeTests(src__gestures__pointer_router._RouteEntry);
  dart.setLibraryUri(src__gestures__pointer_router._RouteEntry, "package:flutter_web/src/gestures/pointer_router.dart");
  dart.setFieldSignature(src__gestures__pointer_router._RouteEntry, () => ({
    __proto__: dart.getFields(src__gestures__pointer_router._RouteEntry.__proto__),
    route: dart.finalFieldType(dart.fnType(dart.void, [src__gestures__events.PointerEvent])),
    transform: dart.finalFieldType(vector_math_64$.Matrix4)
  }));
  src__gestures__events.PointerEvent = class PointerEvent extends src__foundation__diagnostics.Diagnosticable {
    get timeStamp() {
      return this[timeStamp$];
    }
    set timeStamp(value) {
      super.timeStamp = value;
    }
    get pointer() {
      return this[pointer$];
    }
    set pointer(value) {
      super.pointer = value;
    }
    get kind() {
      return this[kind$];
    }
    set kind(value) {
      super.kind = value;
    }
    get device() {
      return this[device$];
    }
    set device(value) {
      super.device = value;
    }
    get position() {
      return this[position$];
    }
    set position(value) {
      super.position = value;
    }
    get localPosition() {
      return this[localPosition$];
    }
    set localPosition(value) {
      super.localPosition = value;
    }
    get delta() {
      return this[delta$];
    }
    set delta(value) {
      super.delta = value;
    }
    get localDelta() {
      return this[localDelta$];
    }
    set localDelta(value) {
      super.localDelta = value;
    }
    get buttons() {
      return this[buttons$];
    }
    set buttons(value) {
      super.buttons = value;
    }
    get down() {
      return this[down$];
    }
    set down(value) {
      super.down = value;
    }
    get obscured() {
      return this[obscured$];
    }
    set obscured(value) {
      super.obscured = value;
    }
    get pressure() {
      return this[pressure$];
    }
    set pressure(value) {
      super.pressure = value;
    }
    get pressureMin() {
      return this[pressureMin$];
    }
    set pressureMin(value) {
      super.pressureMin = value;
    }
    get pressureMax() {
      return this[pressureMax$];
    }
    set pressureMax(value) {
      super.pressureMax = value;
    }
    get distance() {
      return this[distance$];
    }
    set distance(value) {
      super.distance = value;
    }
    get distanceMax() {
      return this[distanceMax$];
    }
    set distanceMax(value) {
      super.distanceMax = value;
    }
    get size() {
      return this[size$];
    }
    set size(value) {
      super.size = value;
    }
    get radiusMajor() {
      return this[radiusMajor$];
    }
    set radiusMajor(value) {
      super.radiusMajor = value;
    }
    get radiusMinor() {
      return this[radiusMinor$];
    }
    set radiusMinor(value) {
      super.radiusMinor = value;
    }
    get radiusMin() {
      return this[radiusMin$];
    }
    set radiusMin(value) {
      super.radiusMin = value;
    }
    get radiusMax() {
      return this[radiusMax$];
    }
    set radiusMax(value) {
      super.radiusMax = value;
    }
    get orientation() {
      return this[orientation$];
    }
    set orientation(value) {
      super.orientation = value;
    }
    get tilt() {
      return this[tilt$];
    }
    set tilt(value) {
      super.tilt = value;
    }
    get platformData() {
      return this[platformData$];
    }
    set platformData(value) {
      super.platformData = value;
    }
    get synthesized() {
      return this[synthesized$];
    }
    set synthesized(value) {
      super.synthesized = value;
    }
    get transform() {
      return this[transform$];
    }
    set transform(value) {
      super.transform = value;
    }
    get original() {
      return this[original$];
    }
    set original(value) {
      super.original = value;
    }
    get distanceMin() {
      return 0.0;
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (DiagnosticsPropertyOfOffset()).new("position", this.position));
      properties.add(new (DiagnosticsPropertyOfOffset()).new("localPosition", this.localPosition, {defaultValue: this.position, level: src__foundation__diagnostics.DiagnosticLevel.debug}));
      properties.add(new (DiagnosticsPropertyOfOffset()).new("delta", this.delta, {defaultValue: ui$.Offset.zero, level: src__foundation__diagnostics.DiagnosticLevel.debug}));
      properties.add(new (DiagnosticsPropertyOfOffset()).new("localDelta", this.localDelta, {defaultValue: this.delta, level: src__foundation__diagnostics.DiagnosticLevel.debug}));
      properties.add(new (DiagnosticsPropertyOfDuration()).new("timeStamp", this.timeStamp, {defaultValue: core.Duration.zero, level: src__foundation__diagnostics.DiagnosticLevel.debug}));
      properties.add(new src__foundation__diagnostics.IntProperty.new("pointer", this.pointer, {level: src__foundation__diagnostics.DiagnosticLevel.debug}));
      properties.add(new (EnumPropertyOfPointerDeviceKind()).new("kind", this.kind, {level: src__foundation__diagnostics.DiagnosticLevel.debug}));
      properties.add(new src__foundation__diagnostics.IntProperty.new("device", this.device, {defaultValue: 0, level: src__foundation__diagnostics.DiagnosticLevel.debug}));
      properties.add(new src__foundation__diagnostics.IntProperty.new("buttons", this.buttons, {defaultValue: 0, level: src__foundation__diagnostics.DiagnosticLevel.debug}));
      properties.add(new (DiagnosticsPropertyOfbool()).new("down", this.down, {level: src__foundation__diagnostics.DiagnosticLevel.debug}));
      properties.add(new src__foundation__diagnostics.DoubleProperty.new("pressure", this.pressure, {defaultValue: 1.0, level: src__foundation__diagnostics.DiagnosticLevel.debug}));
      properties.add(new src__foundation__diagnostics.DoubleProperty.new("pressureMin", this.pressureMin, {defaultValue: 1.0, level: src__foundation__diagnostics.DiagnosticLevel.debug}));
      properties.add(new src__foundation__diagnostics.DoubleProperty.new("pressureMax", this.pressureMax, {defaultValue: 1.0, level: src__foundation__diagnostics.DiagnosticLevel.debug}));
      properties.add(new src__foundation__diagnostics.DoubleProperty.new("distance", this.distance, {defaultValue: 0.0, level: src__foundation__diagnostics.DiagnosticLevel.debug}));
      properties.add(new src__foundation__diagnostics.DoubleProperty.new("distanceMin", this.distanceMin, {defaultValue: 0.0, level: src__foundation__diagnostics.DiagnosticLevel.debug}));
      properties.add(new src__foundation__diagnostics.DoubleProperty.new("distanceMax", this.distanceMax, {defaultValue: 0.0, level: src__foundation__diagnostics.DiagnosticLevel.debug}));
      properties.add(new src__foundation__diagnostics.DoubleProperty.new("size", this.size, {defaultValue: 0.0, level: src__foundation__diagnostics.DiagnosticLevel.debug}));
      properties.add(new src__foundation__diagnostics.DoubleProperty.new("radiusMajor", this.radiusMajor, {defaultValue: 0.0, level: src__foundation__diagnostics.DiagnosticLevel.debug}));
      properties.add(new src__foundation__diagnostics.DoubleProperty.new("radiusMinor", this.radiusMinor, {defaultValue: 0.0, level: src__foundation__diagnostics.DiagnosticLevel.debug}));
      properties.add(new src__foundation__diagnostics.DoubleProperty.new("radiusMin", this.radiusMin, {defaultValue: 0.0, level: src__foundation__diagnostics.DiagnosticLevel.debug}));
      properties.add(new src__foundation__diagnostics.DoubleProperty.new("radiusMax", this.radiusMax, {defaultValue: 0.0, level: src__foundation__diagnostics.DiagnosticLevel.debug}));
      properties.add(new src__foundation__diagnostics.DoubleProperty.new("orientation", this.orientation, {defaultValue: 0.0, level: src__foundation__diagnostics.DiagnosticLevel.debug}));
      properties.add(new src__foundation__diagnostics.DoubleProperty.new("tilt", this.tilt, {defaultValue: 0.0, level: src__foundation__diagnostics.DiagnosticLevel.debug}));
      properties.add(new src__foundation__diagnostics.IntProperty.new("platformData", this.platformData, {defaultValue: 0, level: src__foundation__diagnostics.DiagnosticLevel.debug}));
      properties.add(new src__foundation__diagnostics.FlagProperty.new("obscured", {value: this.obscured, ifTrue: "obscured", level: src__foundation__diagnostics.DiagnosticLevel.debug}));
      properties.add(new src__foundation__diagnostics.FlagProperty.new("synthesized", {value: this.synthesized, ifTrue: "synthesized", level: src__foundation__diagnostics.DiagnosticLevel.debug}));
    }
    toStringFull() {
      return this.toString({minLevel: src__foundation__diagnostics.DiagnosticLevel.fine});
    }
    static transformPosition(transform, position) {
      if (transform == null) {
        return position;
      }
      let position3 = vector_math_64$.Vector3.new(position.dx, position.dy, 0.0);
      let transformed3 = transform.perspectiveTransform(position3);
      return new ui$.Offset.new(transformed3.x, transformed3.y);
    }
    static transformDeltaViaPositions(opts) {
      let untransformedEndPosition = opts && 'untransformedEndPosition' in opts ? opts.untransformedEndPosition : null;
      let transformedEndPosition = opts && 'transformedEndPosition' in opts ? opts.transformedEndPosition : null;
      let untransformedDelta = opts && 'untransformedDelta' in opts ? opts.untransformedDelta : null;
      let transform = opts && 'transform' in opts ? opts.transform : null;
      if (transform == null) {
        return untransformedDelta;
      }
      transformedEndPosition == null ? transformedEndPosition = src__gestures__events.PointerEvent.transformPosition(transform, untransformedEndPosition) : null;
      let transformedStartPosition = src__gestures__events.PointerEvent.transformPosition(transform, untransformedEndPosition['-'](untransformedDelta));
      return transformedEndPosition['-'](transformedStartPosition);
    }
    static removePerspectiveTransform(transform) {
      let t13;
      let vector = vector_math_64$.Vector4.new(0.0, 0.0, 1.0, 0.0);
      t13 = transform.clone();
      t13.setColumn(2, vector);
      t13.setRow(2, vector);
      return t13;
    }
  };
  (src__gestures__events.PointerEvent.new = function(opts) {
    let t13, t13$;
    let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : core.Duration.zero;
    let pointer = opts && 'pointer' in opts ? opts.pointer : 0;
    let kind = opts && 'kind' in opts ? opts.kind : ui$.PointerDeviceKind.touch;
    let device = opts && 'device' in opts ? opts.device : 0;
    let position = opts && 'position' in opts ? opts.position : ui$.Offset.zero;
    let localPosition = opts && 'localPosition' in opts ? opts.localPosition : null;
    let delta = opts && 'delta' in opts ? opts.delta : ui$.Offset.zero;
    let localDelta = opts && 'localDelta' in opts ? opts.localDelta : null;
    let buttons = opts && 'buttons' in opts ? opts.buttons : 0;
    let down = opts && 'down' in opts ? opts.down : false;
    let obscured = opts && 'obscured' in opts ? opts.obscured : false;
    let pressure = opts && 'pressure' in opts ? opts.pressure : 1.0;
    let pressureMin = opts && 'pressureMin' in opts ? opts.pressureMin : 1.0;
    let pressureMax = opts && 'pressureMax' in opts ? opts.pressureMax : 1.0;
    let distance = opts && 'distance' in opts ? opts.distance : 0.0;
    let distanceMax = opts && 'distanceMax' in opts ? opts.distanceMax : 0.0;
    let size = opts && 'size' in opts ? opts.size : 0.0;
    let radiusMajor = opts && 'radiusMajor' in opts ? opts.radiusMajor : 0.0;
    let radiusMinor = opts && 'radiusMinor' in opts ? opts.radiusMinor : 0.0;
    let radiusMin = opts && 'radiusMin' in opts ? opts.radiusMin : 0.0;
    let radiusMax = opts && 'radiusMax' in opts ? opts.radiusMax : 0.0;
    let orientation = opts && 'orientation' in opts ? opts.orientation : 0.0;
    let tilt = opts && 'tilt' in opts ? opts.tilt : 0.0;
    let platformData = opts && 'platformData' in opts ? opts.platformData : 0;
    let synthesized = opts && 'synthesized' in opts ? opts.synthesized : false;
    let transform = opts && 'transform' in opts ? opts.transform : null;
    let original = opts && 'original' in opts ? opts.original : null;
    this[timeStamp$] = timeStamp;
    this[pointer$] = pointer;
    this[kind$] = kind;
    this[device$] = device;
    this[position$] = position;
    this[delta$] = delta;
    this[buttons$] = buttons;
    this[down$] = down;
    this[obscured$] = obscured;
    this[pressure$] = pressure;
    this[pressureMin$] = pressureMin;
    this[pressureMax$] = pressureMax;
    this[distance$] = distance;
    this[distanceMax$] = distanceMax;
    this[size$] = size;
    this[radiusMajor$] = radiusMajor;
    this[radiusMinor$] = radiusMinor;
    this[radiusMin$] = radiusMin;
    this[radiusMax$] = radiusMax;
    this[orientation$] = orientation;
    this[tilt$] = tilt;
    this[platformData$] = platformData;
    this[synthesized$] = synthesized;
    this[transform$] = transform;
    this[original$] = original;
    this[localPosition$] = (t13 = localPosition, t13 == null ? position : t13);
    this[localDelta$] = (t13$ = localDelta, t13$ == null ? delta : t13$);
    src__gestures__events.PointerEvent.__proto__.new.call(this);
    ;
  }).prototype = src__gestures__events.PointerEvent.prototype;
  dart.addTypeTests(src__gestures__events.PointerEvent);
  const timeStamp$ = Symbol("PointerEvent.timeStamp");
  const pointer$ = Symbol("PointerEvent.pointer");
  const kind$ = Symbol("PointerEvent.kind");
  const device$ = Symbol("PointerEvent.device");
  const position$ = Symbol("PointerEvent.position");
  const localPosition$ = Symbol("PointerEvent.localPosition");
  const delta$ = Symbol("PointerEvent.delta");
  const localDelta$ = Symbol("PointerEvent.localDelta");
  const buttons$ = Symbol("PointerEvent.buttons");
  const down$ = Symbol("PointerEvent.down");
  const obscured$ = Symbol("PointerEvent.obscured");
  const pressure$ = Symbol("PointerEvent.pressure");
  const pressureMin$ = Symbol("PointerEvent.pressureMin");
  const pressureMax$ = Symbol("PointerEvent.pressureMax");
  const distance$ = Symbol("PointerEvent.distance");
  const distanceMax$ = Symbol("PointerEvent.distanceMax");
  const size$ = Symbol("PointerEvent.size");
  const radiusMajor$ = Symbol("PointerEvent.radiusMajor");
  const radiusMinor$ = Symbol("PointerEvent.radiusMinor");
  const radiusMin$ = Symbol("PointerEvent.radiusMin");
  const radiusMax$ = Symbol("PointerEvent.radiusMax");
  const orientation$ = Symbol("PointerEvent.orientation");
  const tilt$ = Symbol("PointerEvent.tilt");
  const platformData$ = Symbol("PointerEvent.platformData");
  const synthesized$ = Symbol("PointerEvent.synthesized");
  const transform$ = Symbol("PointerEvent.transform");
  const original$ = Symbol("PointerEvent.original");
  dart.setMethodSignature(src__gestures__events.PointerEvent, () => ({
    __proto__: dart.getMethods(src__gestures__events.PointerEvent.__proto__),
    toStringFull: dart.fnType(core.String, [])
  }));
  dart.setGetterSignature(src__gestures__events.PointerEvent, () => ({
    __proto__: dart.getGetters(src__gestures__events.PointerEvent.__proto__),
    distanceMin: core.double
  }));
  dart.setLibraryUri(src__gestures__events.PointerEvent, "package:flutter_web/src/gestures/events.dart");
  dart.setFieldSignature(src__gestures__events.PointerEvent, () => ({
    __proto__: dart.getFields(src__gestures__events.PointerEvent.__proto__),
    timeStamp: dart.finalFieldType(core.Duration),
    pointer: dart.finalFieldType(core.int),
    kind: dart.finalFieldType(ui$.PointerDeviceKind),
    device: dart.finalFieldType(core.int),
    position: dart.finalFieldType(ui$.Offset),
    localPosition: dart.finalFieldType(ui$.Offset),
    delta: dart.finalFieldType(ui$.Offset),
    localDelta: dart.finalFieldType(ui$.Offset),
    buttons: dart.finalFieldType(core.int),
    down: dart.finalFieldType(core.bool),
    obscured: dart.finalFieldType(core.bool),
    pressure: dart.finalFieldType(core.double),
    pressureMin: dart.finalFieldType(core.double),
    pressureMax: dart.finalFieldType(core.double),
    distance: dart.finalFieldType(core.double),
    distanceMax: dart.finalFieldType(core.double),
    size: dart.finalFieldType(core.double),
    radiusMajor: dart.finalFieldType(core.double),
    radiusMinor: dart.finalFieldType(core.double),
    radiusMin: dart.finalFieldType(core.double),
    radiusMax: dart.finalFieldType(core.double),
    orientation: dart.finalFieldType(core.double),
    tilt: dart.finalFieldType(core.double),
    platformData: dart.finalFieldType(core.int),
    synthesized: dart.finalFieldType(core.bool),
    transform: dart.finalFieldType(vector_math_64$.Matrix4),
    original: dart.finalFieldType(src__gestures__events.PointerEvent)
  }));
  src__gestures__events.PointerAddedEvent = class PointerAddedEvent extends src__gestures__events.PointerEvent {
    transformed(transform) {
      let t13;
      if (transform == null || dart.equals(transform, this.transform)) {
        return this;
      }
      return new src__gestures__events.PointerAddedEvent.new({timeStamp: this.timeStamp, kind: this.kind, device: this.device, position: this.position, localPosition: src__gestures__events.PointerEvent.transformPosition(transform, this.position), obscured: this.obscured, pressureMin: this.pressureMin, pressureMax: this.pressureMax, distance: this.distance, distanceMax: this.distanceMax, radiusMin: this.radiusMin, radiusMax: this.radiusMax, orientation: this.orientation, tilt: this.tilt, transform: transform, original: src__gestures__events.PointerAddedEvent._check((t13 = this.original, t13 == null ? this : t13))});
    }
  };
  (src__gestures__events.PointerAddedEvent.new = function(opts) {
    let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : core.Duration.zero;
    let kind = opts && 'kind' in opts ? opts.kind : ui$.PointerDeviceKind.touch;
    let device = opts && 'device' in opts ? opts.device : 0;
    let position = opts && 'position' in opts ? opts.position : ui$.Offset.zero;
    let localPosition = opts && 'localPosition' in opts ? opts.localPosition : null;
    let obscured = opts && 'obscured' in opts ? opts.obscured : false;
    let pressureMin = opts && 'pressureMin' in opts ? opts.pressureMin : 1.0;
    let pressureMax = opts && 'pressureMax' in opts ? opts.pressureMax : 1.0;
    let distance = opts && 'distance' in opts ? opts.distance : 0.0;
    let distanceMax = opts && 'distanceMax' in opts ? opts.distanceMax : 0.0;
    let radiusMin = opts && 'radiusMin' in opts ? opts.radiusMin : 0.0;
    let radiusMax = opts && 'radiusMax' in opts ? opts.radiusMax : 0.0;
    let orientation = opts && 'orientation' in opts ? opts.orientation : 0.0;
    let tilt = opts && 'tilt' in opts ? opts.tilt : 0.0;
    let transform = opts && 'transform' in opts ? opts.transform : null;
    let original = opts && 'original' in opts ? opts.original : null;
    src__gestures__events.PointerAddedEvent.__proto__.new.call(this, {timeStamp: timeStamp, kind: kind, device: device, position: position, localPosition: localPosition, obscured: obscured, pressure: 0.0, pressureMin: pressureMin, pressureMax: pressureMax, distance: distance, distanceMax: distanceMax, radiusMin: radiusMin, radiusMax: radiusMax, orientation: orientation, tilt: tilt, transform: transform, original: original});
    ;
  }).prototype = src__gestures__events.PointerAddedEvent.prototype;
  dart.addTypeTests(src__gestures__events.PointerAddedEvent);
  dart.setMethodSignature(src__gestures__events.PointerAddedEvent, () => ({
    __proto__: dart.getMethods(src__gestures__events.PointerAddedEvent.__proto__),
    transformed: dart.fnType(src__gestures__events.PointerAddedEvent, [vector_math_64$.Matrix4])
  }));
  dart.setLibraryUri(src__gestures__events.PointerAddedEvent, "package:flutter_web/src/gestures/events.dart");
  src__gestures__events.PointerRemovedEvent = class PointerRemovedEvent extends src__gestures__events.PointerEvent {
    transformed(transform) {
      let t13;
      if (transform == null || dart.equals(transform, this.transform)) {
        return this;
      }
      return new src__gestures__events.PointerRemovedEvent.new({timeStamp: this.timeStamp, kind: this.kind, device: this.device, position: this.position, localPosition: src__gestures__events.PointerEvent.transformPosition(transform, this.position), obscured: this.obscured, pressureMin: this.pressureMin, pressureMax: this.pressureMax, distanceMax: this.distanceMax, radiusMin: this.radiusMin, radiusMax: this.radiusMax, transform: transform, original: src__gestures__events.PointerRemovedEvent._check((t13 = this.original, t13 == null ? this : t13))});
    }
  };
  (src__gestures__events.PointerRemovedEvent.new = function(opts) {
    let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : core.Duration.zero;
    let kind = opts && 'kind' in opts ? opts.kind : ui$.PointerDeviceKind.touch;
    let device = opts && 'device' in opts ? opts.device : 0;
    let position = opts && 'position' in opts ? opts.position : ui$.Offset.zero;
    let localPosition = opts && 'localPosition' in opts ? opts.localPosition : null;
    let obscured = opts && 'obscured' in opts ? opts.obscured : false;
    let pressureMin = opts && 'pressureMin' in opts ? opts.pressureMin : 1.0;
    let pressureMax = opts && 'pressureMax' in opts ? opts.pressureMax : 1.0;
    let distanceMax = opts && 'distanceMax' in opts ? opts.distanceMax : 0.0;
    let radiusMin = opts && 'radiusMin' in opts ? opts.radiusMin : 0.0;
    let radiusMax = opts && 'radiusMax' in opts ? opts.radiusMax : 0.0;
    let transform = opts && 'transform' in opts ? opts.transform : null;
    let original = opts && 'original' in opts ? opts.original : null;
    src__gestures__events.PointerRemovedEvent.__proto__.new.call(this, {timeStamp: timeStamp, kind: kind, device: device, position: position, localPosition: localPosition, obscured: obscured, pressure: 0.0, pressureMin: pressureMin, pressureMax: pressureMax, distanceMax: distanceMax, radiusMin: radiusMin, radiusMax: radiusMax, transform: transform, original: original});
    ;
  }).prototype = src__gestures__events.PointerRemovedEvent.prototype;
  dart.addTypeTests(src__gestures__events.PointerRemovedEvent);
  dart.setMethodSignature(src__gestures__events.PointerRemovedEvent, () => ({
    __proto__: dart.getMethods(src__gestures__events.PointerRemovedEvent.__proto__),
    transformed: dart.fnType(src__gestures__events.PointerRemovedEvent, [vector_math_64$.Matrix4])
  }));
  dart.setLibraryUri(src__gestures__events.PointerRemovedEvent, "package:flutter_web/src/gestures/events.dart");
  src__gestures__events.PointerHoverEvent = class PointerHoverEvent extends src__gestures__events.PointerEvent {
    transformed(transform) {
      let t13;
      if (transform == null || dart.equals(transform, this.transform)) {
        return this;
      }
      let transformedPosition = src__gestures__events.PointerEvent.transformPosition(transform, this.position);
      return new src__gestures__events.PointerHoverEvent.new({timeStamp: this.timeStamp, kind: this.kind, device: this.device, position: this.position, localPosition: transformedPosition, delta: this.delta, localDelta: src__gestures__events.PointerEvent.transformDeltaViaPositions({transform: transform, untransformedDelta: this.delta, untransformedEndPosition: this.position, transformedEndPosition: transformedPosition}), buttons: this.buttons, obscured: this.obscured, pressureMin: this.pressureMin, pressureMax: this.pressureMax, distance: this.distance, distanceMax: this.distanceMax, size: this.size, radiusMajor: this.radiusMajor, radiusMinor: this.radiusMinor, radiusMin: this.radiusMin, radiusMax: this.radiusMax, orientation: this.orientation, tilt: this.tilt, synthesized: this.synthesized, transform: transform, original: src__gestures__events.PointerHoverEvent._check((t13 = this.original, t13 == null ? this : t13))});
    }
  };
  (src__gestures__events.PointerHoverEvent.new = function(opts) {
    let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : core.Duration.zero;
    let kind = opts && 'kind' in opts ? opts.kind : ui$.PointerDeviceKind.touch;
    let device = opts && 'device' in opts ? opts.device : 0;
    let position = opts && 'position' in opts ? opts.position : ui$.Offset.zero;
    let localPosition = opts && 'localPosition' in opts ? opts.localPosition : null;
    let delta = opts && 'delta' in opts ? opts.delta : ui$.Offset.zero;
    let localDelta = opts && 'localDelta' in opts ? opts.localDelta : null;
    let buttons = opts && 'buttons' in opts ? opts.buttons : 0;
    let obscured = opts && 'obscured' in opts ? opts.obscured : false;
    let pressureMin = opts && 'pressureMin' in opts ? opts.pressureMin : 1.0;
    let pressureMax = opts && 'pressureMax' in opts ? opts.pressureMax : 1.0;
    let distance = opts && 'distance' in opts ? opts.distance : 0.0;
    let distanceMax = opts && 'distanceMax' in opts ? opts.distanceMax : 0.0;
    let size = opts && 'size' in opts ? opts.size : 0.0;
    let radiusMajor = opts && 'radiusMajor' in opts ? opts.radiusMajor : 0.0;
    let radiusMinor = opts && 'radiusMinor' in opts ? opts.radiusMinor : 0.0;
    let radiusMin = opts && 'radiusMin' in opts ? opts.radiusMin : 0.0;
    let radiusMax = opts && 'radiusMax' in opts ? opts.radiusMax : 0.0;
    let orientation = opts && 'orientation' in opts ? opts.orientation : 0.0;
    let tilt = opts && 'tilt' in opts ? opts.tilt : 0.0;
    let synthesized = opts && 'synthesized' in opts ? opts.synthesized : false;
    let transform = opts && 'transform' in opts ? opts.transform : null;
    let original = opts && 'original' in opts ? opts.original : null;
    src__gestures__events.PointerHoverEvent.__proto__.new.call(this, {timeStamp: timeStamp, kind: kind, device: device, position: position, localPosition: localPosition, delta: delta, localDelta: localDelta, buttons: buttons, down: false, obscured: obscured, pressure: 0.0, pressureMin: pressureMin, pressureMax: pressureMax, distance: distance, distanceMax: distanceMax, size: size, radiusMajor: radiusMajor, radiusMinor: radiusMinor, radiusMin: radiusMin, radiusMax: radiusMax, orientation: orientation, tilt: tilt, synthesized: synthesized, transform: transform, original: original});
    ;
  }).prototype = src__gestures__events.PointerHoverEvent.prototype;
  dart.addTypeTests(src__gestures__events.PointerHoverEvent);
  dart.setMethodSignature(src__gestures__events.PointerHoverEvent, () => ({
    __proto__: dart.getMethods(src__gestures__events.PointerHoverEvent.__proto__),
    transformed: dart.fnType(src__gestures__events.PointerHoverEvent, [vector_math_64$.Matrix4])
  }));
  dart.setLibraryUri(src__gestures__events.PointerHoverEvent, "package:flutter_web/src/gestures/events.dart");
  src__gestures__events.PointerEnterEvent = class PointerEnterEvent extends src__gestures__events.PointerEvent {
    transformed(transform) {
      let t13;
      if (transform == null || dart.equals(transform, this.transform)) {
        return this;
      }
      let transformedPosition = src__gestures__events.PointerEvent.transformPosition(transform, this.position);
      return new src__gestures__events.PointerEnterEvent.new({timeStamp: this.timeStamp, kind: this.kind, device: this.device, position: this.position, localPosition: transformedPosition, delta: this.delta, localDelta: src__gestures__events.PointerEvent.transformDeltaViaPositions({transform: transform, untransformedDelta: this.delta, untransformedEndPosition: this.position, transformedEndPosition: transformedPosition}), buttons: this.buttons, obscured: this.obscured, pressureMin: this.pressureMin, pressureMax: this.pressureMax, distance: this.distance, distanceMax: this.distanceMax, size: this.size, radiusMajor: this.radiusMajor, radiusMinor: this.radiusMinor, radiusMin: this.radiusMin, radiusMax: this.radiusMax, orientation: this.orientation, tilt: this.tilt, synthesized: this.synthesized, transform: transform, original: src__gestures__events.PointerEnterEvent._check((t13 = this.original, t13 == null ? this : t13))});
    }
  };
  (src__gestures__events.PointerEnterEvent.new = function(opts) {
    let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : core.Duration.zero;
    let kind = opts && 'kind' in opts ? opts.kind : ui$.PointerDeviceKind.touch;
    let device = opts && 'device' in opts ? opts.device : 0;
    let position = opts && 'position' in opts ? opts.position : ui$.Offset.zero;
    let localPosition = opts && 'localPosition' in opts ? opts.localPosition : null;
    let delta = opts && 'delta' in opts ? opts.delta : ui$.Offset.zero;
    let localDelta = opts && 'localDelta' in opts ? opts.localDelta : null;
    let buttons = opts && 'buttons' in opts ? opts.buttons : 0;
    let obscured = opts && 'obscured' in opts ? opts.obscured : false;
    let pressureMin = opts && 'pressureMin' in opts ? opts.pressureMin : 1.0;
    let pressureMax = opts && 'pressureMax' in opts ? opts.pressureMax : 1.0;
    let distance = opts && 'distance' in opts ? opts.distance : 0.0;
    let distanceMax = opts && 'distanceMax' in opts ? opts.distanceMax : 0.0;
    let size = opts && 'size' in opts ? opts.size : 0.0;
    let radiusMajor = opts && 'radiusMajor' in opts ? opts.radiusMajor : 0.0;
    let radiusMinor = opts && 'radiusMinor' in opts ? opts.radiusMinor : 0.0;
    let radiusMin = opts && 'radiusMin' in opts ? opts.radiusMin : 0.0;
    let radiusMax = opts && 'radiusMax' in opts ? opts.radiusMax : 0.0;
    let orientation = opts && 'orientation' in opts ? opts.orientation : 0.0;
    let tilt = opts && 'tilt' in opts ? opts.tilt : 0.0;
    let synthesized = opts && 'synthesized' in opts ? opts.synthesized : false;
    let transform = opts && 'transform' in opts ? opts.transform : null;
    let original = opts && 'original' in opts ? opts.original : null;
    src__gestures__events.PointerEnterEvent.__proto__.new.call(this, {timeStamp: timeStamp, kind: kind, device: device, position: position, localPosition: localPosition, delta: delta, localDelta: localDelta, buttons: buttons, down: false, obscured: obscured, pressure: 0.0, pressureMin: pressureMin, pressureMax: pressureMax, distance: distance, distanceMax: distanceMax, size: size, radiusMajor: radiusMajor, radiusMinor: radiusMinor, radiusMin: radiusMin, radiusMax: radiusMax, orientation: orientation, tilt: tilt, synthesized: synthesized, transform: transform, original: original});
    ;
  }).prototype = src__gestures__events.PointerEnterEvent.prototype;
  (src__gestures__events.PointerEnterEvent.fromHoverEvent = function(event) {
    src__gestures__events.PointerEnterEvent.fromMouseEvent.call(this, event);
  }).prototype = src__gestures__events.PointerEnterEvent.prototype;
  (src__gestures__events.PointerEnterEvent.fromMouseEvent = function(event) {
    let t13, t13$, t13$0, t13$1, t13$2, t13$3, t13$4, t13$5, t13$6, t13$7, t13$8, t13$9, t13$10, t13$11, t13$12, t13$13, t13$14, t13$15, t13$16, t13$17, t13$18, t13$19, t13$20;
    src__gestures__events.PointerEnterEvent.new.call(this, {timeStamp: (t13 = event, t13 == null ? null : t13.timeStamp), kind: (t13$ = event, t13$ == null ? null : t13$.kind), device: (t13$0 = event, t13$0 == null ? null : t13$0.device), position: (t13$1 = event, t13$1 == null ? null : t13$1.position), localPosition: (t13$2 = event, t13$2 == null ? null : t13$2.localPosition), delta: (t13$3 = event, t13$3 == null ? null : t13$3.delta), localDelta: (t13$4 = event, t13$4 == null ? null : t13$4.localDelta), buttons: (t13$5 = event, t13$5 == null ? null : t13$5.buttons), obscured: (t13$6 = event, t13$6 == null ? null : t13$6.obscured), pressureMin: (t13$7 = event, t13$7 == null ? null : t13$7.pressureMin), pressureMax: (t13$8 = event, t13$8 == null ? null : t13$8.pressureMax), distance: (t13$9 = event, t13$9 == null ? null : t13$9.distance), distanceMax: (t13$10 = event, t13$10 == null ? null : t13$10.distanceMax), size: (t13$11 = event, t13$11 == null ? null : t13$11.size), radiusMajor: (t13$12 = event, t13$12 == null ? null : t13$12.radiusMajor), radiusMinor: (t13$13 = event, t13$13 == null ? null : t13$13.radiusMinor), radiusMin: (t13$14 = event, t13$14 == null ? null : t13$14.radiusMin), radiusMax: (t13$15 = event, t13$15 == null ? null : t13$15.radiusMax), orientation: (t13$16 = event, t13$16 == null ? null : t13$16.orientation), tilt: (t13$17 = event, t13$17 == null ? null : t13$17.tilt), synthesized: (t13$18 = event, t13$18 == null ? null : t13$18.synthesized), transform: (t13$19 = event, t13$19 == null ? null : t13$19.transform), original: src__gestures__events.PointerEnterEvent._check((t13$20 = event, t13$20 == null ? null : t13$20.original))});
  }).prototype = src__gestures__events.PointerEnterEvent.prototype;
  dart.addTypeTests(src__gestures__events.PointerEnterEvent);
  dart.setMethodSignature(src__gestures__events.PointerEnterEvent, () => ({
    __proto__: dart.getMethods(src__gestures__events.PointerEnterEvent.__proto__),
    transformed: dart.fnType(src__gestures__events.PointerEnterEvent, [vector_math_64$.Matrix4])
  }));
  dart.setLibraryUri(src__gestures__events.PointerEnterEvent, "package:flutter_web/src/gestures/events.dart");
  src__gestures__events.PointerExitEvent = class PointerExitEvent extends src__gestures__events.PointerEvent {
    transformed(transform) {
      let t13;
      if (transform == null || dart.equals(transform, this.transform)) {
        return this;
      }
      let transformedPosition = src__gestures__events.PointerEvent.transformPosition(transform, this.position);
      return new src__gestures__events.PointerExitEvent.new({timeStamp: this.timeStamp, kind: this.kind, device: this.device, position: this.position, localPosition: transformedPosition, delta: this.delta, localDelta: src__gestures__events.PointerEvent.transformDeltaViaPositions({transform: transform, untransformedDelta: this.delta, untransformedEndPosition: this.position, transformedEndPosition: transformedPosition}), buttons: this.buttons, obscured: this.obscured, pressureMin: this.pressureMin, pressureMax: this.pressureMax, distance: this.distance, distanceMax: this.distanceMax, size: this.size, radiusMajor: this.radiusMajor, radiusMinor: this.radiusMinor, radiusMin: this.radiusMin, radiusMax: this.radiusMax, orientation: this.orientation, tilt: this.tilt, synthesized: this.synthesized, transform: transform, original: src__gestures__events.PointerExitEvent._check((t13 = this.original, t13 == null ? this : t13))});
    }
  };
  (src__gestures__events.PointerExitEvent.new = function(opts) {
    let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : core.Duration.zero;
    let kind = opts && 'kind' in opts ? opts.kind : ui$.PointerDeviceKind.touch;
    let device = opts && 'device' in opts ? opts.device : 0;
    let position = opts && 'position' in opts ? opts.position : ui$.Offset.zero;
    let localPosition = opts && 'localPosition' in opts ? opts.localPosition : null;
    let delta = opts && 'delta' in opts ? opts.delta : ui$.Offset.zero;
    let localDelta = opts && 'localDelta' in opts ? opts.localDelta : null;
    let buttons = opts && 'buttons' in opts ? opts.buttons : 0;
    let obscured = opts && 'obscured' in opts ? opts.obscured : false;
    let pressureMin = opts && 'pressureMin' in opts ? opts.pressureMin : 1.0;
    let pressureMax = opts && 'pressureMax' in opts ? opts.pressureMax : 1.0;
    let distance = opts && 'distance' in opts ? opts.distance : 0.0;
    let distanceMax = opts && 'distanceMax' in opts ? opts.distanceMax : 0.0;
    let size = opts && 'size' in opts ? opts.size : 0.0;
    let radiusMajor = opts && 'radiusMajor' in opts ? opts.radiusMajor : 0.0;
    let radiusMinor = opts && 'radiusMinor' in opts ? opts.radiusMinor : 0.0;
    let radiusMin = opts && 'radiusMin' in opts ? opts.radiusMin : 0.0;
    let radiusMax = opts && 'radiusMax' in opts ? opts.radiusMax : 0.0;
    let orientation = opts && 'orientation' in opts ? opts.orientation : 0.0;
    let tilt = opts && 'tilt' in opts ? opts.tilt : 0.0;
    let synthesized = opts && 'synthesized' in opts ? opts.synthesized : false;
    let transform = opts && 'transform' in opts ? opts.transform : null;
    let original = opts && 'original' in opts ? opts.original : null;
    src__gestures__events.PointerExitEvent.__proto__.new.call(this, {timeStamp: timeStamp, kind: kind, device: device, position: position, localPosition: localPosition, delta: delta, localDelta: localDelta, buttons: buttons, down: false, obscured: obscured, pressure: 0.0, pressureMin: pressureMin, pressureMax: pressureMax, distance: distance, distanceMax: distanceMax, size: size, radiusMajor: radiusMajor, radiusMinor: radiusMinor, radiusMin: radiusMin, radiusMax: radiusMax, orientation: orientation, tilt: tilt, synthesized: synthesized, transform: transform, original: original});
    ;
  }).prototype = src__gestures__events.PointerExitEvent.prototype;
  (src__gestures__events.PointerExitEvent.fromHoverEvent = function(event) {
    src__gestures__events.PointerExitEvent.fromMouseEvent.call(this, event);
  }).prototype = src__gestures__events.PointerExitEvent.prototype;
  (src__gestures__events.PointerExitEvent.fromMouseEvent = function(event) {
    let t13, t13$, t13$0, t13$1, t13$2, t13$3, t13$4, t13$5, t13$6, t13$7, t13$8, t13$9, t13$10, t13$11, t13$12, t13$13, t13$14, t13$15, t13$16, t13$17, t13$18, t13$19, t13$20;
    src__gestures__events.PointerExitEvent.new.call(this, {timeStamp: (t13 = event, t13 == null ? null : t13.timeStamp), kind: (t13$ = event, t13$ == null ? null : t13$.kind), device: (t13$0 = event, t13$0 == null ? null : t13$0.device), position: (t13$1 = event, t13$1 == null ? null : t13$1.position), localPosition: (t13$2 = event, t13$2 == null ? null : t13$2.localPosition), delta: (t13$3 = event, t13$3 == null ? null : t13$3.delta), localDelta: (t13$4 = event, t13$4 == null ? null : t13$4.localDelta), buttons: (t13$5 = event, t13$5 == null ? null : t13$5.buttons), obscured: (t13$6 = event, t13$6 == null ? null : t13$6.obscured), pressureMin: (t13$7 = event, t13$7 == null ? null : t13$7.pressureMin), pressureMax: (t13$8 = event, t13$8 == null ? null : t13$8.pressureMax), distance: (t13$9 = event, t13$9 == null ? null : t13$9.distance), distanceMax: (t13$10 = event, t13$10 == null ? null : t13$10.distanceMax), size: (t13$11 = event, t13$11 == null ? null : t13$11.size), radiusMajor: (t13$12 = event, t13$12 == null ? null : t13$12.radiusMajor), radiusMinor: (t13$13 = event, t13$13 == null ? null : t13$13.radiusMinor), radiusMin: (t13$14 = event, t13$14 == null ? null : t13$14.radiusMin), radiusMax: (t13$15 = event, t13$15 == null ? null : t13$15.radiusMax), orientation: (t13$16 = event, t13$16 == null ? null : t13$16.orientation), tilt: (t13$17 = event, t13$17 == null ? null : t13$17.tilt), synthesized: (t13$18 = event, t13$18 == null ? null : t13$18.synthesized), transform: (t13$19 = event, t13$19 == null ? null : t13$19.transform), original: src__gestures__events.PointerExitEvent._check((t13$20 = event, t13$20 == null ? null : t13$20.original))});
  }).prototype = src__gestures__events.PointerExitEvent.prototype;
  dart.addTypeTests(src__gestures__events.PointerExitEvent);
  dart.setMethodSignature(src__gestures__events.PointerExitEvent, () => ({
    __proto__: dart.getMethods(src__gestures__events.PointerExitEvent.__proto__),
    transformed: dart.fnType(src__gestures__events.PointerExitEvent, [vector_math_64$.Matrix4])
  }));
  dart.setLibraryUri(src__gestures__events.PointerExitEvent, "package:flutter_web/src/gestures/events.dart");
  src__gestures__events.PointerDownEvent = class PointerDownEvent extends src__gestures__events.PointerEvent {
    transformed(transform) {
      let t13;
      if (transform == null || dart.equals(transform, this.transform)) {
        return this;
      }
      return new src__gestures__events.PointerDownEvent.new({timeStamp: this.timeStamp, pointer: this.pointer, kind: this.kind, device: this.device, position: this.position, localPosition: src__gestures__events.PointerEvent.transformPosition(transform, this.position), buttons: this.buttons, obscured: this.obscured, pressure: this.pressure, pressureMin: this.pressureMin, pressureMax: this.pressureMax, distanceMax: this.distanceMax, size: this.size, radiusMajor: this.radiusMajor, radiusMinor: this.radiusMinor, radiusMin: this.radiusMin, radiusMax: this.radiusMax, orientation: this.orientation, tilt: this.tilt, transform: transform, original: src__gestures__events.PointerDownEvent._check((t13 = this.original, t13 == null ? this : t13))});
    }
  };
  (src__gestures__events.PointerDownEvent.new = function(opts) {
    let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : core.Duration.zero;
    let pointer = opts && 'pointer' in opts ? opts.pointer : 0;
    let kind = opts && 'kind' in opts ? opts.kind : ui$.PointerDeviceKind.touch;
    let device = opts && 'device' in opts ? opts.device : 0;
    let position = opts && 'position' in opts ? opts.position : ui$.Offset.zero;
    let localPosition = opts && 'localPosition' in opts ? opts.localPosition : null;
    let buttons = opts && 'buttons' in opts ? opts.buttons : src__gestures__events.kPrimaryButton;
    let obscured = opts && 'obscured' in opts ? opts.obscured : false;
    let pressure = opts && 'pressure' in opts ? opts.pressure : 1.0;
    let pressureMin = opts && 'pressureMin' in opts ? opts.pressureMin : 1.0;
    let pressureMax = opts && 'pressureMax' in opts ? opts.pressureMax : 1.0;
    let distanceMax = opts && 'distanceMax' in opts ? opts.distanceMax : 0.0;
    let size = opts && 'size' in opts ? opts.size : 0.0;
    let radiusMajor = opts && 'radiusMajor' in opts ? opts.radiusMajor : 0.0;
    let radiusMinor = opts && 'radiusMinor' in opts ? opts.radiusMinor : 0.0;
    let radiusMin = opts && 'radiusMin' in opts ? opts.radiusMin : 0.0;
    let radiusMax = opts && 'radiusMax' in opts ? opts.radiusMax : 0.0;
    let orientation = opts && 'orientation' in opts ? opts.orientation : 0.0;
    let tilt = opts && 'tilt' in opts ? opts.tilt : 0.0;
    let transform = opts && 'transform' in opts ? opts.transform : null;
    let original = opts && 'original' in opts ? opts.original : null;
    src__gestures__events.PointerDownEvent.__proto__.new.call(this, {timeStamp: timeStamp, pointer: pointer, kind: kind, device: device, position: position, localPosition: localPosition, buttons: buttons, down: true, obscured: obscured, pressure: pressure, pressureMin: pressureMin, pressureMax: pressureMax, distance: 0.0, distanceMax: distanceMax, size: size, radiusMajor: radiusMajor, radiusMinor: radiusMinor, radiusMin: radiusMin, radiusMax: radiusMax, orientation: orientation, tilt: tilt, transform: transform, original: original});
    ;
  }).prototype = src__gestures__events.PointerDownEvent.prototype;
  dart.addTypeTests(src__gestures__events.PointerDownEvent);
  dart.setMethodSignature(src__gestures__events.PointerDownEvent, () => ({
    __proto__: dart.getMethods(src__gestures__events.PointerDownEvent.__proto__),
    transformed: dart.fnType(src__gestures__events.PointerDownEvent, [vector_math_64$.Matrix4])
  }));
  dart.setLibraryUri(src__gestures__events.PointerDownEvent, "package:flutter_web/src/gestures/events.dart");
  src__gestures__events.PointerMoveEvent = class PointerMoveEvent extends src__gestures__events.PointerEvent {
    transformed(transform) {
      let t13;
      if (transform == null || dart.equals(transform, this.transform)) {
        return this;
      }
      let transformedPosition = src__gestures__events.PointerEvent.transformPosition(transform, this.position);
      return new src__gestures__events.PointerMoveEvent.new({timeStamp: this.timeStamp, pointer: this.pointer, kind: this.kind, device: this.device, position: this.position, localPosition: transformedPosition, delta: this.delta, localDelta: src__gestures__events.PointerEvent.transformDeltaViaPositions({transform: transform, untransformedDelta: this.delta, untransformedEndPosition: this.position, transformedEndPosition: transformedPosition}), buttons: this.buttons, obscured: this.obscured, pressure: this.pressure, pressureMin: this.pressureMin, pressureMax: this.pressureMax, distanceMax: this.distanceMax, size: this.size, radiusMajor: this.radiusMajor, radiusMinor: this.radiusMinor, radiusMin: this.radiusMin, radiusMax: this.radiusMax, orientation: this.orientation, tilt: this.tilt, platformData: this.platformData, synthesized: this.synthesized, transform: transform, original: src__gestures__events.PointerMoveEvent._check((t13 = this.original, t13 == null ? this : t13))});
    }
  };
  (src__gestures__events.PointerMoveEvent.new = function(opts) {
    let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : core.Duration.zero;
    let pointer = opts && 'pointer' in opts ? opts.pointer : 0;
    let kind = opts && 'kind' in opts ? opts.kind : ui$.PointerDeviceKind.touch;
    let device = opts && 'device' in opts ? opts.device : 0;
    let position = opts && 'position' in opts ? opts.position : ui$.Offset.zero;
    let localPosition = opts && 'localPosition' in opts ? opts.localPosition : null;
    let delta = opts && 'delta' in opts ? opts.delta : ui$.Offset.zero;
    let localDelta = opts && 'localDelta' in opts ? opts.localDelta : null;
    let buttons = opts && 'buttons' in opts ? opts.buttons : src__gestures__events.kPrimaryButton;
    let obscured = opts && 'obscured' in opts ? opts.obscured : false;
    let pressure = opts && 'pressure' in opts ? opts.pressure : 1.0;
    let pressureMin = opts && 'pressureMin' in opts ? opts.pressureMin : 1.0;
    let pressureMax = opts && 'pressureMax' in opts ? opts.pressureMax : 1.0;
    let distanceMax = opts && 'distanceMax' in opts ? opts.distanceMax : 0.0;
    let size = opts && 'size' in opts ? opts.size : 0.0;
    let radiusMajor = opts && 'radiusMajor' in opts ? opts.radiusMajor : 0.0;
    let radiusMinor = opts && 'radiusMinor' in opts ? opts.radiusMinor : 0.0;
    let radiusMin = opts && 'radiusMin' in opts ? opts.radiusMin : 0.0;
    let radiusMax = opts && 'radiusMax' in opts ? opts.radiusMax : 0.0;
    let orientation = opts && 'orientation' in opts ? opts.orientation : 0.0;
    let tilt = opts && 'tilt' in opts ? opts.tilt : 0.0;
    let platformData = opts && 'platformData' in opts ? opts.platformData : 0;
    let synthesized = opts && 'synthesized' in opts ? opts.synthesized : false;
    let transform = opts && 'transform' in opts ? opts.transform : null;
    let original = opts && 'original' in opts ? opts.original : null;
    src__gestures__events.PointerMoveEvent.__proto__.new.call(this, {timeStamp: timeStamp, pointer: pointer, kind: kind, device: device, position: position, localPosition: localPosition, delta: delta, localDelta: localDelta, buttons: buttons, down: true, obscured: obscured, pressure: pressure, pressureMin: pressureMin, pressureMax: pressureMax, distance: 0.0, distanceMax: distanceMax, size: size, radiusMajor: radiusMajor, radiusMinor: radiusMinor, radiusMin: radiusMin, radiusMax: radiusMax, orientation: orientation, tilt: tilt, platformData: platformData, synthesized: synthesized, transform: transform, original: original});
    ;
  }).prototype = src__gestures__events.PointerMoveEvent.prototype;
  dart.addTypeTests(src__gestures__events.PointerMoveEvent);
  dart.setMethodSignature(src__gestures__events.PointerMoveEvent, () => ({
    __proto__: dart.getMethods(src__gestures__events.PointerMoveEvent.__proto__),
    transformed: dart.fnType(src__gestures__events.PointerMoveEvent, [vector_math_64$.Matrix4])
  }));
  dart.setLibraryUri(src__gestures__events.PointerMoveEvent, "package:flutter_web/src/gestures/events.dart");
  src__gestures__events.PointerUpEvent = class PointerUpEvent extends src__gestures__events.PointerEvent {
    transformed(transform) {
      let t13;
      if (transform == null || dart.equals(transform, this.transform)) {
        return this;
      }
      return new src__gestures__events.PointerUpEvent.new({timeStamp: this.timeStamp, pointer: this.pointer, kind: this.kind, device: this.device, position: this.position, localPosition: src__gestures__events.PointerEvent.transformPosition(transform, this.position), buttons: this.buttons, obscured: this.obscured, pressure: this.pressure, pressureMin: this.pressureMin, pressureMax: this.pressureMax, distance: this.distance, distanceMax: this.distanceMax, size: this.size, radiusMajor: this.radiusMajor, radiusMinor: this.radiusMinor, radiusMin: this.radiusMin, radiusMax: this.radiusMax, orientation: this.orientation, tilt: this.tilt, transform: transform, original: src__gestures__events.PointerUpEvent._check((t13 = this.original, t13 == null ? this : t13))});
    }
  };
  (src__gestures__events.PointerUpEvent.new = function(opts) {
    let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : core.Duration.zero;
    let pointer = opts && 'pointer' in opts ? opts.pointer : 0;
    let kind = opts && 'kind' in opts ? opts.kind : ui$.PointerDeviceKind.touch;
    let device = opts && 'device' in opts ? opts.device : 0;
    let position = opts && 'position' in opts ? opts.position : ui$.Offset.zero;
    let localPosition = opts && 'localPosition' in opts ? opts.localPosition : null;
    let buttons = opts && 'buttons' in opts ? opts.buttons : 0;
    let obscured = opts && 'obscured' in opts ? opts.obscured : false;
    let pressure = opts && 'pressure' in opts ? opts.pressure : 0.0;
    let pressureMin = opts && 'pressureMin' in opts ? opts.pressureMin : 1.0;
    let pressureMax = opts && 'pressureMax' in opts ? opts.pressureMax : 1.0;
    let distance = opts && 'distance' in opts ? opts.distance : 0.0;
    let distanceMax = opts && 'distanceMax' in opts ? opts.distanceMax : 0.0;
    let size = opts && 'size' in opts ? opts.size : 0.0;
    let radiusMajor = opts && 'radiusMajor' in opts ? opts.radiusMajor : 0.0;
    let radiusMinor = opts && 'radiusMinor' in opts ? opts.radiusMinor : 0.0;
    let radiusMin = opts && 'radiusMin' in opts ? opts.radiusMin : 0.0;
    let radiusMax = opts && 'radiusMax' in opts ? opts.radiusMax : 0.0;
    let orientation = opts && 'orientation' in opts ? opts.orientation : 0.0;
    let tilt = opts && 'tilt' in opts ? opts.tilt : 0.0;
    let transform = opts && 'transform' in opts ? opts.transform : null;
    let original = opts && 'original' in opts ? opts.original : null;
    src__gestures__events.PointerUpEvent.__proto__.new.call(this, {timeStamp: timeStamp, pointer: pointer, kind: kind, device: device, position: position, localPosition: localPosition, buttons: buttons, down: false, obscured: obscured, pressure: pressure, pressureMin: pressureMin, pressureMax: pressureMax, distance: distance, distanceMax: distanceMax, size: size, radiusMajor: radiusMajor, radiusMinor: radiusMinor, radiusMin: radiusMin, radiusMax: radiusMax, orientation: orientation, tilt: tilt, transform: transform, original: original});
    ;
  }).prototype = src__gestures__events.PointerUpEvent.prototype;
  dart.addTypeTests(src__gestures__events.PointerUpEvent);
  dart.setMethodSignature(src__gestures__events.PointerUpEvent, () => ({
    __proto__: dart.getMethods(src__gestures__events.PointerUpEvent.__proto__),
    transformed: dart.fnType(src__gestures__events.PointerUpEvent, [vector_math_64$.Matrix4])
  }));
  dart.setLibraryUri(src__gestures__events.PointerUpEvent, "package:flutter_web/src/gestures/events.dart");
  src__gestures__events.PointerSignalEvent = class PointerSignalEvent extends src__gestures__events.PointerEvent {};
  (src__gestures__events.PointerSignalEvent.new = function(opts) {
    let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : core.Duration.zero;
    let pointer = opts && 'pointer' in opts ? opts.pointer : 0;
    let kind = opts && 'kind' in opts ? opts.kind : ui$.PointerDeviceKind.mouse;
    let device = opts && 'device' in opts ? opts.device : 0;
    let position = opts && 'position' in opts ? opts.position : ui$.Offset.zero;
    let localPosition = opts && 'localPosition' in opts ? opts.localPosition : null;
    let transform = opts && 'transform' in opts ? opts.transform : null;
    let original = opts && 'original' in opts ? opts.original : null;
    src__gestures__events.PointerSignalEvent.__proto__.new.call(this, {timeStamp: timeStamp, pointer: pointer, kind: kind, device: device, position: position, localPosition: localPosition, transform: transform, original: original});
    ;
  }).prototype = src__gestures__events.PointerSignalEvent.prototype;
  dart.addTypeTests(src__gestures__events.PointerSignalEvent);
  dart.setLibraryUri(src__gestures__events.PointerSignalEvent, "package:flutter_web/src/gestures/events.dart");
  src__gestures__events.PointerScrollEvent = class PointerScrollEvent extends src__gestures__events.PointerSignalEvent {
    get scrollDelta() {
      return this[scrollDelta$];
    }
    set scrollDelta(value) {
      super.scrollDelta = value;
    }
    transformed(transform) {
      let t13;
      if (transform == null || dart.equals(transform, this.transform)) {
        return this;
      }
      return new src__gestures__events.PointerScrollEvent.new({timeStamp: this.timeStamp, kind: this.kind, device: this.device, position: this.position, localPosition: src__gestures__events.PointerEvent.transformPosition(transform, this.position), scrollDelta: this.scrollDelta, transform: transform, original: src__gestures__events.PointerScrollEvent._check((t13 = this.original, t13 == null ? this : t13))});
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (DiagnosticsPropertyOfOffset()).new("scrollDelta", this.scrollDelta));
    }
  };
  (src__gestures__events.PointerScrollEvent.new = function(opts) {
    let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : core.Duration.zero;
    let kind = opts && 'kind' in opts ? opts.kind : ui$.PointerDeviceKind.mouse;
    let device = opts && 'device' in opts ? opts.device : 0;
    let position = opts && 'position' in opts ? opts.position : ui$.Offset.zero;
    let localPosition = opts && 'localPosition' in opts ? opts.localPosition : null;
    let scrollDelta = opts && 'scrollDelta' in opts ? opts.scrollDelta : ui$.Offset.zero;
    let transform = opts && 'transform' in opts ? opts.transform : null;
    let original = opts && 'original' in opts ? opts.original : null;
    this[scrollDelta$] = scrollDelta;
    if (!(timeStamp != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/events.dart", 1416, 15, "timeStamp != null");
    if (!(kind != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/events.dart", 1417, 15, "kind != null");
    if (!(device != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/events.dart", 1418, 15, "device != null");
    if (!(position != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/events.dart", 1419, 15, "position != null");
    if (!(scrollDelta != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/events.dart", 1420, 15, "scrollDelta != null");
    src__gestures__events.PointerScrollEvent.__proto__.new.call(this, {timeStamp: timeStamp, kind: kind, device: device, position: position, localPosition: localPosition, transform: transform, original: original});
    ;
  }).prototype = src__gestures__events.PointerScrollEvent.prototype;
  dart.addTypeTests(src__gestures__events.PointerScrollEvent);
  const scrollDelta$ = Symbol("PointerScrollEvent.scrollDelta");
  dart.setMethodSignature(src__gestures__events.PointerScrollEvent, () => ({
    __proto__: dart.getMethods(src__gestures__events.PointerScrollEvent.__proto__),
    transformed: dart.fnType(src__gestures__events.PointerScrollEvent, [vector_math_64$.Matrix4])
  }));
  dart.setLibraryUri(src__gestures__events.PointerScrollEvent, "package:flutter_web/src/gestures/events.dart");
  dart.setFieldSignature(src__gestures__events.PointerScrollEvent, () => ({
    __proto__: dart.getFields(src__gestures__events.PointerScrollEvent.__proto__),
    scrollDelta: dart.finalFieldType(ui$.Offset)
  }));
  src__gestures__events.PointerCancelEvent = class PointerCancelEvent extends src__gestures__events.PointerEvent {
    transformed(transform) {
      let t13;
      if (transform == null || dart.equals(transform, this.transform)) {
        return this;
      }
      return new src__gestures__events.PointerCancelEvent.new({timeStamp: this.timeStamp, pointer: this.pointer, kind: this.kind, device: this.device, position: this.position, localPosition: src__gestures__events.PointerEvent.transformPosition(transform, this.position), buttons: this.buttons, obscured: this.obscured, pressureMin: this.pressureMin, pressureMax: this.pressureMax, distance: this.distance, distanceMax: this.distanceMax, size: this.size, radiusMajor: this.radiusMajor, radiusMinor: this.radiusMinor, radiusMin: this.radiusMin, radiusMax: this.radiusMax, orientation: this.orientation, tilt: this.tilt, transform: transform, original: src__gestures__events.PointerCancelEvent._check((t13 = this.original, t13 == null ? this : t13))});
    }
  };
  (src__gestures__events.PointerCancelEvent.new = function(opts) {
    let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : core.Duration.zero;
    let pointer = opts && 'pointer' in opts ? opts.pointer : 0;
    let kind = opts && 'kind' in opts ? opts.kind : ui$.PointerDeviceKind.touch;
    let device = opts && 'device' in opts ? opts.device : 0;
    let position = opts && 'position' in opts ? opts.position : ui$.Offset.zero;
    let localPosition = opts && 'localPosition' in opts ? opts.localPosition : null;
    let buttons = opts && 'buttons' in opts ? opts.buttons : 0;
    let obscured = opts && 'obscured' in opts ? opts.obscured : false;
    let pressureMin = opts && 'pressureMin' in opts ? opts.pressureMin : 1.0;
    let pressureMax = opts && 'pressureMax' in opts ? opts.pressureMax : 1.0;
    let distance = opts && 'distance' in opts ? opts.distance : 0.0;
    let distanceMax = opts && 'distanceMax' in opts ? opts.distanceMax : 0.0;
    let size = opts && 'size' in opts ? opts.size : 0.0;
    let radiusMajor = opts && 'radiusMajor' in opts ? opts.radiusMajor : 0.0;
    let radiusMinor = opts && 'radiusMinor' in opts ? opts.radiusMinor : 0.0;
    let radiusMin = opts && 'radiusMin' in opts ? opts.radiusMin : 0.0;
    let radiusMax = opts && 'radiusMax' in opts ? opts.radiusMax : 0.0;
    let orientation = opts && 'orientation' in opts ? opts.orientation : 0.0;
    let tilt = opts && 'tilt' in opts ? opts.tilt : 0.0;
    let transform = opts && 'transform' in opts ? opts.transform : null;
    let original = opts && 'original' in opts ? opts.original : null;
    src__gestures__events.PointerCancelEvent.__proto__.new.call(this, {timeStamp: timeStamp, pointer: pointer, kind: kind, device: device, position: position, localPosition: localPosition, buttons: buttons, down: false, obscured: obscured, pressure: 0.0, pressureMin: pressureMin, pressureMax: pressureMax, distance: distance, distanceMax: distanceMax, size: size, radiusMajor: radiusMajor, radiusMinor: radiusMinor, radiusMin: radiusMin, radiusMax: radiusMax, orientation: orientation, tilt: tilt, transform: transform, original: original});
    ;
  }).prototype = src__gestures__events.PointerCancelEvent.prototype;
  dart.addTypeTests(src__gestures__events.PointerCancelEvent);
  dart.setMethodSignature(src__gestures__events.PointerCancelEvent, () => ({
    __proto__: dart.getMethods(src__gestures__events.PointerCancelEvent.__proto__),
    transformed: dart.fnType(src__gestures__events.PointerCancelEvent, [vector_math_64$.Matrix4])
  }));
  dart.setLibraryUri(src__gestures__events.PointerCancelEvent, "package:flutter_web/src/gestures/events.dart");
  src__gestures__events.nthMouseButton = function(number) {
    return (src__gestures__events.kPrimaryMouseButton[$leftShift](dart.notNull(number) - 1) & dart.notNull(src__foundation__bitfield.kMaxUnsignedSMI)) >>> 0;
  };
  src__gestures__events.nthStylusButton = function(number) {
    return (src__gestures__events.kPrimaryStylusButton[$leftShift](dart.notNull(number) - 1) & dart.notNull(src__foundation__bitfield.kMaxUnsignedSMI)) >>> 0;
  };
  src__gestures__events.smallestButton = function(buttons) {
    return (dart.notNull(buttons) & -dart.notNull(buttons)) >>> 0;
  };
  src__gestures__events.isSingleButton = function(buttons) {
    return buttons !== 0 && src__gestures__events.smallestButton(buttons) == buttons;
  };
  dart.defineLazy(src__gestures__events, {
    /*src__gestures__events.kPrimaryButton*/get kPrimaryButton() {
      return 1;
    },
    /*src__gestures__events.kSecondaryButton*/get kSecondaryButton() {
      return 2;
    },
    /*src__gestures__events.kPrimaryMouseButton*/get kPrimaryMouseButton() {
      return src__gestures__events.kPrimaryButton;
    },
    /*src__gestures__events.kSecondaryMouseButton*/get kSecondaryMouseButton() {
      return src__gestures__events.kSecondaryButton;
    },
    /*src__gestures__events.kStylusContact*/get kStylusContact() {
      return src__gestures__events.kPrimaryButton;
    },
    /*src__gestures__events.kPrimaryStylusButton*/get kPrimaryStylusButton() {
      return src__gestures__events.kSecondaryButton;
    },
    /*src__gestures__events.kMiddleMouseButton*/get kMiddleMouseButton() {
      return 4;
    },
    /*src__gestures__events.kSecondaryStylusButton*/get kSecondaryStylusButton() {
      return 4;
    },
    /*src__gestures__events.kBackMouseButton*/get kBackMouseButton() {
      return 8;
    },
    /*src__gestures__events.kForwardMouseButton*/get kForwardMouseButton() {
      return 16;
    },
    /*src__gestures__events.kTouchContact*/get kTouchContact() {
      return src__gestures__events.kPrimaryButton;
    }
  });
  const _combiner$ = dart.privateName(src__gestures__team, "_combiner");
  const _member$ = dart.privateName(src__gestures__team, "_member");
  const _resolve = dart.privateName(src__gestures__team, "_resolve");
  let const$16;
  const _member$0 = dart.privateName(src__gestures__arena, "_member");
  const _arena = dart.privateName(src__gestures__team, "_arena");
  let const$17;
  const _arena$ = dart.privateName(src__gestures__arena, "_arena");
  const _pointer$ = dart.privateName(src__gestures__team, "_pointer");
  let const$18;
  const _pointer$0 = dart.privateName(src__gestures__arena, "_pointer");
  src__gestures__team._CombiningGestureArenaEntry = class _CombiningGestureArenaEntry extends core.Object {
    resolve(disposition) {
      this[_combiner$][_resolve](this[_member$], disposition);
    }
    get [_member$0]() {
      return src__gestures__arena.GestureArenaMember._check(this[$noSuchMethod](new core._Invocation.getter(const$16 || (const$16 = dart.const(new _js_helper.PrivateSymbol.new('_member', _member$))))));
    }
    get [_arena$]() {
      return src__gestures__arena.GestureArenaManager._check(this[$noSuchMethod](new core._Invocation.getter(const$17 || (const$17 = dart.const(new _js_helper.PrivateSymbol.new('_arena', _arena))))));
    }
    get [_pointer$0]() {
      return core.int._check(this[$noSuchMethod](new core._Invocation.getter(const$18 || (const$18 = dart.const(new _js_helper.PrivateSymbol.new('_pointer', _pointer$))))));
    }
  };
  (src__gestures__team._CombiningGestureArenaEntry.new = function(_combiner, _member) {
    this[_combiner$] = _combiner;
    this[_member$] = _member;
    ;
  }).prototype = src__gestures__team._CombiningGestureArenaEntry.prototype;
  dart.addTypeTests(src__gestures__team._CombiningGestureArenaEntry);
  src__gestures__team._CombiningGestureArenaEntry[dart.implements] = () => [src__gestures__arena.GestureArenaEntry];
  dart.setMethodSignature(src__gestures__team._CombiningGestureArenaEntry, () => ({
    __proto__: dart.getMethods(src__gestures__team._CombiningGestureArenaEntry.__proto__),
    resolve: dart.fnType(dart.void, [src__gestures__arena.GestureDisposition])
  }));
  dart.setGetterSignature(src__gestures__team._CombiningGestureArenaEntry, () => ({
    __proto__: dart.getGetters(src__gestures__team._CombiningGestureArenaEntry.__proto__),
    [_member$0]: src__gestures__arena.GestureArenaMember,
    [_arena$]: src__gestures__arena.GestureArenaManager,
    [_pointer$0]: core.int
  }));
  dart.setLibraryUri(src__gestures__team._CombiningGestureArenaEntry, "package:flutter_web/src/gestures/team.dart");
  dart.setFieldSignature(src__gestures__team._CombiningGestureArenaEntry, () => ({
    __proto__: dart.getFields(src__gestures__team._CombiningGestureArenaEntry.__proto__),
    [_combiner$]: dart.finalFieldType(src__gestures__team._CombiningGestureArenaMember),
    [_member$]: dart.finalFieldType(src__gestures__arena.GestureArenaMember)
  }));
  const _members = dart.privateName(src__gestures__team, "_members");
  const _resolved = dart.privateName(src__gestures__team, "_resolved");
  const _winner = dart.privateName(src__gestures__team, "_winner");
  const _entry = dart.privateName(src__gestures__team, "_entry");
  const _owner$ = dart.privateName(src__gestures__team, "_owner");
  const _close = dart.privateName(src__gestures__team, "_close");
  const _combiners = dart.privateName(src__gestures__team, "_combiners");
  const _add = dart.privateName(src__gestures__team, "_add");
  src__gestures__team._CombiningGestureArenaMember = class _CombiningGestureArenaMember extends src__gestures__arena.GestureArenaMember {
    acceptGesture(pointer) {
      let t13;
      if (!(this[_pointer$] == pointer)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/team.dart", 33, 12, "_pointer == pointer");
      if (!(this[_winner] != null || dart.test(this[_members][$isNotEmpty]))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/team.dart", 34, 12, "_winner != null || _members.isNotEmpty");
      this[_close]();
      this[_winner] == null ? this[_winner] = (t13 = this[_owner$].captain, t13 == null ? this[_members][$_get](0) : t13) : null;
      for (let member of this[_members]) {
        if (!dart.equals(member, this[_winner])) member.rejectGesture(pointer);
      }
      this[_winner].acceptGesture(pointer);
    }
    rejectGesture(pointer) {
      if (!(this[_pointer$] == pointer)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/team.dart", 45, 12, "_pointer == pointer");
      this[_close]();
      for (let member of this[_members])
        member.rejectGesture(pointer);
    }
    [_close]() {
      if (!!dart.test(this[_resolved])) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/team.dart", 51, 12, "!_resolved");
      this[_resolved] = true;
      let combiner = this[_owner$][_combiners][$remove](this[_pointer$]);
      if (!dart.equals(combiner, this)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/team.dart", 55, 12, "combiner == this");
    }
    [_add](pointer, member) {
      if (!!dart.test(this[_resolved])) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/team.dart", 59, 12, "!_resolved");
      if (!(this[_pointer$] == pointer)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/team.dart", 60, 12, "_pointer == pointer");
      this[_members][$add](member);
      this[_entry] == null ? this[_entry] = src__gestures__binding.GestureBinding.instance.gestureArena.add(pointer, this) : null;
      return new src__gestures__team._CombiningGestureArenaEntry.new(this, member);
    }
    [_resolve](member, disposition) {
      let t13;
      if (dart.test(this[_resolved])) return;
      if (dart.equals(disposition, src__gestures__arena.GestureDisposition.rejected)) {
        this[_members][$remove](member);
        member.rejectGesture(this[_pointer$]);
        if (dart.test(this[_members][$isEmpty])) this[_entry].resolve(disposition);
      } else {
        if (!dart.equals(disposition, src__gestures__arena.GestureDisposition.accepted)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/team.dart", 73, 14, "disposition == GestureDisposition.accepted");
        this[_winner] == null ? this[_winner] = (t13 = this[_owner$].captain, t13 == null ? member : t13) : null;
        this[_entry].resolve(disposition);
      }
    }
  };
  (src__gestures__team._CombiningGestureArenaMember.new = function(_owner, _pointer) {
    this[_members] = JSArrayOfGestureArenaMember().of([]);
    this[_resolved] = false;
    this[_winner] = null;
    this[_entry] = null;
    this[_owner$] = _owner;
    this[_pointer$] = _pointer;
    ;
  }).prototype = src__gestures__team._CombiningGestureArenaMember.prototype;
  dart.addTypeTests(src__gestures__team._CombiningGestureArenaMember);
  dart.setMethodSignature(src__gestures__team._CombiningGestureArenaMember, () => ({
    __proto__: dart.getMethods(src__gestures__team._CombiningGestureArenaMember.__proto__),
    acceptGesture: dart.fnType(dart.void, [core.int]),
    rejectGesture: dart.fnType(dart.void, [core.int]),
    [_close]: dart.fnType(dart.void, []),
    [_add]: dart.fnType(src__gestures__arena.GestureArenaEntry, [core.int, src__gestures__arena.GestureArenaMember]),
    [_resolve]: dart.fnType(dart.void, [src__gestures__arena.GestureArenaMember, src__gestures__arena.GestureDisposition])
  }));
  dart.setLibraryUri(src__gestures__team._CombiningGestureArenaMember, "package:flutter_web/src/gestures/team.dart");
  dart.setFieldSignature(src__gestures__team._CombiningGestureArenaMember, () => ({
    __proto__: dart.getFields(src__gestures__team._CombiningGestureArenaMember.__proto__),
    [_owner$]: dart.finalFieldType(src__gestures__team.GestureArenaTeam),
    [_members]: dart.finalFieldType(core.List$(src__gestures__arena.GestureArenaMember)),
    [_pointer$]: dart.finalFieldType(core.int),
    [_resolved]: dart.fieldType(core.bool),
    [_winner]: dart.fieldType(src__gestures__arena.GestureArenaMember),
    [_entry]: dart.fieldType(src__gestures__arena.GestureArenaEntry)
  }));
  src__gestures__team.GestureArenaTeam = class GestureArenaTeam extends core.Object {
    get captain() {
      return this[captain];
    }
    set captain(value) {
      this[captain] = value;
    }
    add(pointer, member) {
      let combiner = this[_combiners][$putIfAbsent](pointer, dart.fn(() => new src__gestures__team._CombiningGestureArenaMember.new(this, pointer), VoidTo_CombiningGestureArenaMember()));
      return combiner[_add](pointer, member);
    }
  };
  (src__gestures__team.GestureArenaTeam.new = function() {
    this[_combiners] = new (IdentityMapOfint$_CombiningGestureArenaMember()).new();
    this[captain] = null;
    ;
  }).prototype = src__gestures__team.GestureArenaTeam.prototype;
  dart.addTypeTests(src__gestures__team.GestureArenaTeam);
  const captain = Symbol("GestureArenaTeam.captain");
  dart.setMethodSignature(src__gestures__team.GestureArenaTeam, () => ({
    __proto__: dart.getMethods(src__gestures__team.GestureArenaTeam.__proto__),
    add: dart.fnType(src__gestures__arena.GestureArenaEntry, [core.int, src__gestures__arena.GestureArenaMember])
  }));
  dart.setLibraryUri(src__gestures__team.GestureArenaTeam, "package:flutter_web/src/gestures/team.dart");
  dart.setFieldSignature(src__gestures__team.GestureArenaTeam, () => ({
    __proto__: dart.getFields(src__gestures__team.GestureArenaTeam.__proto__),
    [_combiners]: dart.finalFieldType(core.Map$(core.int, src__gestures__team._CombiningGestureArenaMember)),
    captain: dart.fieldType(src__gestures__arena.GestureArenaMember)
  }));
  const _pendingPointerEvents = dart.privateName(src__gestures__binding, "_pendingPointerEvents");
  const _hitTests = dart.privateName(src__gestures__binding, "_hitTests");
  const _handlePointerDataPacket = dart.privateName(src__gestures__binding, "_handlePointerDataPacket");
  const _flushPointerEventQueue = dart.privateName(src__gestures__binding, "_flushPointerEventQueue");
  const _handlePointerEvent = dart.privateName(src__gestures__binding, "_handlePointerEvent");
  src__gestures__binding.GestureBinding = class GestureBinding extends src__foundation__binding.BindingBase {
    static get instance() {
      return src__gestures__binding.GestureBinding._instance;
    }
  };
  src__gestures__binding.GestureBinding[dart.mixinOn] = BindingBase => class GestureBinding extends BindingBase {
    get pointerRouter() {
      return this[pointerRouter];
    }
    set pointerRouter(value) {
      super.pointerRouter = value;
    }
    get gestureArena() {
      return this[gestureArena];
    }
    set gestureArena(value) {
      super.gestureArena = value;
    }
    get pointerSignalResolver() {
      return this[pointerSignalResolver];
    }
    set pointerSignalResolver(value) {
      super.pointerSignalResolver = value;
    }
    initInstances() {
      super.initInstances();
      src__gestures__binding.GestureBinding._instance = this;
      this.window.onPointerDataPacket = dart.bind(this, _handlePointerDataPacket);
    }
    unlocked() {
      super.unlocked();
      this[_flushPointerEventQueue]();
    }
    [_handlePointerDataPacket](packet) {
      this[_pendingPointerEvents].addAll(src__gestures__converter.PointerEventConverter.expand(packet.data, this.window.devicePixelRatio));
      if (!dart.test(this.locked)) this[_flushPointerEventQueue]();
    }
    cancelPointer(pointer) {
      if (dart.test(this[_pendingPointerEvents][$isEmpty]) && !dart.test(this.locked)) async.scheduleMicrotask(dart.bind(this, _flushPointerEventQueue));
      this[_pendingPointerEvents].addFirst(new src__gestures__events.PointerCancelEvent.new({pointer: pointer}));
    }
    [_flushPointerEventQueue]() {
      if (!!dart.test(this.locked)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/binding.dart", 101, 12, "!locked");
      while (dart.test(this[_pendingPointerEvents][$isNotEmpty]))
        this[_handlePointerEvent](this[_pendingPointerEvents].removeFirst());
    }
    [_handlePointerEvent](event) {
      if (!!dart.test(this.locked)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/binding.dart", 124, 12, "!locked");
      let hitTestResult = null;
      if (src__gestures__events.PointerDownEvent.is(event) || src__gestures__events.PointerSignalEvent.is(event)) {
        if (!!dart.test(this[_hitTests][$containsKey](event.pointer))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/binding.dart", 127, 14, "!_hitTests.containsKey(event.pointer)");
        hitTestResult = new src__gestures__hit_test.HitTestResult.new();
        this.hitTest(hitTestResult, event.position);
        if (src__gestures__events.PointerDownEvent.is(event)) {
          this[_hitTests][$_set](event.pointer, hitTestResult);
        }
        if (!dart.test(dart.fn(() => {
          if (dart.test(src__gestures__debug.debugPrintHitTestResults)) src__foundation__print.debugPrint(dart.str(event) + ": " + dart.str(hitTestResult));
          return true;
        }, VoidTobool())())) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/binding.dart", 133, 14, "() {\n        if (debugPrintHitTestResults)\n          debugPrint('$event: $hitTestResult');\n        return true;\n      }()");
      } else if (src__gestures__events.PointerUpEvent.is(event) || src__gestures__events.PointerCancelEvent.is(event)) {
        hitTestResult = this[_hitTests][$remove](event.pointer);
      } else if (dart.test(event.down)) {
        hitTestResult = this[_hitTests][$_get](event.pointer);
      }
      if (!dart.test(dart.fn(() => {
        if (dart.test(src__gestures__debug.debugPrintMouseHoverEvents) && src__gestures__events.PointerHoverEvent.is(event)) src__foundation__print.debugPrint(dart.str(event));
        return true;
      }, VoidTobool())())) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/binding.dart", 148, 12, "() {\n      if (debugPrintMouseHoverEvents && event is PointerHoverEvent)\n        debugPrint('$event');\n      return true;\n    }()");
      if (hitTestResult != null || src__gestures__events.PointerHoverEvent.is(event) || src__gestures__events.PointerAddedEvent.is(event) || src__gestures__events.PointerRemovedEvent.is(event)) {
        this.dispatchEvent(event, hitTestResult);
      }
    }
    hitTest(result, position) {
      result.add(new src__gestures__hit_test.HitTestEntry.new(this));
    }
    dispatchEvent(event, hitTestResult) {
      if (!!dart.test(this.locked)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/binding.dart", 175, 12, "!locked");
      if (hitTestResult == null) {
        if (!(src__gestures__events.PointerHoverEvent.is(event) || src__gestures__events.PointerAddedEvent.is(event) || src__gestures__events.PointerRemovedEvent.is(event))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/binding.dart", 179, 14, "event is PointerHoverEvent || event is PointerAddedEvent || event is PointerRemovedEvent");
        try {
          this.pointerRouter.route(event);
        } catch (e) {
          let exception = dart.getThrown(e);
          let stack = dart.stackTrace(e);
          src__foundation__assertions.FlutterError.reportError(new src__gestures__binding.FlutterErrorDetailsForPointerEventDispatcher.new({exception: exception, stack: stack, library: "gesture library", context: new src__foundation__assertions.ErrorDescription.new("while dispatching a non-hit-tested pointer event"), event: event, hitTestEntry: null, informationCollector: dart.fn(() => new (SyncIterableOfDiagnosticsPropertyOfPointerEvent()).new(function*() {
              yield new (DiagnosticsPropertyOfPointerEvent()).new("Event", event, {style: src__foundation__diagnostics.DiagnosticsTreeStyle.errorProperty});
            }), VoidToIterableOfDiagnosticsPropertyOfPointerEvent())}));
        }
        return;
      }
      for (let entry of hitTestResult.path) {
        try {
          entry.target.handleEvent(event.transformed(entry.transform), entry);
        } catch (e$) {
          let exception = dart.getThrown(e$);
          let stack = dart.stackTrace(e$);
          src__foundation__assertions.FlutterError.reportError(new src__gestures__binding.FlutterErrorDetailsForPointerEventDispatcher.new({exception: exception, stack: stack, library: "gesture library", context: new src__foundation__assertions.ErrorDescription.new("while dispatching a pointer event"), event: event, hitTestEntry: entry, informationCollector: dart.fn(() => new (SyncIterableOfDiagnosticsPropertyOfObject()).new(function*() {
              yield new (DiagnosticsPropertyOfPointerEvent()).new("Event", event, {style: src__foundation__diagnostics.DiagnosticsTreeStyle.errorProperty});
              yield new (DiagnosticsPropertyOfHitTestTarget()).new("Target", entry.target, {style: src__foundation__diagnostics.DiagnosticsTreeStyle.errorProperty});
            }), VoidToIterableOfDiagnosticsPropertyOfObject())}));
        }
      }
    }
    handleEvent(event, entry) {
      this.pointerRouter.route(event);
      if (src__gestures__events.PointerDownEvent.is(event)) {
        this.gestureArena.close(event.pointer);
      } else if (src__gestures__events.PointerUpEvent.is(event)) {
        this.gestureArena.sweep(event.pointer);
      } else if (src__gestures__events.PointerSignalEvent.is(event)) {
        this.pointerSignalResolver.resolve(event);
      }
    }
  };
  (src__gestures__binding.GestureBinding[dart.mixinNew] = function() {
    this[_pendingPointerEvents] = new (ListQueueOfPointerEvent()).new();
    this[pointerRouter] = new src__gestures__pointer_router.PointerRouter.new();
    this[gestureArena] = new src__gestures__arena.GestureArenaManager.new();
    this[pointerSignalResolver] = new src__gestures__pointer_signal_resolver.PointerSignalResolver.new();
    this[_hitTests] = new (IdentityMapOfint$HitTestResult()).new();
  }).prototype = src__gestures__binding.GestureBinding.prototype;
  dart.addTypeTests(src__gestures__binding.GestureBinding);
  const pointerRouter = Symbol("GestureBinding.pointerRouter");
  const gestureArena = Symbol("GestureBinding.gestureArena");
  const pointerSignalResolver = Symbol("GestureBinding.pointerSignalResolver");
  src__gestures__binding.GestureBinding[dart.implements] = () => [src__gestures__hit_test.HitTestable, src__gestures__hit_test.HitTestDispatcher, src__gestures__hit_test.HitTestTarget, src__foundation__binding.BindingBase];
  dart.setMethodSignature(src__gestures__binding.GestureBinding, () => ({
    __proto__: dart.getMethods(src__gestures__binding.GestureBinding.__proto__),
    [_handlePointerDataPacket]: dart.fnType(dart.void, [ui$.PointerDataPacket]),
    cancelPointer: dart.fnType(dart.void, [core.int]),
    [_flushPointerEventQueue]: dart.fnType(dart.void, []),
    [_handlePointerEvent]: dart.fnType(dart.void, [src__gestures__events.PointerEvent]),
    hitTest: dart.fnType(dart.void, [src__gestures__hit_test.HitTestResult, ui$.Offset]),
    dispatchEvent: dart.fnType(dart.void, [src__gestures__events.PointerEvent, src__gestures__hit_test.HitTestResult]),
    handleEvent: dart.fnType(dart.void, [src__gestures__events.PointerEvent, src__gestures__hit_test.HitTestEntry])
  }));
  dart.setLibraryUri(src__gestures__binding.GestureBinding, "package:flutter_web/src/gestures/binding.dart");
  dart.setFieldSignature(src__gestures__binding.GestureBinding, () => ({
    __proto__: dart.getFields(src__gestures__binding.GestureBinding.__proto__),
    [_pendingPointerEvents]: dart.finalFieldType(collection.Queue$(src__gestures__events.PointerEvent)),
    pointerRouter: dart.finalFieldType(src__gestures__pointer_router.PointerRouter),
    gestureArena: dart.finalFieldType(src__gestures__arena.GestureArenaManager),
    pointerSignalResolver: dart.finalFieldType(src__gestures__pointer_signal_resolver.PointerSignalResolver),
    [_hitTests]: dart.finalFieldType(core.Map$(core.int, src__gestures__hit_test.HitTestResult))
  }));
  dart.defineLazy(src__gestures__binding.GestureBinding, {
    /*src__gestures__binding.GestureBinding._instance*/get _instance() {
      return null;
    },
    set _instance(_) {}
  });
  src__gestures__binding.FlutterErrorDetailsForPointerEventDispatcher = class FlutterErrorDetailsForPointerEventDispatcher extends src__foundation__assertions.FlutterErrorDetails {
    get event() {
      return this[event$0];
    }
    set event(value) {
      super.event = value;
    }
    get hitTestEntry() {
      return this[hitTestEntry$];
    }
    set hitTestEntry(value) {
      super.hitTestEntry = value;
    }
  };
  (src__gestures__binding.FlutterErrorDetailsForPointerEventDispatcher.new = function(opts) {
    let exception = opts && 'exception' in opts ? opts.exception : null;
    let stack = opts && 'stack' in opts ? opts.stack : null;
    let library = opts && 'library' in opts ? opts.library : null;
    let context = opts && 'context' in opts ? opts.context : null;
    let event = opts && 'event' in opts ? opts.event : null;
    let hitTestEntry = opts && 'hitTestEntry' in opts ? opts.hitTestEntry : null;
    let informationCollector = opts && 'informationCollector' in opts ? opts.informationCollector : null;
    let silent = opts && 'silent' in opts ? opts.silent : false;
    this[event$0] = event;
    this[hitTestEntry$] = hitTestEntry;
    src__gestures__binding.FlutterErrorDetailsForPointerEventDispatcher.__proto__.new.call(this, {exception: exception, stack: stack, library: library, context: context, informationCollector: informationCollector, silent: silent});
    ;
  }).prototype = src__gestures__binding.FlutterErrorDetailsForPointerEventDispatcher.prototype;
  dart.addTypeTests(src__gestures__binding.FlutterErrorDetailsForPointerEventDispatcher);
  const event$0 = Symbol("FlutterErrorDetailsForPointerEventDispatcher.event");
  const hitTestEntry$ = Symbol("FlutterErrorDetailsForPointerEventDispatcher.hitTestEntry");
  dart.setLibraryUri(src__gestures__binding.FlutterErrorDetailsForPointerEventDispatcher, "package:flutter_web/src/gestures/binding.dart");
  dart.setFieldSignature(src__gestures__binding.FlutterErrorDetailsForPointerEventDispatcher, () => ({
    __proto__: dart.getFields(src__gestures__binding.FlutterErrorDetailsForPointerEventDispatcher.__proto__),
    event: dart.finalFieldType(src__gestures__events.PointerEvent),
    hitTestEntry: dart.finalFieldType(src__gestures__hit_test.HitTestEntry)
  }));
  const _firstRegisteredCallback = dart.privateName(src__gestures__pointer_signal_resolver, "_firstRegisteredCallback");
  const _currentEvent = dart.privateName(src__gestures__pointer_signal_resolver, "_currentEvent");
  src__gestures__pointer_signal_resolver.PointerSignalResolver = class PointerSignalResolver extends core.Object {
    register(event, callback) {
      if (!(event != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/pointer_signal_resolver.dart", 31, 12, "event != null");
      if (!(callback != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/pointer_signal_resolver.dart", 32, 12, "callback != null");
      if (!(this[_currentEvent] == null || dart.equals(this[_currentEvent], event))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/pointer_signal_resolver.dart", 33, 12, "_currentEvent == null || _currentEvent == event");
      if (this[_firstRegisteredCallback] != null) {
        return;
      }
      this[_currentEvent] = event;
      this[_firstRegisteredCallback] = callback;
    }
    resolve(event) {
      let t15;
      if (this[_firstRegisteredCallback] == null) {
        if (!(this[_currentEvent] == null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/pointer_signal_resolver.dart", 48, 14, "_currentEvent == null");
        return;
      }
      if (!dart.equals((t15 = this[_currentEvent].original, t15 == null ? this[_currentEvent] : t15), event)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/pointer_signal_resolver.dart", 51, 12, "(_currentEvent.original ?? _currentEvent) == event");
      try {
        this[_firstRegisteredCallback](this[_currentEvent]);
      } catch (e) {
        let exception = dart.getThrown(e);
        let stack = dart.stackTrace(e);
        src__foundation__assertions.FlutterError.reportError(new src__foundation__assertions.FlutterErrorDetails.new({exception: exception, stack: stack, library: "gesture library", context: new src__foundation__assertions.ErrorDescription.new("while resolving a PointerSignalEvent"), informationCollector: dart.fn(() => new (SyncIterableOfDiagnosticsPropertyOfPointerSignalEvent()).new(function*() {
            yield new (DiagnosticsPropertyOfPointerSignalEvent()).new("Event", event, {style: src__foundation__diagnostics.DiagnosticsTreeStyle.errorProperty});
          }), VoidToIterableOfDiagnosticsPropertyOfPointerSignalEvent())}));
      }
      this[_firstRegisteredCallback] = null;
      this[_currentEvent] = null;
    }
  };
  (src__gestures__pointer_signal_resolver.PointerSignalResolver.new = function() {
    this[_firstRegisteredCallback] = null;
    this[_currentEvent] = null;
    ;
  }).prototype = src__gestures__pointer_signal_resolver.PointerSignalResolver.prototype;
  dart.addTypeTests(src__gestures__pointer_signal_resolver.PointerSignalResolver);
  dart.setMethodSignature(src__gestures__pointer_signal_resolver.PointerSignalResolver, () => ({
    __proto__: dart.getMethods(src__gestures__pointer_signal_resolver.PointerSignalResolver.__proto__),
    register: dart.fnType(dart.void, [src__gestures__events.PointerSignalEvent, dart.fnType(dart.void, [src__gestures__events.PointerSignalEvent])]),
    resolve: dart.fnType(dart.void, [src__gestures__events.PointerSignalEvent])
  }));
  dart.setLibraryUri(src__gestures__pointer_signal_resolver.PointerSignalResolver, "package:flutter_web/src/gestures/pointer_signal_resolver.dart");
  dart.setFieldSignature(src__gestures__pointer_signal_resolver.PointerSignalResolver, () => ({
    __proto__: dart.getFields(src__gestures__pointer_signal_resolver.PointerSignalResolver.__proto__),
    [_firstRegisteredCallback]: dart.fieldType(dart.fnType(dart.void, [src__gestures__events.PointerSignalEvent])),
    [_currentEvent]: dart.fieldType(src__gestures__events.PointerSignalEvent)
  }));
  src__gestures__hit_test.HitTestable = class HitTestable extends core.Object {
    static __() {
      return null;
    }
  };
  (src__gestures__hit_test.HitTestable[dart.mixinNew] = function() {
  }).prototype = src__gestures__hit_test.HitTestable.prototype;
  dart.addTypeTests(src__gestures__hit_test.HitTestable);
  dart.setLibraryUri(src__gestures__hit_test.HitTestable, "package:flutter_web/src/gestures/hit_test.dart");
  src__gestures__hit_test.HitTestDispatcher = class HitTestDispatcher extends core.Object {
    static __() {
      return null;
    }
  };
  (src__gestures__hit_test.HitTestDispatcher[dart.mixinNew] = function() {
  }).prototype = src__gestures__hit_test.HitTestDispatcher.prototype;
  dart.addTypeTests(src__gestures__hit_test.HitTestDispatcher);
  dart.setLibraryUri(src__gestures__hit_test.HitTestDispatcher, "package:flutter_web/src/gestures/hit_test.dart");
  src__gestures__hit_test.HitTestTarget = class HitTestTarget extends core.Object {
    static __() {
      return null;
    }
  };
  (src__gestures__hit_test.HitTestTarget[dart.mixinNew] = function() {
  }).prototype = src__gestures__hit_test.HitTestTarget.prototype;
  dart.addTypeTests(src__gestures__hit_test.HitTestTarget);
  dart.setLibraryUri(src__gestures__hit_test.HitTestTarget, "package:flutter_web/src/gestures/hit_test.dart");
  const _transform = dart.privateName(src__gestures__hit_test, "_transform");
  src__gestures__hit_test.HitTestEntry = class HitTestEntry extends core.Object {
    get target() {
      return this[target$];
    }
    set target(value) {
      super.target = value;
    }
    toString() {
      return dart.str(this.target);
    }
    get transform() {
      return this[_transform];
    }
  };
  (src__gestures__hit_test.HitTestEntry.new = function(target) {
    this[_transform] = null;
    this[target$] = target;
    ;
  }).prototype = src__gestures__hit_test.HitTestEntry.prototype;
  dart.addTypeTests(src__gestures__hit_test.HitTestEntry);
  const target$ = Symbol("HitTestEntry.target");
  dart.setGetterSignature(src__gestures__hit_test.HitTestEntry, () => ({
    __proto__: dart.getGetters(src__gestures__hit_test.HitTestEntry.__proto__),
    transform: vector_math_64$.Matrix4
  }));
  dart.setLibraryUri(src__gestures__hit_test.HitTestEntry, "package:flutter_web/src/gestures/hit_test.dart");
  dart.setFieldSignature(src__gestures__hit_test.HitTestEntry, () => ({
    __proto__: dart.getFields(src__gestures__hit_test.HitTestEntry.__proto__),
    target: dart.finalFieldType(src__gestures__hit_test.HitTestTarget),
    [_transform]: dart.fieldType(vector_math_64$.Matrix4)
  }));
  dart.defineExtensionMethods(src__gestures__hit_test.HitTestEntry, ['toString']);
  const _path = dart.privateName(src__gestures__hit_test, "_path");
  const _transforms = dart.privateName(src__gestures__hit_test, "_transforms");
  const _debugVectorMoreOrLessEquals = dart.privateName(src__gestures__hit_test, "_debugVectorMoreOrLessEquals");
  src__gestures__hit_test.HitTestResult = class HitTestResult extends core.Object {
    get path() {
      return this[_path];
    }
    add(entry) {
      if (!(entry[_transform] == null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/hit_test.dart", 107, 12, "entry._transform == null");
      entry[_transform] = dart.test(this[_transforms][$isEmpty]) ? null : this[_transforms][$last];
      this[_path][$add](entry);
    }
    pushTransform(transform) {
      if (!(transform != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/hit_test.dart", 138, 12, "transform != null");
      if (!(dart.test(this[_debugVectorMoreOrLessEquals](transform.getRow(2), vector_math_64$.Vector4.new(0.0, 0.0, 1.0, 0.0))) && dart.test(this[_debugVectorMoreOrLessEquals](transform.getColumn(2), vector_math_64$.Vector4.new(0.0, 0.0, 1.0, 0.0))))) dart.assertFailed("The third row and third column of a transform matrix for pointer " + "events must be Vector4(0, 0, 1, 0) to ensure that a transformed " + "point is directly under the pointer device. Did you forget to run the paint " + "matrix through PointerEvent.removePerspectiveTransform?" + "The provided matrix is:\n" + dart.str(transform), "org-dartlang-app:///packages/flutter_web/src/gestures/hit_test.dart", 140, 7, "_debugVectorMoreOrLessEquals(transform.getRow(2), Vector4(0, 0, 1, 0)) &&\n      _debugVectorMoreOrLessEquals(transform.getColumn(2), Vector4(0, 0, 1, 0))");
      this[_transforms].add(vector_math_64$.Matrix4._check(dart.test(this[_transforms][$isEmpty]) ? transform : transform['*'](this[_transforms][$last])));
    }
    popTransform() {
      if (!dart.test(this[_transforms][$isNotEmpty])) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/hit_test.dart", 166, 12, "_transforms.isNotEmpty");
      this[_transforms].removeLast();
    }
    [_debugVectorMoreOrLessEquals](a, b, opts) {
      let epsilon = opts && 'epsilon' in opts ? opts.epsilon : src__foundation__constants.precisionErrorTolerance;
      let result = true;
      if (!dart.test(dart.fn(() => {
        let difference = a['-'](b);
        result = difference.storage[$every](dart.fn(component => component[$abs]() < dart.notNull(epsilon), doubleTobool()));
        return true;
      }, VoidTobool())())) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/hit_test.dart", 172, 12, "() {\n      final Vector4 difference = a - b;\n      result = difference.storage.every((double component) => component.abs() < epsilon);\n      return true;\n    }()");
      return result;
    }
    toString() {
      return "HitTestResult(" + dart.str(dart.test(this[_path][$isEmpty]) ? "<empty path>" : this[_path][$join](", ")) + ")";
    }
  };
  (src__gestures__hit_test.HitTestResult.new = function() {
    this[_path] = JSArrayOfHitTestEntry().of([]);
    this[_transforms] = new (ListQueueOfMatrix4()).new();
    ;
  }).prototype = src__gestures__hit_test.HitTestResult.prototype;
  (src__gestures__hit_test.HitTestResult.wrap = function(result) {
    this[_path] = result[_path];
    this[_transforms] = result[_transforms];
    ;
  }).prototype = src__gestures__hit_test.HitTestResult.prototype;
  dart.addTypeTests(src__gestures__hit_test.HitTestResult);
  dart.setMethodSignature(src__gestures__hit_test.HitTestResult, () => ({
    __proto__: dart.getMethods(src__gestures__hit_test.HitTestResult.__proto__),
    add: dart.fnType(dart.void, [src__gestures__hit_test.HitTestEntry]),
    pushTransform: dart.fnType(dart.void, [vector_math_64$.Matrix4]),
    popTransform: dart.fnType(dart.void, []),
    [_debugVectorMoreOrLessEquals]: dart.fnType(core.bool, [vector_math_64$.Vector4, vector_math_64$.Vector4], {epsilon: core.double})
  }));
  dart.setGetterSignature(src__gestures__hit_test.HitTestResult, () => ({
    __proto__: dart.getGetters(src__gestures__hit_test.HitTestResult.__proto__),
    path: core.Iterable$(src__gestures__hit_test.HitTestEntry)
  }));
  dart.setLibraryUri(src__gestures__hit_test.HitTestResult, "package:flutter_web/src/gestures/hit_test.dart");
  dart.setFieldSignature(src__gestures__hit_test.HitTestResult, () => ({
    __proto__: dart.getFields(src__gestures__hit_test.HitTestResult.__proto__),
    [_path]: dart.finalFieldType(core.List$(src__gestures__hit_test.HitTestEntry)),
    [_transforms]: dart.finalFieldType(collection.Queue$(vector_math_64$.Matrix4))
  }));
  dart.defineExtensionMethods(src__gestures__hit_test.HitTestResult, ['toString']);
  src__gestures__debug.debugAssertAllGesturesVarsUnset = function(reason) {
    if (!dart.test(dart.fn(() => {
      if (dart.test(src__gestures__debug.debugPrintHitTestResults) || dart.test(src__gestures__debug.debugPrintGestureArenaDiagnostics) || dart.test(src__gestures__debug.debugPrintRecognizerCallbacksTrace)) dart.throw(src__foundation__assertions.FlutterError.new(reason));
      return true;
    }, VoidTobool())())) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/debug.dart", 61, 10, "() {\n    if (debugPrintHitTestResults ||\n        debugPrintGestureArenaDiagnostics ||\n        debugPrintRecognizerCallbacksTrace)\n      throw FlutterError(reason);\n    return true;\n  }()");
    return true;
  };
  dart.defineLazy(src__gestures__debug, {
    /*src__gestures__debug.debugPrintHitTestResults*/get debugPrintHitTestResults() {
      return false;
    },
    set debugPrintHitTestResults(_) {},
    /*src__gestures__debug.debugPrintMouseHoverEvents*/get debugPrintMouseHoverEvents() {
      return false;
    },
    set debugPrintMouseHoverEvents(_) {},
    /*src__gestures__debug.debugPrintGestureArenaDiagnostics*/get debugPrintGestureArenaDiagnostics() {
      return false;
    },
    set debugPrintGestureArenaDiagnostics(_) {},
    /*src__gestures__debug.debugPrintRecognizerCallbacksTrace*/get debugPrintRecognizerCallbacksTrace() {
      return false;
    },
    set debugPrintRecognizerCallbacksTrace(_) {}
  });
  const _pointer = dart.privateName(src__gestures__converter, "_pointer");
  const _down = dart.privateName(src__gestures__converter, "_down");
  src__gestures__converter._PointerState = class _PointerState extends core.Object {
    get pointer() {
      return this[_pointer];
    }
    startNewPointer() {
      src__gestures__converter._PointerState._pointerCount = dart.notNull(src__gestures__converter._PointerState._pointerCount) + 1;
      this[_pointer] = src__gestures__converter._PointerState._pointerCount;
    }
    get down() {
      return this[_down];
    }
    setDown() {
      if (!!dart.test(this[_down])) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/converter.dart", 26, 12, "!_down");
      this[_down] = true;
    }
    setUp() {
      if (!dart.test(this[_down])) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/converter.dart", 30, 12, "_down");
      this[_down] = false;
    }
    deltaTo(to) {
      return to['-'](this.lastPosition);
    }
    toString() {
      return "_PointerState(pointer: " + dart.str(this.pointer) + ", down: " + dart.str(this.down) + ", lastPosition: " + dart.str(this.lastPosition) + ")";
    }
  };
  (src__gestures__converter._PointerState.new = function(lastPosition) {
    this[_pointer] = null;
    this[_down] = false;
    this.lastPosition = lastPosition;
    ;
  }).prototype = src__gestures__converter._PointerState.prototype;
  dart.addTypeTests(src__gestures__converter._PointerState);
  dart.setMethodSignature(src__gestures__converter._PointerState, () => ({
    __proto__: dart.getMethods(src__gestures__converter._PointerState.__proto__),
    startNewPointer: dart.fnType(dart.void, []),
    setDown: dart.fnType(dart.void, []),
    setUp: dart.fnType(dart.void, []),
    deltaTo: dart.fnType(ui$.Offset, [ui$.Offset])
  }));
  dart.setGetterSignature(src__gestures__converter._PointerState, () => ({
    __proto__: dart.getGetters(src__gestures__converter._PointerState.__proto__),
    pointer: core.int,
    down: core.bool
  }));
  dart.setLibraryUri(src__gestures__converter._PointerState, "package:flutter_web/src/gestures/converter.dart");
  dart.setFieldSignature(src__gestures__converter._PointerState, () => ({
    __proto__: dart.getFields(src__gestures__converter._PointerState.__proto__),
    [_pointer]: dart.fieldType(core.int),
    [_down]: dart.fieldType(core.bool),
    lastPosition: dart.fieldType(ui$.Offset)
  }));
  dart.defineExtensionMethods(src__gestures__converter._PointerState, ['toString']);
  dart.defineLazy(src__gestures__converter._PointerState, {
    /*src__gestures__converter._PointerState._pointerCount*/get _pointerCount() {
      return 0;
    },
    set _pointerCount(_) {}
  });
  src__gestures__converter.PointerEventConverter = class PointerEventConverter extends core.Object {
    static clearPointers() {
      return src__gestures__converter.PointerEventConverter._pointers[$clear]();
    }
    static _ensureStateForPointer(datum, position) {
      return src__gestures__converter.PointerEventConverter._pointers[$putIfAbsent](datum.device, dart.fn(() => new src__gestures__converter._PointerState.new(position), VoidTo_PointerState()));
    }
    static expand(data, devicePixelRatio) {
      return new (SyncIterableOfPointerEvent()).new(function* expand() {
        for (let datum of data) {
          let position = new ui$.Offset.new(datum.physicalX, datum.physicalY)['/'](devicePixelRatio);
          let radiusMinor = src__gestures__converter.PointerEventConverter._toLogicalPixels(datum.radiusMinor, devicePixelRatio);
          let radiusMajor = src__gestures__converter.PointerEventConverter._toLogicalPixels(datum.radiusMajor, devicePixelRatio);
          let radiusMin = src__gestures__converter.PointerEventConverter._toLogicalPixels(datum.radiusMin, devicePixelRatio);
          let radiusMax = src__gestures__converter.PointerEventConverter._toLogicalPixels(datum.radiusMax, devicePixelRatio);
          let timeStamp = datum.timeStamp;
          let kind = datum.kind;
          if (!(datum.change != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/converter.dart", 107, 14, "datum.change != null");
          if (datum.signalKind == null || dart.equals(datum.signalKind, ui$.PointerSignalKind.none)) {
            switch (datum.change) {
              case ui$.PointerChange.add:
              {
                if (!!dart.test(src__gestures__converter.PointerEventConverter._pointers[$containsKey](datum.device))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/converter.dart", 111, 20, "!_pointers.containsKey(datum.device)");
                let state = src__gestures__converter.PointerEventConverter._ensureStateForPointer(datum, position);
                if (!dart.equals(state.lastPosition, position)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/converter.dart", 113, 20, "state.lastPosition == position");
                yield new src__gestures__events.PointerAddedEvent.new({timeStamp: timeStamp, kind: kind, device: datum.device, position: position, obscured: datum.obscured, pressureMin: datum.pressureMin, pressureMax: datum.pressureMax, distance: datum.distance, distanceMax: datum.distanceMax, radiusMin: radiusMin, radiusMax: radiusMax, orientation: datum.orientation, tilt: datum.tilt});
                break;
              }
              case ui$.PointerChange.hover:
              {
                let alreadyAdded = src__gestures__converter.PointerEventConverter._pointers[$containsKey](datum.device);
                let state = src__gestures__converter.PointerEventConverter._ensureStateForPointer(datum, position);
                if (!!dart.test(state.down)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/converter.dart", 133, 20, "!state.down");
                if (!dart.test(alreadyAdded)) {
                  if (!dart.equals(state.lastPosition, position)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/converter.dart", 135, 22, "state.lastPosition == position");
                  yield new src__gestures__events.PointerAddedEvent.new({timeStamp: timeStamp, kind: kind, device: datum.device, position: position, obscured: datum.obscured, pressureMin: datum.pressureMin, pressureMax: datum.pressureMax, distance: datum.distance, distanceMax: datum.distanceMax, radiusMin: radiusMin, radiusMax: radiusMax, orientation: datum.orientation, tilt: datum.tilt});
                }
                yield new src__gestures__events.PointerHoverEvent.new({timeStamp: timeStamp, kind: kind, device: datum.device, position: position, delta: state.deltaTo(position), buttons: datum.buttons, obscured: datum.obscured, pressureMin: datum.pressureMin, pressureMax: datum.pressureMax, distance: datum.distance, distanceMax: datum.distanceMax, size: datum.size, radiusMajor: radiusMajor, radiusMinor: radiusMinor, radiusMin: radiusMin, radiusMax: radiusMax, orientation: datum.orientation, tilt: datum.tilt});
                state.lastPosition = position;
                break;
              }
              case ui$.PointerChange.down:
              {
                let alreadyAdded = src__gestures__converter.PointerEventConverter._pointers[$containsKey](datum.device);
                let state = src__gestures__converter.PointerEventConverter._ensureStateForPointer(datum, position);
                if (!!dart.test(state.down)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/converter.dart", 177, 20, "!state.down");
                if (!dart.test(alreadyAdded)) {
                  if (!dart.equals(state.lastPosition, position)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/converter.dart", 179, 22, "state.lastPosition == position");
                  yield new src__gestures__events.PointerAddedEvent.new({timeStamp: timeStamp, kind: kind, device: datum.device, position: position, obscured: datum.obscured, pressureMin: datum.pressureMin, pressureMax: datum.pressureMax, distance: datum.distance, distanceMax: datum.distanceMax, radiusMin: radiusMin, radiusMax: radiusMax, orientation: datum.orientation, tilt: datum.tilt});
                }
                if (!dart.equals(state.lastPosition, position)) {
                  yield new src__gestures__events.PointerHoverEvent.new({timeStamp: timeStamp, kind: kind, device: datum.device, position: position, delta: state.deltaTo(position), buttons: datum.buttons, obscured: datum.obscured, pressureMin: datum.pressureMin, pressureMax: datum.pressureMax, distance: datum.distance, distanceMax: datum.distanceMax, size: datum.size, radiusMajor: radiusMajor, radiusMinor: radiusMinor, radiusMin: radiusMin, radiusMax: radiusMax, orientation: datum.orientation, tilt: datum.tilt, synthesized: true});
                  state.lastPosition = position;
                }
                state.startNewPointer();
                state.setDown();
                yield new src__gestures__events.PointerDownEvent.new({timeStamp: timeStamp, pointer: state.pointer, kind: kind, device: datum.device, position: position, buttons: src__gestures__converter._synthesiseDownButtons(datum.buttons, kind), obscured: datum.obscured, pressure: datum.pressure, pressureMin: datum.pressureMin, pressureMax: datum.pressureMax, distanceMax: datum.distanceMax, size: datum.size, radiusMajor: radiusMajor, radiusMinor: radiusMinor, radiusMin: radiusMin, radiusMax: radiusMax, orientation: datum.orientation, tilt: datum.tilt});
                break;
              }
              case ui$.PointerChange.move:
              {
                if (!dart.test(src__gestures__converter.PointerEventConverter._pointers[$containsKey](datum.device))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/converter.dart", 250, 20, "_pointers.containsKey(datum.device)");
                let state = src__gestures__converter.PointerEventConverter._pointers[$_get](datum.device);
                if (!dart.test(state.down)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/converter.dart", 252, 20, "state.down");
                yield new src__gestures__events.PointerMoveEvent.new({timeStamp: timeStamp, pointer: state.pointer, kind: kind, device: datum.device, position: position, delta: state.deltaTo(position), buttons: src__gestures__converter._synthesiseDownButtons(datum.buttons, kind), obscured: datum.obscured, pressure: datum.pressure, pressureMin: datum.pressureMin, pressureMax: datum.pressureMax, distanceMax: datum.distanceMax, size: datum.size, radiusMajor: radiusMajor, radiusMinor: radiusMinor, radiusMin: radiusMin, radiusMax: radiusMax, orientation: datum.orientation, tilt: datum.tilt, platformData: datum.platformData});
                state.lastPosition = position;
                break;
              }
              case ui$.PointerChange.up:
              case ui$.PointerChange.cancel:
              {
                if (!dart.test(src__gestures__converter.PointerEventConverter._pointers[$containsKey](datum.device))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/converter.dart", 279, 20, "_pointers.containsKey(datum.device)");
                let state = src__gestures__converter.PointerEventConverter._pointers[$_get](datum.device);
                if (!dart.test(state.down)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/converter.dart", 281, 20, "state.down");
                if (!dart.equals(position, state.lastPosition)) {
                  yield new src__gestures__events.PointerMoveEvent.new({timeStamp: timeStamp, pointer: state.pointer, kind: kind, device: datum.device, position: position, delta: state.deltaTo(position), buttons: src__gestures__converter._synthesiseDownButtons(datum.buttons, kind), obscured: datum.obscured, pressure: datum.pressure, pressureMin: datum.pressureMin, pressureMax: datum.pressureMax, distanceMax: datum.distanceMax, size: datum.size, radiusMajor: radiusMajor, radiusMinor: radiusMinor, radiusMin: radiusMin, radiusMax: radiusMax, orientation: datum.orientation, tilt: datum.tilt, synthesized: true});
                  state.lastPosition = position;
                }
                if (!dart.equals(position, state.lastPosition)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/converter.dart", 312, 20, "position == state.lastPosition");
                state.setUp();
                if (dart.equals(datum.change, ui$.PointerChange.up)) {
                  yield new src__gestures__events.PointerUpEvent.new({timeStamp: timeStamp, pointer: state.pointer, kind: kind, device: datum.device, position: position, buttons: datum.buttons, obscured: datum.obscured, pressure: datum.pressure, pressureMin: datum.pressureMin, pressureMax: datum.pressureMax, distance: datum.distance, distanceMax: datum.distanceMax, size: datum.size, radiusMajor: radiusMajor, radiusMinor: radiusMinor, radiusMin: radiusMin, radiusMax: radiusMax, orientation: datum.orientation, tilt: datum.tilt});
                } else {
                  yield new src__gestures__events.PointerCancelEvent.new({timeStamp: timeStamp, pointer: state.pointer, kind: kind, device: datum.device, position: position, buttons: datum.buttons, obscured: datum.obscured, pressureMin: datum.pressureMin, pressureMax: datum.pressureMax, distance: datum.distance, distanceMax: datum.distanceMax, size: datum.size, radiusMajor: radiusMajor, radiusMinor: radiusMinor, radiusMin: radiusMin, radiusMax: radiusMax, orientation: datum.orientation, tilt: datum.tilt});
                }
                break;
              }
              case ui$.PointerChange.remove:
              {
                if (!dart.test(src__gestures__converter.PointerEventConverter._pointers[$containsKey](datum.device))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/converter.dart", 360, 20, "_pointers.containsKey(datum.device)");
                let state = src__gestures__converter.PointerEventConverter._pointers[$_get](datum.device);
                if (dart.test(state.down)) {
                  yield new src__gestures__events.PointerCancelEvent.new({timeStamp: timeStamp, pointer: state.pointer, kind: kind, device: datum.device, position: state.lastPosition, buttons: datum.buttons, obscured: datum.obscured, pressureMin: datum.pressureMin, pressureMax: datum.pressureMax, distance: datum.distance, distanceMax: datum.distanceMax, size: datum.size, radiusMajor: radiusMajor, radiusMinor: radiusMinor, radiusMin: radiusMin, radiusMax: radiusMax, orientation: datum.orientation, tilt: datum.tilt});
                }
                if (!dart.equals(position, state.lastPosition)) {
                  yield new src__gestures__events.PointerHoverEvent.new({timeStamp: timeStamp, kind: kind, device: datum.device, position: position, delta: state.deltaTo(position), buttons: datum.buttons, obscured: datum.obscured, pressureMin: datum.pressureMin, pressureMax: datum.pressureMax, distance: datum.distance, distanceMax: datum.distanceMax, size: datum.size, radiusMajor: radiusMajor, radiusMinor: radiusMinor, radiusMin: radiusMin, radiusMax: radiusMax, orientation: datum.orientation, tilt: datum.tilt, synthesized: true});
                }
                src__gestures__converter.PointerEventConverter._pointers[$remove](datum.device);
                yield new src__gestures__events.PointerRemovedEvent.new({timeStamp: timeStamp, kind: kind, device: datum.device, position: position, obscured: datum.obscured, pressureMin: datum.pressureMin, pressureMax: datum.pressureMax, distanceMax: datum.distanceMax, radiusMin: radiusMin, radiusMax: radiusMax});
                break;
              }
            }
          } else {
            switch (datum.signalKind) {
              case ui$.PointerSignalKind.scroll:
              {
                if (!dart.test(src__gestures__converter.PointerEventConverter._pointers[$containsKey](datum.device))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/converter.dart", 426, 20, "_pointers.containsKey(datum.device)");
                let state = src__gestures__converter.PointerEventConverter._ensureStateForPointer(datum, position);
                if (!dart.equals(state.lastPosition, position)) {
                  if (dart.test(state.down)) {
                    yield new src__gestures__events.PointerMoveEvent.new({timeStamp: timeStamp, pointer: state.pointer, kind: kind, device: datum.device, position: position, delta: state.deltaTo(position), buttons: src__gestures__converter._synthesiseDownButtons(datum.buttons, kind), obscured: datum.obscured, pressure: datum.pressure, pressureMin: datum.pressureMin, pressureMax: datum.pressureMax, distanceMax: datum.distanceMax, size: datum.size, radiusMajor: radiusMajor, radiusMinor: radiusMinor, radiusMin: radiusMin, radiusMax: radiusMax, orientation: datum.orientation, tilt: datum.tilt, synthesized: true});
                  } else {
                    yield new src__gestures__events.PointerHoverEvent.new({timeStamp: timeStamp, kind: kind, device: datum.device, position: position, delta: state.deltaTo(position), buttons: datum.buttons, obscured: datum.obscured, pressureMin: datum.pressureMin, pressureMax: datum.pressureMax, distance: datum.distance, distanceMax: datum.distanceMax, size: datum.size, radiusMajor: radiusMajor, radiusMinor: radiusMinor, radiusMin: radiusMin, radiusMax: radiusMax, orientation: datum.orientation, tilt: datum.tilt, synthesized: true});
                  }
                  state.lastPosition = position;
                }
                let scrollDelta = new ui$.Offset.new(datum.scrollDeltaX, datum.scrollDeltaY)['/'](devicePixelRatio);
                yield new src__gestures__events.PointerScrollEvent.new({timeStamp: timeStamp, kind: kind, device: datum.device, position: position, scrollDelta: scrollDelta});
                break;
              }
              case ui$.PointerSignalKind.none:
              {
                if (!false) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/converter.dart", 492, 20, "false");
                break;
              }
              case ui$.PointerSignalKind.unknown:
              {
                break;
              }
            }
          }
        }
      });
    }
    static _toLogicalPixels(physicalPixels, devicePixelRatio) {
      return physicalPixels == null ? null : dart.notNull(physicalPixels) / dart.notNull(devicePixelRatio);
    }
  };
  (src__gestures__converter.PointerEventConverter.__ = function() {
    ;
  }).prototype = src__gestures__converter.PointerEventConverter.prototype;
  dart.addTypeTests(src__gestures__converter.PointerEventConverter);
  dart.setLibraryUri(src__gestures__converter.PointerEventConverter, "package:flutter_web/src/gestures/converter.dart");
  dart.defineLazy(src__gestures__converter.PointerEventConverter, {
    /*src__gestures__converter.PointerEventConverter._pointers*/get _pointers() {
      return new (IdentityMapOfint$_PointerState()).new();
    }
  });
  src__gestures__converter._synthesiseDownButtons = function(buttons, kind) {
    switch (kind) {
      case ui$.PointerDeviceKind.mouse:
      {
        return buttons;
      }
      case ui$.PointerDeviceKind.touch:
      case ui$.PointerDeviceKind.stylus:
      case ui$.PointerDeviceKind.invertedStylus:
      {
        return (dart.notNull(buttons) | dart.notNull(src__gestures__events.kPrimaryButton)) >>> 0;
      }
      default:
      {
        return buttons === 0 ? src__gestures__events.kPrimaryButton : buttons;
      }
    }
  };
  const _name$4 = dart.privateName(src__gestures__arena, "_name");
  src__gestures__arena.GestureDisposition = class GestureDisposition extends core.Object {
    toString() {
      return this[_name$4];
    }
  };
  (src__gestures__arena.GestureDisposition.new = function(index, _name) {
    this.index = index;
    this[_name$4] = _name;
    ;
  }).prototype = src__gestures__arena.GestureDisposition.prototype;
  dart.addTypeTests(src__gestures__arena.GestureDisposition);
  dart.setLibraryUri(src__gestures__arena.GestureDisposition, "package:flutter_web/src/gestures/arena.dart");
  dart.setFieldSignature(src__gestures__arena.GestureDisposition, () => ({
    __proto__: dart.getFields(src__gestures__arena.GestureDisposition.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$4]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(src__gestures__arena.GestureDisposition, ['toString']);
  src__gestures__arena.GestureDisposition.accepted = dart.const(new src__gestures__arena.GestureDisposition.new(0, "GestureDisposition.accepted"));
  src__gestures__arena.GestureDisposition.rejected = dart.const(new src__gestures__arena.GestureDisposition.new(1, "GestureDisposition.rejected"));
  src__gestures__arena.GestureDisposition.values = dart.constList([src__gestures__arena.GestureDisposition.accepted, src__gestures__arena.GestureDisposition.rejected], src__gestures__arena.GestureDisposition);
  const _resolve$ = dart.privateName(src__gestures__arena, "_resolve");
  src__gestures__arena.GestureArenaEntry = class GestureArenaEntry extends core.Object {
    resolve(disposition) {
      this[_arena$][_resolve$](this[_pointer$0], this[_member$0], disposition);
    }
  };
  (src__gestures__arena.GestureArenaEntry.__ = function(_arena, _pointer, _member) {
    this[_arena$] = _arena;
    this[_pointer$0] = _pointer;
    this[_member$0] = _member;
    ;
  }).prototype = src__gestures__arena.GestureArenaEntry.prototype;
  dart.addTypeTests(src__gestures__arena.GestureArenaEntry);
  dart.setMethodSignature(src__gestures__arena.GestureArenaEntry, () => ({
    __proto__: dart.getMethods(src__gestures__arena.GestureArenaEntry.__proto__),
    resolve: dart.fnType(dart.void, [src__gestures__arena.GestureDisposition])
  }));
  dart.setLibraryUri(src__gestures__arena.GestureArenaEntry, "package:flutter_web/src/gestures/arena.dart");
  dart.setFieldSignature(src__gestures__arena.GestureArenaEntry, () => ({
    __proto__: dart.getFields(src__gestures__arena.GestureArenaEntry.__proto__),
    [_arena$]: dart.finalFieldType(src__gestures__arena.GestureArenaManager),
    [_pointer$0]: dart.finalFieldType(core.int),
    [_member$0]: dart.finalFieldType(src__gestures__arena.GestureArenaMember)
  }));
  src__gestures__arena._GestureArena = class _GestureArena extends core.Object {
    add(member) {
      if (!dart.test(this.isOpen)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/arena.dart", 70, 12, "isOpen");
      this.members[$add](member);
    }
    toString() {
      if (dart.test(src__util.assertionsEnabled)) {
        let buffer = new core.StringBuffer.new();
        if (dart.test(this.members[$isEmpty])) {
          buffer.write("<empty>");
        } else {
          buffer.write(this.members[$map](core.String, dart.fn(member => {
            if (dart.equals(member, this.eagerWinner)) return dart.str(member) + " (eager winner)";
            return dart.str(member);
          }, GestureArenaMemberToString()))[$join](", "));
        }
        if (dart.test(this.isOpen)) buffer.write(" [open]");
        if (dart.test(this.isHeld)) buffer.write(" [held]");
        if (dart.test(this.hasPendingSweep)) buffer.write(" [hasPendingSweep]");
        return buffer.toString();
      } else {
        return super[$toString]();
      }
    }
  };
  (src__gestures__arena._GestureArena.new = function() {
    this.members = JSArrayOfGestureArenaMember().of([]);
    this.isOpen = true;
    this.isHeld = false;
    this.hasPendingSweep = false;
    this.eagerWinner = null;
    ;
  }).prototype = src__gestures__arena._GestureArena.prototype;
  dart.addTypeTests(src__gestures__arena._GestureArena);
  dart.setMethodSignature(src__gestures__arena._GestureArena, () => ({
    __proto__: dart.getMethods(src__gestures__arena._GestureArena.__proto__),
    add: dart.fnType(dart.void, [src__gestures__arena.GestureArenaMember])
  }));
  dart.setLibraryUri(src__gestures__arena._GestureArena, "package:flutter_web/src/gestures/arena.dart");
  dart.setFieldSignature(src__gestures__arena._GestureArena, () => ({
    __proto__: dart.getFields(src__gestures__arena._GestureArena.__proto__),
    members: dart.finalFieldType(core.List$(src__gestures__arena.GestureArenaMember)),
    isOpen: dart.fieldType(core.bool),
    isHeld: dart.fieldType(core.bool),
    hasPendingSweep: dart.fieldType(core.bool),
    eagerWinner: dart.fieldType(src__gestures__arena.GestureArenaMember)
  }));
  dart.defineExtensionMethods(src__gestures__arena._GestureArena, ['toString']);
  const _arenas = dart.privateName(src__gestures__arena, "_arenas");
  const _debugLogDiagnostic = dart.privateName(src__gestures__arena, "_debugLogDiagnostic");
  const _tryToResolveArena = dart.privateName(src__gestures__arena, "_tryToResolveArena");
  const _resolveInFavorOf = dart.privateName(src__gestures__arena, "_resolveInFavorOf");
  const _resolveByDefault = dart.privateName(src__gestures__arena, "_resolveByDefault");
  src__gestures__arena.GestureArenaManager = class GestureArenaManager extends core.Object {
    add(pointer, member) {
      let state = this[_arenas][$putIfAbsent](pointer, dart.fn(() => {
        if (!dart.test(this[_debugLogDiagnostic](pointer, "★ Opening new gesture arena."))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/arena.dart", 113, 14, "_debugLogDiagnostic(pointer, '★ Opening new gesture arena.");
        return new src__gestures__arena._GestureArena.new();
      }, VoidTo_GestureArena()));
      state.add(member);
      if (!dart.test(this[_debugLogDiagnostic](pointer, "Adding: " + dart.str(member)))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/arena.dart", 117, 12, "t(_debugLogDiagnostic(pointer, 'Adding: $member");
      return new src__gestures__arena.GestureArenaEntry.__(this, pointer, member);
    }
    close(pointer) {
      let state = this[_arenas][$_get](pointer);
      if (state == null) return;
      state.isOpen = false;
      if (!dart.test(this[_debugLogDiagnostic](pointer, "Closing", state))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/arena.dart", 129, 12, "t(_debugLogDiagnostic(pointer, 'Closing', stat");
      this[_tryToResolveArena](pointer, state);
    }
    sweep(pointer) {
      let state = this[_arenas][$_get](pointer);
      if (state == null) return;
      if (!!dart.test(state.isOpen)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/arena.dart", 150, 12, "t(!state.isOp");
      if (dart.test(state.isHeld)) {
        state.hasPendingSweep = true;
        if (!dart.test(this[_debugLogDiagnostic](pointer, "Delaying sweep", state))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/arena.dart", 153, 14, "t(_debugLogDiagnostic(pointer, 'Delaying sweep', stat");
        return;
      }
      if (!dart.test(this[_debugLogDiagnostic](pointer, "Sweeping", state))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/arena.dart", 156, 12, "t(_debugLogDiagnostic(pointer, 'Sweeping', stat");
      this[_arenas][$remove](pointer);
      if (dart.test(state.members[$isNotEmpty])) {
        if (!dart.test(this[_debugLogDiagnostic](pointer, "Winner: " + dart.str(state.members[$first])))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/arena.dart", 160, 14, "t(_debugLogDiagnostic(pointer, 'Winner: ${state.members.first}");
        state.members[$first].acceptGesture(pointer);
        for (let i = 1; i < dart.notNull(state.members[$length]); i = i + 1)
          state.members[$_get](i).rejectGesture(pointer);
      }
    }
    hold(pointer) {
      let state = this[_arenas][$_get](pointer);
      if (state == null) return;
      state.isHeld = true;
      if (!dart.test(this[_debugLogDiagnostic](pointer, "Holding", state))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/arena.dart", 185, 12, "t(_debugLogDiagnostic(pointer, 'Holding', stat");
    }
    release(pointer) {
      let state = this[_arenas][$_get](pointer);
      if (state == null) return;
      state.isHeld = false;
      if (!dart.test(this[_debugLogDiagnostic](pointer, "Releasing", state))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/arena.dart", 202, 12, "t(_debugLogDiagnostic(pointer, 'Releasing', stat");
      if (dart.test(state.hasPendingSweep)) this.sweep(pointer);
    }
    [_resolve$](pointer, member, disposition) {
      let t16;
      let state = this[_arenas][$_get](pointer);
      if (state == null) return;
      if (!dart.test(this[_debugLogDiagnostic](pointer, (dart.equals(disposition, src__gestures__arena.GestureDisposition.accepted) ? "Accepting" : "Rejecting") + ": " + dart.str(member)))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/arena.dart", 214, 12, "t(_debugLogDiagnostic(pointer, '${ disposition == GestureDisposition.accepted ? \"Accepting\" : \"Rejecting\" }: $member");
      if (!dart.test(state.members[$contains](member))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/arena.dart", 215, 12, "t(state.members.contains(membe");
      if (dart.equals(disposition, src__gestures__arena.GestureDisposition.rejected)) {
        state.members[$remove](member);
        member.rejectGesture(pointer);
        if (!dart.test(state.isOpen)) this[_tryToResolveArena](pointer, state);
      } else {
        if (!dart.equals(disposition, src__gestures__arena.GestureDisposition.accepted)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/arena.dart", 222, 14, "t(disposition == GestureDisposition.accept");
        if (dart.test(state.isOpen)) {
          t16 = state;
          t16.eagerWinner == null ? t16.eagerWinner = member : null;
        } else {
          if (!dart.test(this[_debugLogDiagnostic](pointer, "Self-declared winner: " + dart.str(member)))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/arena.dart", 226, 16, "t(_debugLogDiagnostic(pointer, 'Self-declared winner: $member");
          this[_resolveInFavorOf](pointer, state, member);
        }
      }
    }
    [_tryToResolveArena](pointer, state) {
      if (!dart.equals(this[_arenas][$_get](pointer), state)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/arena.dart", 233, 12, "t(_arenas[pointer] == sta");
      if (!!dart.test(state.isOpen)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/arena.dart", 234, 12, "t(!state.isOp");
      if (state.members[$length] === 1) {
        async.scheduleMicrotask(dart.fn(() => this[_resolveByDefault](pointer, state), VoidTovoid()));
      } else if (dart.test(state.members[$isEmpty])) {
        this[_arenas][$remove](pointer);
        if (!dart.test(this[_debugLogDiagnostic](pointer, "Arena empty."))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/arena.dart", 239, 14, "t(_debugLogDiagnostic(pointer, 'Arena empty.");
      } else if (state.eagerWinner != null) {
        if (!dart.test(this[_debugLogDiagnostic](pointer, "Eager winner: " + dart.str(state.eagerWinner)))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/arena.dart", 241, 14, "t(_debugLogDiagnostic(pointer, 'Eager winner: ${state.eagerWinner}");
        this[_resolveInFavorOf](pointer, state, state.eagerWinner);
      }
    }
    [_resolveByDefault](pointer, state) {
      if (!dart.test(this[_arenas][$containsKey](pointer))) return;
      if (!dart.equals(this[_arenas][$_get](pointer), state)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/arena.dart", 249, 12, "t(_arenas[pointer] == sta");
      if (!!dart.test(state.isOpen)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/arena.dart", 250, 12, "t(!state.isOp");
      let members = state.members;
      if (!(members[$length] === 1)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/arena.dart", 252, 12, "t(members.length ==");
      this[_arenas][$remove](pointer);
      if (!dart.test(this[_debugLogDiagnostic](pointer, "Default winner: " + dart.str(state.members[$first])))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/arena.dart", 254, 12, "t(_debugLogDiagnostic(pointer, 'Default winner: ${state.members.first}");
      state.members[$first].acceptGesture(pointer);
    }
    [_resolveInFavorOf](pointer, state, member) {
      if (!dart.equals(state, this[_arenas][$_get](pointer))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/arena.dart", 259, 12, "t(state == _arenas[pointe");
      if (!(state != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/arena.dart", 260, 12, "t(state != nu");
      if (!(state.eagerWinner == null || dart.equals(state.eagerWinner, member))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/arena.dart", 261, 12, "t(state.eagerWinner == null || state.eagerWinner == memb");
      if (!!dart.test(state.isOpen)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/arena.dart", 262, 12, "t(!state.isOp");
      this[_arenas][$remove](pointer);
      for (let rejectedMember of state.members) {
        if (!dart.equals(rejectedMember, member)) rejectedMember.rejectGesture(pointer);
      }
      member.acceptGesture(pointer);
    }
    [_debugLogDiagnostic](pointer, message, state) {
      if (state === void 0) state = null;
      if (!dart.test(dart.fn(() => {
        if (dart.test(src__gestures__debug.debugPrintGestureArenaDiagnostics)) {
          let count = state != null ? state.members[$length] : null;
          let s = count !== 1 ? "s" : "";
          src__foundation__print.debugPrint("Gesture arena " + dart.toString(pointer)[$padRight](4) + " ❙ " + dart.str(message) + (count != null ? " with " + dart.str(count) + " member" + s + "." : ""));
        }
        return true;
      }, VoidTobool())())) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/arena.dart", 272, 12, "t(() {\n      if (debugPrintGestureArenaDiagnostics) {\n        final int count = state != null ? state.members.length : null;\n        final String s = count != 1 ? 's' : '';\n        debugPrint('Gesture arena ${pointer.toString().padRight(4)} ❙ $message${ count != null ? \" with $count member$s.\" : \"\"}');\n      }\n      return true;\n   ");
      return true;
    }
  };
  (src__gestures__arena.GestureArenaManager.new = function() {
    this[_arenas] = new (IdentityMapOfint$_GestureArena()).new();
    ;
  }).prototype = src__gestures__arena.GestureArenaManager.prototype;
  dart.addTypeTests(src__gestures__arena.GestureArenaManager);
  dart.setMethodSignature(src__gestures__arena.GestureArenaManager, () => ({
    __proto__: dart.getMethods(src__gestures__arena.GestureArenaManager.__proto__),
    add: dart.fnType(src__gestures__arena.GestureArenaEntry, [core.int, src__gestures__arena.GestureArenaMember]),
    close: dart.fnType(dart.void, [core.int]),
    sweep: dart.fnType(dart.void, [core.int]),
    hold: dart.fnType(dart.void, [core.int]),
    release: dart.fnType(dart.void, [core.int]),
    [_resolve$]: dart.fnType(dart.void, [core.int, src__gestures__arena.GestureArenaMember, src__gestures__arena.GestureDisposition]),
    [_tryToResolveArena]: dart.fnType(dart.void, [core.int, src__gestures__arena._GestureArena]),
    [_resolveByDefault]: dart.fnType(dart.void, [core.int, src__gestures__arena._GestureArena]),
    [_resolveInFavorOf]: dart.fnType(dart.void, [core.int, src__gestures__arena._GestureArena, src__gestures__arena.GestureArenaMember]),
    [_debugLogDiagnostic]: dart.fnType(core.bool, [core.int, core.String], [src__gestures__arena._GestureArena])
  }));
  dart.setLibraryUri(src__gestures__arena.GestureArenaManager, "package:flutter_web/src/gestures/arena.dart");
  dart.setFieldSignature(src__gestures__arena.GestureArenaManager, () => ({
    __proto__: dart.getFields(src__gestures__arena.GestureArenaManager.__proto__),
    [_arenas]: dart.finalFieldType(core.Map$(core.int, src__gestures__arena._GestureArena))
  }));
  dart.copyProperties(src__util, {
    get assertionsEnabled() {
      let k = false;
      if (!(k = true)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/util.dart", 22, 10, "k = true");
      return k;
    }
  });
  dart.defineLazy(src__util, {
    /*src__util.debugIsInTest*/get debugIsInTest() {
      return false;
    },
    set debugIsInTest(_) {}
  });
  dart.defineLazy(src__gestures__constants, {
    /*src__gestures__constants.kPressTimeout*/get kPressTimeout() {
      return dart.const(new core.Duration.new({milliseconds: 100}));
    },
    /*src__gestures__constants.kHoverTapTimeout*/get kHoverTapTimeout() {
      return dart.const(new core.Duration.new({milliseconds: 150}));
    },
    /*src__gestures__constants.kHoverTapSlop*/get kHoverTapSlop() {
      return 20.0;
    },
    /*src__gestures__constants.kLongPressTimeout*/get kLongPressTimeout() {
      return dart.const(new core.Duration.new({milliseconds: 500}));
    },
    /*src__gestures__constants.kDoubleTapTimeout*/get kDoubleTapTimeout() {
      return dart.const(new core.Duration.new({milliseconds: 300}));
    },
    /*src__gestures__constants.kDoubleTapMinTime*/get kDoubleTapMinTime() {
      return dart.const(new core.Duration.new({milliseconds: 40}));
    },
    /*src__gestures__constants.kDoubleTapTouchSlop*/get kDoubleTapTouchSlop() {
      return src__gestures__constants.kTouchSlop;
    },
    /*src__gestures__constants.kDoubleTapSlop*/get kDoubleTapSlop() {
      return 100.0;
    },
    /*src__gestures__constants.kZoomControlsTimeout*/get kZoomControlsTimeout() {
      return dart.const(new core.Duration.new({milliseconds: 3000}));
    },
    /*src__gestures__constants.kTouchSlop*/get kTouchSlop() {
      return 18.0;
    },
    /*src__gestures__constants.kPagingTouchSlop*/get kPagingTouchSlop() {
      return dart.notNull(src__gestures__constants.kTouchSlop) * 2.0;
    },
    /*src__gestures__constants.kPanSlop*/get kPanSlop() {
      return dart.notNull(src__gestures__constants.kTouchSlop) * 2.0;
    },
    /*src__gestures__constants.kScaleSlop*/get kScaleSlop() {
      return src__gestures__constants.kTouchSlop;
    },
    /*src__gestures__constants.kWindowTouchSlop*/get kWindowTouchSlop() {
      return 16.0;
    },
    /*src__gestures__constants.kMinFlingVelocity*/get kMinFlingVelocity() {
      return 50.0;
    },
    /*src__gestures__constants.kMaxFlingVelocity*/get kMaxFlingVelocity() {
      return 8000.0;
    },
    /*src__gestures__constants.kJumpTapTimeout*/get kJumpTapTimeout() {
      return dart.const(new core.Duration.new({milliseconds: 500}));
    }
  });
  const _name$5 = dart.privateName(src__services__system_sound, "_name");
  src__services__system_sound.SystemSoundType = class SystemSoundType extends core.Object {
    toString() {
      return this[_name$5];
    }
  };
  (src__services__system_sound.SystemSoundType.new = function(index, _name) {
    this.index = index;
    this[_name$5] = _name;
    ;
  }).prototype = src__services__system_sound.SystemSoundType.prototype;
  dart.addTypeTests(src__services__system_sound.SystemSoundType);
  dart.setLibraryUri(src__services__system_sound.SystemSoundType, "package:flutter_web/src/services/system_sound.dart");
  dart.setFieldSignature(src__services__system_sound.SystemSoundType, () => ({
    __proto__: dart.getFields(src__services__system_sound.SystemSoundType.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$5]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(src__services__system_sound.SystemSoundType, ['toString']);
  src__services__system_sound.SystemSoundType.click = dart.const(new src__services__system_sound.SystemSoundType.new(0, "SystemSoundType.click"));
  src__services__system_sound.SystemSoundType.values = dart.constList([src__services__system_sound.SystemSoundType.click], src__services__system_sound.SystemSoundType);
  src__services__system_sound.SystemSound = class SystemSound extends core.Object {
    static play(type) {
      return async.async(dart.void, function* play() {
        yield src__services__system_channels.SystemChannels.platform.invokeMethod(dart.dynamic, "SystemSound.play", dart.toString(type));
      });
    }
  };
  (src__services__system_sound.SystemSound.__ = function() {
    ;
  }).prototype = src__services__system_sound.SystemSound.prototype;
  dart.addTypeTests(src__services__system_sound.SystemSound);
  dart.setLibraryUri(src__services__system_sound.SystemSound, "package:flutter_web/src/services/system_sound.dart");
  src__painting__gradient._ColorsAndStops = class _ColorsAndStops extends core.Object {};
  (src__painting__gradient._ColorsAndStops.new = function(colors, stops) {
    this.colors = colors;
    this.stops = stops;
    ;
  }).prototype = src__painting__gradient._ColorsAndStops.prototype;
  dart.addTypeTests(src__painting__gradient._ColorsAndStops);
  dart.setLibraryUri(src__painting__gradient._ColorsAndStops, "package:flutter_web/src/painting/gradient.dart");
  dart.setFieldSignature(src__painting__gradient._ColorsAndStops, () => ({
    __proto__: dart.getFields(src__painting__gradient._ColorsAndStops.__proto__),
    colors: dart.finalFieldType(core.List$(ui$.Color)),
    stops: dart.finalFieldType(core.List$(core.double))
  }));
  const _impliedStops = dart.privateName(src__painting__gradient, "_impliedStops");
  src__painting__gradient.Gradient = class Gradient extends core.Object {
    get colors() {
      return this[colors$];
    }
    set colors(value) {
      super.colors = value;
    }
    get stops() {
      return this[stops$];
    }
    set stops(value) {
      super.stops = value;
    }
    [_impliedStops]() {
      if (this.stops != null) return this.stops;
      if (!(dart.notNull(this.colors[$length]) >= 2)) dart.assertFailed("colors list must have at least two colors", "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 114, 12, "colors.length >= 2");
      let separation = 1.0 / (dart.notNull(this.colors[$length]) - 1);
      return ListOfdouble().generate(this.colors[$length], dart.fn(index => dart.notNull(index) * separation, intTodouble()), {growable: false});
    }
    lerpFrom(a, t) {
      if (a == null) return this.scale(t);
      return null;
    }
    lerpTo(b, t) {
      if (b == null) return this.scale(1.0 - dart.notNull(t));
      return null;
    }
    static lerp(a, b, t) {
      if (!(t != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 211, 12, "t != null");
      let result = null;
      if (b != null) result = b.lerpFrom(a, t);
      if (result == null && a != null) result = a.lerpTo(b, t);
      if (result != null) return result;
      if (a == null && b == null) return null;
      if (!(a != null && b != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 221, 12, "a != null && b != null");
      return dart.notNull(t) < 0.5 ? a.scale(1.0 - dart.notNull(t) * 2.0) : b.scale((dart.notNull(t) - 0.5) * 2.0);
    }
  };
  (src__painting__gradient.Gradient.new = function(opts) {
    let colors = opts && 'colors' in opts ? opts.colors : null;
    let stops = opts && 'stops' in opts ? opts.stops : null;
    this[colors$] = colors;
    this[stops$] = stops;
    if (!(colors != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 83, 15, "colors != null");
    ;
  }).prototype = src__painting__gradient.Gradient.prototype;
  dart.addTypeTests(src__painting__gradient.Gradient);
  const colors$ = Symbol("Gradient.colors");
  const stops$ = Symbol("Gradient.stops");
  dart.setMethodSignature(src__painting__gradient.Gradient, () => ({
    __proto__: dart.getMethods(src__painting__gradient.Gradient.__proto__),
    [_impliedStops]: dart.fnType(core.List$(core.double), []),
    lerpFrom: dart.fnType(src__painting__gradient.Gradient, [src__painting__gradient.Gradient, core.double]),
    lerpTo: dart.fnType(src__painting__gradient.Gradient, [src__painting__gradient.Gradient, core.double])
  }));
  dart.setLibraryUri(src__painting__gradient.Gradient, "package:flutter_web/src/painting/gradient.dart");
  dart.setFieldSignature(src__painting__gradient.Gradient, () => ({
    __proto__: dart.getFields(src__painting__gradient.Gradient.__proto__),
    colors: dart.finalFieldType(core.List$(ui$.Color)),
    stops: dart.finalFieldType(core.List$(core.double))
  }));
  src__painting__gradient.LinearGradient = class LinearGradient extends src__painting__gradient.Gradient {
    get begin() {
      return this[begin$0];
    }
    set begin(value) {
      super.begin = value;
    }
    get end() {
      return this[end$1];
    }
    set end(value) {
      super.end = value;
    }
    get tileMode() {
      return this[tileMode$];
    }
    set tileMode(value) {
      super.tileMode = value;
    }
    createShader(rect, opts) {
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      return ui$.Gradient.linear(this.begin.resolve(textDirection).withinRect(rect), this.end.resolve(textDirection).withinRect(rect), this.colors, this[_impliedStops](), this.tileMode);
    }
    scale(factor) {
      return new src__painting__gradient.LinearGradient.new({begin: this.begin, end: this.end, colors: this.colors[$map](ui$.Color, dart.fn(color => ui$.Color.lerp(null, color, factor), ColorToColor()))[$toList](), stops: this.stops, tileMode: this.tileMode});
    }
    lerpFrom(a, t) {
      if (a == null || src__painting__gradient.LinearGradient.is(a)) return src__painting__gradient.LinearGradient.lerp(src__painting__gradient.LinearGradient._check(a), this, t);
      return super.lerpFrom(a, t);
    }
    lerpTo(b, t) {
      if (b == null || src__painting__gradient.LinearGradient.is(b)) return src__painting__gradient.LinearGradient.lerp(this, src__painting__gradient.LinearGradient._check(b), t);
      return super.lerpTo(b, t);
    }
    static lerp(a, b, t) {
      if (!(t != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 391, 12, "t != null");
      if (a == null && b == null) return null;
      if (a == null) return b.scale(t);
      if (b == null) return a.scale(1.0 - dart.notNull(t));
      let interpolated = src__painting__gradient._interpolateColorsAndStops(a.colors, a[_impliedStops](), b.colors, b[_impliedStops](), t);
      return new src__painting__gradient.LinearGradient.new({begin: src__painting__alignment.AlignmentGeometry.lerp(a.begin, b.begin, t), end: src__painting__alignment.AlignmentGeometry.lerp(a.end, b.end, t), colors: interpolated.colors, stops: interpolated.stops, tileMode: dart.notNull(t) < 0.5 ? a.tileMode : b.tileMode});
    }
    _equals(other) {
      if (other == null) return false;
      let t16, t16$, t16$0, t16$1;
      if (this === other) return true;
      if (!dart.equals(this[$runtimeType], dart.runtimeType(other))) return false;
      let typedOther = src__painting__gradient.LinearGradient._check(other);
      if (!dart.equals(this.begin, typedOther.begin) || !dart.equals(this.end, typedOther.end) || !dart.equals(this.tileMode, typedOther.tileMode) || (t16 = this.colors, t16 == null ? null : t16[$length]) != (t16$ = typedOther.colors, t16$ == null ? null : t16$[$length]) || (t16$0 = this.stops, t16$0 == null ? null : t16$0[$length]) != (t16$1 = typedOther.stops, t16$1 == null ? null : t16$1[$length])) return false;
      if (this.colors != null) {
        if (!(typedOther.colors != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 428, 14, "typedOther.colors != null");
        if (!(this.colors[$length] == typedOther.colors[$length])) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 429, 14, "colors.length == typedOther.colors.length");
        for (let i = 0; i < dart.notNull(this.colors[$length]); i = i + 1) {
          if (!dart.equals(this.colors[$_get](i), typedOther.colors[$_get](i))) return false;
        }
      }
      if (this.stops != null) {
        if (!(typedOther.stops != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 436, 14, "typedOther.stops != null");
        if (!(this.stops[$length] == typedOther.stops[$length])) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 437, 14, "stops.length == typedOther.stops.length");
        for (let i = 0; i < dart.notNull(this.stops[$length]); i = i + 1) {
          if (this.stops[$_get](i) != typedOther.stops[$_get](i)) return false;
        }
      }
      return true;
    }
    get hashCode() {
      return ui$.hashValues(this.begin, this.end, this.tileMode, ui$.hashList(this.colors), ui$.hashList(this.stops));
    }
    toString() {
      return dart.str(this[$runtimeType]) + "(" + dart.str(this.begin) + ", " + dart.str(this.end) + ", " + dart.str(this.colors) + ", " + dart.str(this.stops) + ", " + dart.str(this.tileMode) + ")";
    }
  };
  (src__painting__gradient.LinearGradient.new = function(opts) {
    let begin = opts && 'begin' in opts ? opts.begin : src__painting__alignment.Alignment.centerLeft;
    let end = opts && 'end' in opts ? opts.end : src__painting__alignment.Alignment.centerRight;
    let colors = opts && 'colors' in opts ? opts.colors : null;
    let stops = opts && 'stops' in opts ? opts.stops : null;
    let tileMode = opts && 'tileMode' in opts ? opts.tileMode : ui$.TileMode.clamp;
    this[begin$0] = begin;
    this[end$1] = end;
    this[tileMode$] = tileMode;
    if (!(begin != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 288, 15, "begin != null");
    if (!(end != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 289, 15, "end != null");
    if (!(tileMode != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 290, 15, "tileMode != null");
    src__painting__gradient.LinearGradient.__proto__.new.call(this, {colors: colors, stops: stops});
    ;
  }).prototype = src__painting__gradient.LinearGradient.prototype;
  dart.addTypeTests(src__painting__gradient.LinearGradient);
  const begin$0 = Symbol("LinearGradient.begin");
  const end$1 = Symbol("LinearGradient.end");
  const tileMode$ = Symbol("LinearGradient.tileMode");
  dart.setMethodSignature(src__painting__gradient.LinearGradient, () => ({
    __proto__: dart.getMethods(src__painting__gradient.LinearGradient.__proto__),
    createShader: dart.fnType(ui$.Shader, [ui$.Rect], {textDirection: ui$.TextDirection}),
    scale: dart.fnType(src__painting__gradient.LinearGradient, [core.double])
  }));
  dart.setLibraryUri(src__painting__gradient.LinearGradient, "package:flutter_web/src/painting/gradient.dart");
  dart.setFieldSignature(src__painting__gradient.LinearGradient, () => ({
    __proto__: dart.getFields(src__painting__gradient.LinearGradient.__proto__),
    begin: dart.finalFieldType(src__painting__alignment.AlignmentGeometry),
    end: dart.finalFieldType(src__painting__alignment.AlignmentGeometry),
    tileMode: dart.finalFieldType(ui$.TileMode)
  }));
  dart.defineExtensionMethods(src__painting__gradient.LinearGradient, ['_equals', 'toString']);
  dart.defineExtensionAccessors(src__painting__gradient.LinearGradient, ['hashCode']);
  src__painting__gradient.RadialGradient = class RadialGradient extends src__painting__gradient.Gradient {
    get center() {
      return this[center$];
    }
    set center(value) {
      super.center = value;
    }
    get radius() {
      return this[radius$];
    }
    set radius(value) {
      super.radius = value;
    }
    get tileMode() {
      return this[tileMode$0];
    }
    set tileMode(value) {
      super.tileMode = value;
    }
    get focal() {
      return this[focal$];
    }
    set focal(value) {
      super.focal = value;
    }
    get focalRadius() {
      return this[focalRadius$];
    }
    set focalRadius(value) {
      super.focalRadius = value;
    }
    createShader(rect, opts) {
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      return ui$.Gradient.radial(this.center.resolve(textDirection).withinRect(rect), dart.notNull(this.radius) * dart.notNull(rect.shortestSide), this.colors, this[_impliedStops](), this.tileMode, null, this.focal == null ? null : this.focal.resolve(textDirection).withinRect(rect), dart.notNull(this.focalRadius) * dart.notNull(rect.shortestSide));
    }
    scale(factor) {
      return new src__painting__gradient.RadialGradient.new({center: this.center, radius: this.radius, colors: this.colors[$map](ui$.Color, dart.fn(color => ui$.Color.lerp(null, color, factor), ColorToColor()))[$toList](), stops: this.stops, tileMode: this.tileMode, focal: this.focal, focalRadius: this.focalRadius});
    }
    lerpFrom(a, t) {
      if (a == null || src__painting__gradient.RadialGradient.is(a)) return src__painting__gradient.RadialGradient.lerp(src__painting__gradient.RadialGradient._check(a), this, t);
      return super.lerpFrom(a, t);
    }
    lerpTo(b, t) {
      if (b == null || src__painting__gradient.RadialGradient.is(b)) return src__painting__gradient.RadialGradient.lerp(this, src__painting__gradient.RadialGradient._check(b), t);
      return super.lerpTo(b, t);
    }
    static lerp(a, b, t) {
      if (!(t != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 666, 12, "t != null");
      if (a == null && b == null) return null;
      if (a == null) return b.scale(t);
      if (b == null) return a.scale(1.0 - dart.notNull(t));
      let interpolated = src__painting__gradient._interpolateColorsAndStops(a.colors, a[_impliedStops](), b.colors, b[_impliedStops](), t);
      return new src__painting__gradient.RadialGradient.new({center: src__painting__alignment.AlignmentGeometry.lerp(a.center, b.center, t), radius: math.max(core.double, 0.0, ui$.lerpDouble(a.radius, b.radius, t)), colors: interpolated.colors, stops: interpolated.stops, tileMode: dart.notNull(t) < 0.5 ? a.tileMode : b.tileMode, focal: src__painting__alignment.AlignmentGeometry.lerp(a.focal, b.focal, t), focalRadius: math.max(core.double, 0.0, ui$.lerpDouble(a.focalRadius, b.focalRadius, t))});
    }
    _equals(other) {
      if (other == null) return false;
      let t16, t16$, t16$0, t16$1;
      if (this === other) return true;
      if (!dart.equals(this[$runtimeType], dart.runtimeType(other))) return false;
      let typedOther = src__painting__gradient.RadialGradient._check(other);
      if (!dart.equals(this.center, typedOther.center) || this.radius != typedOther.radius || !dart.equals(this.tileMode, typedOther.tileMode) || (t16 = this.colors, t16 == null ? null : t16[$length]) != (t16$ = typedOther.colors, t16$ == null ? null : t16$[$length]) || (t16$0 = this.stops, t16$0 == null ? null : t16$0[$length]) != (t16$1 = typedOther.stops, t16$1 == null ? null : t16$1[$length]) || !dart.equals(this.focal, typedOther.focal) || this.focalRadius != typedOther.focalRadius) return false;
      if (this.colors != null) {
        if (!(typedOther.colors != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 707, 14, "typedOther.colors != null");
        if (!(this.colors[$length] == typedOther.colors[$length])) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 708, 14, "colors.length == typedOther.colors.length");
        for (let i = 0; i < dart.notNull(this.colors[$length]); i = i + 1) {
          if (!dart.equals(this.colors[$_get](i), typedOther.colors[$_get](i))) return false;
        }
      }
      if (this.stops != null) {
        if (!(typedOther.stops != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 715, 14, "typedOther.stops != null");
        if (!(this.stops[$length] == typedOther.stops[$length])) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 716, 14, "stops.length == typedOther.stops.length");
        for (let i = 0; i < dart.notNull(this.stops[$length]); i = i + 1) {
          if (this.stops[$_get](i) != typedOther.stops[$_get](i)) return false;
        }
      }
      return true;
    }
    get hashCode() {
      return ui$.hashValues(this.center, this.radius, this.tileMode, ui$.hashList(this.colors), ui$.hashList(this.stops), this.focal, this.focalRadius);
    }
    toString() {
      return dart.str(this[$runtimeType]) + "(" + dart.str(this.center) + ", " + dart.str(this.radius) + ", " + dart.str(this.colors) + ", " + dart.str(this.stops) + ", " + dart.str(this.tileMode) + ", " + dart.str(this.focal) + ", " + dart.str(this.focalRadius) + ")";
    }
  };
  (src__painting__gradient.RadialGradient.new = function(opts) {
    let center = opts && 'center' in opts ? opts.center : src__painting__alignment.Alignment.center;
    let radius = opts && 'radius' in opts ? opts.radius : 0.5;
    let colors = opts && 'colors' in opts ? opts.colors : null;
    let stops = opts && 'stops' in opts ? opts.stops : null;
    let tileMode = opts && 'tileMode' in opts ? opts.tileMode : ui$.TileMode.clamp;
    let focal = opts && 'focal' in opts ? opts.focal : null;
    let focalRadius = opts && 'focalRadius' in opts ? opts.focalRadius : 0.0;
    this[center$] = center;
    this[radius$] = radius;
    this[tileMode$0] = tileMode;
    this[focal$] = focal;
    this[focalRadius$] = focalRadius;
    if (!(center != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 537, 15, "center != null");
    if (!(radius != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 538, 15, "radius != null");
    if (!(tileMode != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 539, 15, "tileMode != null");
    if (!(focalRadius != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 540, 15, "focalRadius != null");
    src__painting__gradient.RadialGradient.__proto__.new.call(this, {colors: colors, stops: stops});
    ;
  }).prototype = src__painting__gradient.RadialGradient.prototype;
  dart.addTypeTests(src__painting__gradient.RadialGradient);
  const center$ = Symbol("RadialGradient.center");
  const radius$ = Symbol("RadialGradient.radius");
  const tileMode$0 = Symbol("RadialGradient.tileMode");
  const focal$ = Symbol("RadialGradient.focal");
  const focalRadius$ = Symbol("RadialGradient.focalRadius");
  dart.setMethodSignature(src__painting__gradient.RadialGradient, () => ({
    __proto__: dart.getMethods(src__painting__gradient.RadialGradient.__proto__),
    createShader: dart.fnType(ui$.Shader, [ui$.Rect], {textDirection: ui$.TextDirection}),
    scale: dart.fnType(src__painting__gradient.RadialGradient, [core.double])
  }));
  dart.setLibraryUri(src__painting__gradient.RadialGradient, "package:flutter_web/src/painting/gradient.dart");
  dart.setFieldSignature(src__painting__gradient.RadialGradient, () => ({
    __proto__: dart.getFields(src__painting__gradient.RadialGradient.__proto__),
    center: dart.finalFieldType(src__painting__alignment.AlignmentGeometry),
    radius: dart.finalFieldType(core.double),
    tileMode: dart.finalFieldType(ui$.TileMode),
    focal: dart.finalFieldType(src__painting__alignment.AlignmentGeometry),
    focalRadius: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(src__painting__gradient.RadialGradient, ['_equals', 'toString']);
  dart.defineExtensionAccessors(src__painting__gradient.RadialGradient, ['hashCode']);
  src__painting__gradient.SweepGradient = class SweepGradient extends src__painting__gradient.Gradient {
    get center() {
      return this[center$0];
    }
    set center(value) {
      super.center = value;
    }
    get startAngle() {
      return this[startAngle$];
    }
    set startAngle(value) {
      super.startAngle = value;
    }
    get endAngle() {
      return this[endAngle$];
    }
    set endAngle(value) {
      super.endAngle = value;
    }
    get tileMode() {
      return this[tileMode$1];
    }
    set tileMode(value) {
      super.tileMode = value;
    }
    createShader(rect, opts) {
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      return ui$.Gradient.sweep(this.center.resolve(textDirection).withinRect(rect), this.colors, this[_impliedStops](), this.tileMode, this.startAngle, this.endAngle);
    }
    scale(factor) {
      return new src__painting__gradient.SweepGradient.new({center: this.center, startAngle: this.startAngle, endAngle: this.endAngle, colors: this.colors[$map](ui$.Color, dart.fn(color => ui$.Color.lerp(null, color, factor), ColorToColor()))[$toList](), stops: this.stops, tileMode: this.tileMode});
    }
    lerpFrom(a, t) {
      if (a == null || src__painting__gradient.SweepGradient.is(a)) return src__painting__gradient.SweepGradient.lerp(src__painting__gradient.SweepGradient._check(a), this, t);
      return super.lerpFrom(a, t);
    }
    lerpTo(b, t) {
      if (b == null || src__painting__gradient.SweepGradient.is(b)) return src__painting__gradient.SweepGradient.lerp(this, src__painting__gradient.SweepGradient._check(b), t);
      return super.lerpTo(b, t);
    }
    static lerp(a, b, t) {
      if (!(t != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 902, 12, "t != null");
      if (a == null && b == null) return null;
      if (a == null) return b.scale(t);
      if (b == null) return a.scale(1.0 - dart.notNull(t));
      let interpolated = src__painting__gradient._interpolateColorsAndStops(a.colors, a[_impliedStops](), b.colors, b[_impliedStops](), t);
      return new src__painting__gradient.SweepGradient.new({center: src__painting__alignment.AlignmentGeometry.lerp(a.center, b.center, t), startAngle: math.max(core.double, 0.0, ui$.lerpDouble(a.startAngle, b.startAngle, t)), endAngle: math.max(core.double, 0.0, ui$.lerpDouble(a.endAngle, b.endAngle, t)), colors: interpolated.colors, stops: interpolated.stops, tileMode: dart.notNull(t) < 0.5 ? a.tileMode : b.tileMode});
    }
    _equals(other) {
      if (other == null) return false;
      let t16, t16$, t16$0, t16$1;
      if (this === other) return true;
      if (!dart.equals(this[$runtimeType], dart.runtimeType(other))) return false;
      let typedOther = src__painting__gradient.SweepGradient._check(other);
      if (!dart.equals(this.center, typedOther.center) || this.startAngle != typedOther.startAngle || this.endAngle != typedOther.endAngle || !dart.equals(this.tileMode, typedOther.tileMode) || (t16 = this.colors, t16 == null ? null : t16[$length]) != (t16$ = typedOther.colors, t16$ == null ? null : t16$[$length]) || (t16$0 = this.stops, t16$0 == null ? null : t16$0[$length]) != (t16$1 = typedOther.stops, t16$1 == null ? null : t16$1[$length])) return false;
      if (this.colors != null) {
        if (!(typedOther.colors != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 941, 14, "typedOther.colors != null");
        if (!(this.colors[$length] == typedOther.colors[$length])) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 942, 14, "colors.length == typedOther.colors.length");
        for (let i = 0; i < dart.notNull(this.colors[$length]); i = i + 1) {
          if (!dart.equals(this.colors[$_get](i), typedOther.colors[$_get](i))) return false;
        }
      }
      if (this.stops != null) {
        if (!(typedOther.stops != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 949, 14, "typedOther.stops != null");
        if (!(this.stops[$length] == typedOther.stops[$length])) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 950, 14, "stops.length == typedOther.stops.length");
        for (let i = 0; i < dart.notNull(this.stops[$length]); i = i + 1) {
          if (this.stops[$_get](i) != typedOther.stops[$_get](i)) return false;
        }
      }
      return true;
    }
    get hashCode() {
      return ui$.hashValues(this.center, this.startAngle, this.endAngle, this.tileMode, ui$.hashList(this.colors), ui$.hashList(this.stops));
    }
    toString() {
      return dart.str(this[$runtimeType]) + "(" + dart.str(this.center) + ", " + dart.str(this.startAngle) + ", " + dart.str(this.endAngle) + ", " + dart.str(this.colors) + ", " + dart.str(this.stops) + ", " + dart.str(this.tileMode) + ")";
    }
  };
  (src__painting__gradient.SweepGradient.new = function(opts) {
    let center = opts && 'center' in opts ? opts.center : src__painting__alignment.Alignment.center;
    let startAngle = opts && 'startAngle' in opts ? opts.startAngle : 0.0;
    let endAngle = opts && 'endAngle' in opts ? opts.endAngle : dart.notNull(math.pi) * 2;
    let colors = opts && 'colors' in opts ? opts.colors : null;
    let stops = opts && 'stops' in opts ? opts.stops : null;
    let tileMode = opts && 'tileMode' in opts ? opts.tileMode : ui$.TileMode.clamp;
    this[center$0] = center;
    this[startAngle$] = startAngle;
    this[endAngle$] = endAngle;
    this[tileMode$1] = tileMode;
    if (!(center != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 801, 15, "center != null");
    if (!(startAngle != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 802, 15, "startAngle != null");
    if (!(endAngle != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 803, 15, "endAngle != null");
    if (!(tileMode != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 804, 15, "tileMode != null");
    src__painting__gradient.SweepGradient.__proto__.new.call(this, {colors: colors, stops: stops});
    ;
  }).prototype = src__painting__gradient.SweepGradient.prototype;
  dart.addTypeTests(src__painting__gradient.SweepGradient);
  const center$0 = Symbol("SweepGradient.center");
  const startAngle$ = Symbol("SweepGradient.startAngle");
  const endAngle$ = Symbol("SweepGradient.endAngle");
  const tileMode$1 = Symbol("SweepGradient.tileMode");
  dart.setMethodSignature(src__painting__gradient.SweepGradient, () => ({
    __proto__: dart.getMethods(src__painting__gradient.SweepGradient.__proto__),
    createShader: dart.fnType(ui$.Shader, [ui$.Rect], {textDirection: ui$.TextDirection}),
    scale: dart.fnType(src__painting__gradient.SweepGradient, [core.double])
  }));
  dart.setLibraryUri(src__painting__gradient.SweepGradient, "package:flutter_web/src/painting/gradient.dart");
  dart.setFieldSignature(src__painting__gradient.SweepGradient, () => ({
    __proto__: dart.getFields(src__painting__gradient.SweepGradient.__proto__),
    center: dart.finalFieldType(src__painting__alignment.AlignmentGeometry),
    startAngle: dart.finalFieldType(core.double),
    endAngle: dart.finalFieldType(core.double),
    tileMode: dart.finalFieldType(ui$.TileMode)
  }));
  dart.defineExtensionMethods(src__painting__gradient.SweepGradient, ['_equals', 'toString']);
  dart.defineExtensionAccessors(src__painting__gradient.SweepGradient, ['hashCode']);
  src__painting__gradient._sample = function(colors, stops, t) {
    if (!(colors != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 23, 10, "colors != null");
    if (!dart.test(colors[$isNotEmpty])) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 24, 10, "colors.isNotEmpty");
    if (!(stops != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 25, 10, "stops != null");
    if (!dart.test(stops[$isNotEmpty])) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 26, 10, "stops.isNotEmpty");
    if (!(t != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 27, 10, "t != null");
    if (dart.notNull(t) <= dart.notNull(stops[$first])) return colors[$first];
    if (dart.notNull(t) >= dart.notNull(stops[$last])) return colors[$last];
    let index = stops[$lastIndexWhere](dart.fn(s => dart.notNull(s) <= dart.notNull(t), doubleTobool()));
    if (!(index !== -1)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 33, 10, "index != -1");
    return ui$.Color.lerp(colors[$_get](index), colors[$_get](dart.notNull(index) + 1), (dart.notNull(t) - dart.notNull(stops[$_get](index))) / (dart.notNull(stops[$_get](dart.notNull(index) + 1)) - dart.notNull(stops[$_get](index))));
  };
  src__painting__gradient._interpolateColorsAndStops = function(aColors, aStops, bColors, bStops, t) {
    let t16;
    if (!(dart.notNull(aColors[$length]) >= 2)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 47, 10, "aColors.length >= 2");
    if (!(dart.notNull(bColors[$length]) >= 2)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 48, 10, "bColors.length >= 2");
    if (!(aStops[$length] == aColors[$length])) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 49, 10, "aStops.length == aColors.length");
    if (!(bStops[$length] == bColors[$length])) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart", 50, 10, "bStops.length == bColors.length");
    let stops = (t16 = new (SplayTreeSetOfdouble()).new(), t16.addAll(aStops), t16.addAll(bStops), t16);
    let interpolatedStops = stops.toList({growable: false});
    let interpolatedColors = interpolatedStops[$map](ui$.Color, dart.fn(stop => ui$.Color.lerp(src__painting__gradient._sample(aColors, aStops, stop), src__painting__gradient._sample(bColors, bStops, stop), t), doubleToColor()))[$toList]({growable: false});
    return new src__painting__gradient._ColorsAndStops.new(interpolatedColors, interpolatedStops);
  };
  const _isLeftRightModifierPressed = dart.privateName(src__services__raw_keyboard_fuchsia, "_isLeftRightModifierPressed");
  src__services__raw_keyboard.RawKeyEventData = class RawKeyEventData extends core.Object {
    get isControlPressed() {
      return this.isModifierPressed(src__services__raw_keyboard.ModifierKey.controlModifier, {side: src__services__raw_keyboard.KeyboardSide.any});
    }
    get isShiftPressed() {
      return this.isModifierPressed(src__services__raw_keyboard.ModifierKey.shiftModifier, {side: src__services__raw_keyboard.KeyboardSide.any});
    }
    get isAltPressed() {
      return this.isModifierPressed(src__services__raw_keyboard.ModifierKey.altModifier, {side: src__services__raw_keyboard.KeyboardSide.any});
    }
    get isMetaPressed() {
      return this.isModifierPressed(src__services__raw_keyboard.ModifierKey.metaModifier, {side: src__services__raw_keyboard.KeyboardSide.any});
    }
    get modifiersPressed() {
      let result = new (LinkedMapOfModifierKey$KeyboardSide()).new();
      for (let key of src__services__raw_keyboard.ModifierKey.values) {
        if (dart.test(this.isModifierPressed(key))) {
          result[$_set](key, this.getModifierSide(key));
        }
      }
      return result;
    }
  };
  (src__services__raw_keyboard.RawKeyEventData.new = function() {
    ;
  }).prototype = src__services__raw_keyboard.RawKeyEventData.prototype;
  dart.addTypeTests(src__services__raw_keyboard.RawKeyEventData);
  dart.setGetterSignature(src__services__raw_keyboard.RawKeyEventData, () => ({
    __proto__: dart.getGetters(src__services__raw_keyboard.RawKeyEventData.__proto__),
    isControlPressed: core.bool,
    isShiftPressed: core.bool,
    isAltPressed: core.bool,
    isMetaPressed: core.bool,
    modifiersPressed: core.Map$(src__services__raw_keyboard.ModifierKey, src__services__raw_keyboard.KeyboardSide)
  }));
  dart.setLibraryUri(src__services__raw_keyboard.RawKeyEventData, "package:flutter_web/src/services/raw_keyboard.dart");
  src__services__raw_keyboard_fuchsia.RawKeyEventDataFuchsia = class RawKeyEventDataFuchsia extends src__services__raw_keyboard.RawKeyEventData {
    get hidUsage() {
      return this[hidUsage$];
    }
    set hidUsage(value) {
      super.hidUsage = value;
    }
    get codePoint() {
      return this[codePoint$];
    }
    set codePoint(value) {
      super.codePoint = value;
    }
    get modifiers() {
      return this[modifiers$];
    }
    set modifiers(value) {
      super.modifiers = value;
    }
    get keyLabel() {
      return this.codePoint === 0 ? null : core.String.fromCharCode(this.codePoint);
    }
    get logicalKey() {
      if (this.codePoint !== 0) {
        return new src__services__keyboard_key.LogicalKeyboardKey.new((dart.notNull(src__services__keyboard_key.LogicalKeyboardKey.unicodePlane) | (dart.notNull(this.codePoint) & dart.notNull(src__services__keyboard_key.LogicalKeyboardKey.valueMask)) >>> 0) >>> 0, {keyLabel: this.keyLabel, debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Key " + dart.str(this.keyLabel)});
      }
      let newKey = src__services__keyboard_maps.kFuchsiaToLogicalKey[$_get]((dart.notNull(this.hidUsage) | dart.notNull(src__services__keyboard_key.LogicalKeyboardKey.hidPlane)) >>> 0);
      if (newKey != null) {
        return newKey;
      }
      let fuchsiaKeyIdPlane = 12884901888;
      newKey == null ? newKey = new src__services__keyboard_key.LogicalKeyboardKey.new((fuchsiaKeyIdPlane | dart.notNull(this.hidUsage) | dart.notNull(src__services__keyboard_key.LogicalKeyboardKey.autogeneratedMask)) >>> 0, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Ephemeral Fuchsia key code " + dart.str(this.hidUsage)}) : null;
      return newKey;
    }
    get physicalKey() {
      let t16;
      t16 = src__services__keyboard_maps.kFuchsiaToPhysicalKey[$_get](this.hidUsage);
      return t16 == null ? src__services__keyboard_key.PhysicalKeyboardKey.none : t16;
    }
    [_isLeftRightModifierPressed](side, anyMask, leftMask, rightMask) {
      if ((dart.notNull(this.modifiers) & dart.notNull(anyMask)) === 0) {
        return false;
      }
      switch (side) {
        case src__services__raw_keyboard.KeyboardSide.any:
        {
          return true;
        }
        case src__services__raw_keyboard.KeyboardSide.all:
        {
          return (dart.notNull(this.modifiers) & dart.notNull(leftMask)) !== 0 && (dart.notNull(this.modifiers) & dart.notNull(rightMask)) !== 0;
        }
        case src__services__raw_keyboard.KeyboardSide.left:
        {
          return (dart.notNull(this.modifiers) & dart.notNull(leftMask)) !== 0;
        }
        case src__services__raw_keyboard.KeyboardSide.right:
        {
          return (dart.notNull(this.modifiers) & dart.notNull(rightMask)) !== 0;
        }
      }
      return false;
    }
    isModifierPressed(key, opts) {
      let side = opts && 'side' in opts ? opts.side : src__services__raw_keyboard.KeyboardSide.any;
      if (!(side != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/raw_keyboard_fuchsia.dart", 116, 12, "side != null");
      switch (key) {
        case src__services__raw_keyboard.ModifierKey.controlModifier:
        {
          return this[_isLeftRightModifierPressed](side, src__services__raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierControl, src__services__raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierLeftControl, src__services__raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierRightControl);
        }
        case src__services__raw_keyboard.ModifierKey.shiftModifier:
        {
          return this[_isLeftRightModifierPressed](side, src__services__raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierShift, src__services__raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierLeftShift, src__services__raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierRightShift);
        }
        case src__services__raw_keyboard.ModifierKey.altModifier:
        {
          return this[_isLeftRightModifierPressed](side, src__services__raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierAlt, src__services__raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierLeftAlt, src__services__raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierRightAlt);
        }
        case src__services__raw_keyboard.ModifierKey.metaModifier:
        {
          return this[_isLeftRightModifierPressed](side, src__services__raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierMeta, src__services__raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierLeftMeta, src__services__raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierRightMeta);
        }
        case src__services__raw_keyboard.ModifierKey.capsLockModifier:
        {
          return (dart.notNull(this.modifiers) & dart.notNull(src__services__raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierCapsLock)) !== 0;
        }
        case src__services__raw_keyboard.ModifierKey.numLockModifier:
        case src__services__raw_keyboard.ModifierKey.scrollLockModifier:
        case src__services__raw_keyboard.ModifierKey.functionModifier:
        case src__services__raw_keyboard.ModifierKey.symbolModifier:
        {
          return false;
        }
      }
      return false;
    }
    getModifierSide(key) {
      const findSide = (leftMask, rightMask, combinedMask) => {
        let combined = (dart.notNull(this.modifiers) & dart.notNull(combinedMask)) >>> 0;
        if (combined === leftMask) {
          return src__services__raw_keyboard.KeyboardSide.left;
        } else if (combined === rightMask) {
          return src__services__raw_keyboard.KeyboardSide.right;
        } else if (combined === combinedMask) {
          return src__services__raw_keyboard.KeyboardSide.all;
        }
        return null;
      };
      dart.fn(findSide, intAndintAndintToKeyboardSide());
      switch (key) {
        case src__services__raw_keyboard.ModifierKey.controlModifier:
        {
          return findSide(src__services__raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierLeftControl, src__services__raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierRightControl, src__services__raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierControl);
        }
        case src__services__raw_keyboard.ModifierKey.shiftModifier:
        {
          return findSide(src__services__raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierLeftShift, src__services__raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierRightShift, src__services__raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierShift);
        }
        case src__services__raw_keyboard.ModifierKey.altModifier:
        {
          return findSide(src__services__raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierLeftAlt, src__services__raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierRightAlt, src__services__raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierAlt);
        }
        case src__services__raw_keyboard.ModifierKey.metaModifier:
        {
          return findSide(src__services__raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierLeftMeta, src__services__raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierRightMeta, src__services__raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierMeta);
        }
        case src__services__raw_keyboard.ModifierKey.capsLockModifier:
        {
          return (dart.notNull(this.modifiers) & dart.notNull(src__services__raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierCapsLock)) === 0 ? null : src__services__raw_keyboard.KeyboardSide.all;
        }
        case src__services__raw_keyboard.ModifierKey.numLockModifier:
        case src__services__raw_keyboard.ModifierKey.scrollLockModifier:
        case src__services__raw_keyboard.ModifierKey.functionModifier:
        case src__services__raw_keyboard.ModifierKey.symbolModifier:
        {
          return null;
        }
      }
      if (!false) dart.assertFailed("Not handling " + dart.str(key) + " type properly.", "org-dartlang-app:///packages/flutter_web/src/services/raw_keyboard_fuchsia.dart", 171, 12, "false");
      return null;
    }
    toString() {
      return dart.str(this[$runtimeType]) + "(hidUsage: " + dart.str(this.hidUsage) + ", codePoint: " + dart.str(this.codePoint) + ", modifiers: " + dart.str(this.modifiers) + ", " + "modifiers down: " + dart.str(this.modifiersPressed) + ")";
    }
  };
  (src__services__raw_keyboard_fuchsia.RawKeyEventDataFuchsia.new = function(opts) {
    let hidUsage = opts && 'hidUsage' in opts ? opts.hidUsage : 0;
    let codePoint = opts && 'codePoint' in opts ? opts.codePoint : 0;
    let modifiers = opts && 'modifiers' in opts ? opts.modifiers : 0;
    this[hidUsage$] = hidUsage;
    this[codePoint$] = codePoint;
    this[modifiers$] = modifiers;
    if (!(hidUsage != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/raw_keyboard_fuchsia.dart", 28, 15, "hidUsage != null");
    if (!(codePoint != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/raw_keyboard_fuchsia.dart", 29, 15, "codePoint != null");
    if (!(modifiers != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/raw_keyboard_fuchsia.dart", 30, 15, "modifiers != null");
    src__services__raw_keyboard_fuchsia.RawKeyEventDataFuchsia.__proto__.new.call(this);
    ;
  }).prototype = src__services__raw_keyboard_fuchsia.RawKeyEventDataFuchsia.prototype;
  dart.addTypeTests(src__services__raw_keyboard_fuchsia.RawKeyEventDataFuchsia);
  const hidUsage$ = Symbol("RawKeyEventDataFuchsia.hidUsage");
  const codePoint$ = Symbol("RawKeyEventDataFuchsia.codePoint");
  const modifiers$ = Symbol("RawKeyEventDataFuchsia.modifiers");
  dart.setMethodSignature(src__services__raw_keyboard_fuchsia.RawKeyEventDataFuchsia, () => ({
    __proto__: dart.getMethods(src__services__raw_keyboard_fuchsia.RawKeyEventDataFuchsia.__proto__),
    [_isLeftRightModifierPressed]: dart.fnType(core.bool, [src__services__raw_keyboard.KeyboardSide, core.int, core.int, core.int]),
    isModifierPressed: dart.fnType(core.bool, [src__services__raw_keyboard.ModifierKey], {side: src__services__raw_keyboard.KeyboardSide}),
    getModifierSide: dart.fnType(src__services__raw_keyboard.KeyboardSide, [src__services__raw_keyboard.ModifierKey])
  }));
  dart.setGetterSignature(src__services__raw_keyboard_fuchsia.RawKeyEventDataFuchsia, () => ({
    __proto__: dart.getGetters(src__services__raw_keyboard_fuchsia.RawKeyEventDataFuchsia.__proto__),
    keyLabel: core.String,
    logicalKey: src__services__keyboard_key.LogicalKeyboardKey,
    physicalKey: src__services__keyboard_key.PhysicalKeyboardKey
  }));
  dart.setLibraryUri(src__services__raw_keyboard_fuchsia.RawKeyEventDataFuchsia, "package:flutter_web/src/services/raw_keyboard_fuchsia.dart");
  dart.setFieldSignature(src__services__raw_keyboard_fuchsia.RawKeyEventDataFuchsia, () => ({
    __proto__: dart.getFields(src__services__raw_keyboard_fuchsia.RawKeyEventDataFuchsia.__proto__),
    hidUsage: dart.finalFieldType(core.int),
    codePoint: dart.finalFieldType(core.int),
    modifiers: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(src__services__raw_keyboard_fuchsia.RawKeyEventDataFuchsia, ['toString']);
  dart.defineLazy(src__services__raw_keyboard_fuchsia.RawKeyEventDataFuchsia, {
    /*src__services__raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierNone*/get modifierNone() {
      return 0;
    },
    /*src__services__raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierCapsLock*/get modifierCapsLock() {
      return 1;
    },
    /*src__services__raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierLeftShift*/get modifierLeftShift() {
      return 2;
    },
    /*src__services__raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierRightShift*/get modifierRightShift() {
      return 4;
    },
    /*src__services__raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierShift*/get modifierShift() {
      return (dart.notNull(src__services__raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierLeftShift) | dart.notNull(src__services__raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierRightShift)) >>> 0;
    },
    /*src__services__raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierLeftControl*/get modifierLeftControl() {
      return 8;
    },
    /*src__services__raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierRightControl*/get modifierRightControl() {
      return 16;
    },
    /*src__services__raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierControl*/get modifierControl() {
      return (dart.notNull(src__services__raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierLeftControl) | dart.notNull(src__services__raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierRightControl)) >>> 0;
    },
    /*src__services__raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierLeftAlt*/get modifierLeftAlt() {
      return 32;
    },
    /*src__services__raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierRightAlt*/get modifierRightAlt() {
      return 64;
    },
    /*src__services__raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierAlt*/get modifierAlt() {
      return (dart.notNull(src__services__raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierLeftAlt) | dart.notNull(src__services__raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierRightAlt)) >>> 0;
    },
    /*src__services__raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierLeftMeta*/get modifierLeftMeta() {
      return 128;
    },
    /*src__services__raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierRightMeta*/get modifierRightMeta() {
      return 256;
    },
    /*src__services__raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierMeta*/get modifierMeta() {
      return (dart.notNull(src__services__raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierLeftMeta) | dart.notNull(src__services__raw_keyboard_fuchsia.RawKeyEventDataFuchsia.modifierRightMeta)) >>> 0;
    }
  });
  const _name$6 = dart.privateName(src__services__raw_keyboard, "_name");
  src__services__raw_keyboard.KeyboardSide = class KeyboardSide extends core.Object {
    toString() {
      return this[_name$6];
    }
  };
  (src__services__raw_keyboard.KeyboardSide.new = function(index, _name) {
    this.index = index;
    this[_name$6] = _name;
    ;
  }).prototype = src__services__raw_keyboard.KeyboardSide.prototype;
  dart.addTypeTests(src__services__raw_keyboard.KeyboardSide);
  dart.setLibraryUri(src__services__raw_keyboard.KeyboardSide, "package:flutter_web/src/services/raw_keyboard.dart");
  dart.setFieldSignature(src__services__raw_keyboard.KeyboardSide, () => ({
    __proto__: dart.getFields(src__services__raw_keyboard.KeyboardSide.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$6]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(src__services__raw_keyboard.KeyboardSide, ['toString']);
  src__services__raw_keyboard.KeyboardSide.any = dart.const(new src__services__raw_keyboard.KeyboardSide.new(0, "KeyboardSide.any"));
  src__services__raw_keyboard.KeyboardSide.left = dart.const(new src__services__raw_keyboard.KeyboardSide.new(1, "KeyboardSide.left"));
  src__services__raw_keyboard.KeyboardSide.right = dart.const(new src__services__raw_keyboard.KeyboardSide.new(2, "KeyboardSide.right"));
  src__services__raw_keyboard.KeyboardSide.all = dart.const(new src__services__raw_keyboard.KeyboardSide.new(3, "KeyboardSide.all"));
  src__services__raw_keyboard.KeyboardSide.values = dart.constList([src__services__raw_keyboard.KeyboardSide.any, src__services__raw_keyboard.KeyboardSide.left, src__services__raw_keyboard.KeyboardSide.right, src__services__raw_keyboard.KeyboardSide.all], src__services__raw_keyboard.KeyboardSide);
  src__services__raw_keyboard.ModifierKey = class ModifierKey extends core.Object {
    toString() {
      return this[_name$6];
    }
  };
  (src__services__raw_keyboard.ModifierKey.new = function(index, _name) {
    this.index = index;
    this[_name$6] = _name;
    ;
  }).prototype = src__services__raw_keyboard.ModifierKey.prototype;
  dart.addTypeTests(src__services__raw_keyboard.ModifierKey);
  dart.setLibraryUri(src__services__raw_keyboard.ModifierKey, "package:flutter_web/src/services/raw_keyboard.dart");
  dart.setFieldSignature(src__services__raw_keyboard.ModifierKey, () => ({
    __proto__: dart.getFields(src__services__raw_keyboard.ModifierKey.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$6]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(src__services__raw_keyboard.ModifierKey, ['toString']);
  src__services__raw_keyboard.ModifierKey.controlModifier = dart.const(new src__services__raw_keyboard.ModifierKey.new(0, "ModifierKey.controlModifier"));
  src__services__raw_keyboard.ModifierKey.shiftModifier = dart.const(new src__services__raw_keyboard.ModifierKey.new(1, "ModifierKey.shiftModifier"));
  src__services__raw_keyboard.ModifierKey.altModifier = dart.const(new src__services__raw_keyboard.ModifierKey.new(2, "ModifierKey.altModifier"));
  src__services__raw_keyboard.ModifierKey.metaModifier = dart.const(new src__services__raw_keyboard.ModifierKey.new(3, "ModifierKey.metaModifier"));
  src__services__raw_keyboard.ModifierKey.capsLockModifier = dart.const(new src__services__raw_keyboard.ModifierKey.new(4, "ModifierKey.capsLockModifier"));
  src__services__raw_keyboard.ModifierKey.numLockModifier = dart.const(new src__services__raw_keyboard.ModifierKey.new(5, "ModifierKey.numLockModifier"));
  src__services__raw_keyboard.ModifierKey.scrollLockModifier = dart.const(new src__services__raw_keyboard.ModifierKey.new(6, "ModifierKey.scrollLockModifier"));
  src__services__raw_keyboard.ModifierKey.functionModifier = dart.const(new src__services__raw_keyboard.ModifierKey.new(7, "ModifierKey.functionModifier"));
  src__services__raw_keyboard.ModifierKey.symbolModifier = dart.const(new src__services__raw_keyboard.ModifierKey.new(8, "ModifierKey.symbolModifier"));
  src__services__raw_keyboard.ModifierKey.values = dart.constList([src__services__raw_keyboard.ModifierKey.controlModifier, src__services__raw_keyboard.ModifierKey.shiftModifier, src__services__raw_keyboard.ModifierKey.altModifier, src__services__raw_keyboard.ModifierKey.metaModifier, src__services__raw_keyboard.ModifierKey.capsLockModifier, src__services__raw_keyboard.ModifierKey.numLockModifier, src__services__raw_keyboard.ModifierKey.scrollLockModifier, src__services__raw_keyboard.ModifierKey.functionModifier, src__services__raw_keyboard.ModifierKey.symbolModifier], src__services__raw_keyboard.ModifierKey);
  src__services__raw_keyboard.RawKeyEvent = class RawKeyEvent extends core.Object {
    get character() {
      return this[character$];
    }
    set character(value) {
      super.character = value;
    }
    get data() {
      return this[data$];
    }
    set data(value) {
      super.data = value;
    }
    static fromMessage(message) {
      let t16, t16$, t16$0, t16$1, t16$2, t16$3, t16$4, t16$5, t16$6, t16$7, t16$8, t16$9, t16$10, t16$11, t16$12, t16$13, t16$14, t16$15;
      let data = null;
      let keymap = core.String._check(message[$_get]("keymap"));
      switch (keymap) {
        case "fuchsia":
        {
          data = new src__services__raw_keyboard_fuchsia.RawKeyEventDataFuchsia.new({hidUsage: core.int._check((t16 = message[$_get]("hidUsage"), t16 == null ? 0 : t16)), codePoint: core.int._check((t16$ = message[$_get]("codePoint"), t16$ == null ? 0 : t16$)), modifiers: core.int._check((t16$0 = message[$_get]("modifiers"), t16$0 == null ? 0 : t16$0))});
          break;
        }
        case "android":
        {
          data = new src__services__raw_keyboard_android.RawKeyEventDataAndroid.new({flags: core.int._check((t16$1 = message[$_get]("flags"), t16$1 == null ? 0 : t16$1)), codePoint: core.int._check((t16$2 = message[$_get]("codePoint"), t16$2 == null ? 0 : t16$2)), keyCode: core.int._check((t16$3 = message[$_get]("keyCode"), t16$3 == null ? 0 : t16$3)), plainCodePoint: core.int._check((t16$4 = message[$_get]("plainCodePoint"), t16$4 == null ? 0 : t16$4)), scanCode: core.int._check((t16$5 = message[$_get]("scanCode"), t16$5 == null ? 0 : t16$5)), metaState: core.int._check((t16$6 = message[$_get]("metaState"), t16$6 == null ? 0 : t16$6))});
          break;
        }
        default:
        {
          dart.throw(src__foundation__assertions.FlutterError.new("Unknown keymap for key events: " + dart.str(keymap)));
        }
      }
      if (!dart.test(ui$.isWeb)) {
        switch (keymap) {
          case "macos":
          {
            data = new src__services__raw_keyboard_macos.RawKeyEventDataMacOs.new({characters: core.String._check((t16$7 = message[$_get]("characters"), t16$7 == null ? "" : t16$7)), charactersIgnoringModifiers: core.String._check((t16$8 = message[$_get]("charactersIgnoringModifiers"), t16$8 == null ? "" : t16$8)), keyCode: core.int._check((t16$9 = message[$_get]("keyCode"), t16$9 == null ? 0 : t16$9)), modifiers: core.int._check((t16$10 = message[$_get]("modifiers"), t16$10 == null ? 0 : t16$10))});
            break;
          }
          case "linux":
          {
            data = new src__services__raw_keyboard_linux.RawKeyEventDataLinux.new({keyHelper: src__services__raw_keyboard_linux.KeyHelper.new(core.String._check((t16$11 = message[$_get]("toolkit"), t16$11 == null ? "" : t16$11))), codePoint: core.int._check((t16$12 = message[$_get]("codePoint"), t16$12 == null ? 0 : t16$12)), keyCode: core.int._check((t16$13 = message[$_get]("keyCode"), t16$13 == null ? 0 : t16$13)), scanCode: core.int._check((t16$14 = message[$_get]("scanCode"), t16$14 == null ? 0 : t16$14)), modifiers: core.int._check((t16$15 = message[$_get]("modifiers"), t16$15 == null ? 0 : t16$15))});
            break;
          }
          default:
          {
            dart.throw(src__foundation__assertions.FlutterError.new("Unknown keymap for key events: " + dart.str(keymap)));
          }
        }
      }
      let type = core.String._check(message[$_get]("type"));
      switch (type) {
        case "keydown":
        {
          return new src__services__raw_keyboard.RawKeyDownEvent.new({data: data, character: core.String._check(message[$_get]("character"))});
        }
        case "keyup":
        {
          return new src__services__raw_keyboard.RawKeyUpEvent.new({data: data});
        }
        default:
        {
          dart.throw(src__foundation__assertions.FlutterError.new("Unknown key event type: " + dart.str(type)));
        }
      }
    }
    isKeyPressed(key) {
      return src__services__raw_keyboard.RawKeyboard.instance.keysPressed.contains(key);
    }
    get isControlPressed() {
      return dart.test(this.isKeyPressed(src__services__keyboard_key.LogicalKeyboardKey.controlLeft)) || dart.test(this.isKeyPressed(src__services__keyboard_key.LogicalKeyboardKey.controlRight));
    }
    get isShiftPressed() {
      return dart.test(this.isKeyPressed(src__services__keyboard_key.LogicalKeyboardKey.shiftLeft)) || dart.test(this.isKeyPressed(src__services__keyboard_key.LogicalKeyboardKey.shiftRight));
    }
    get isAltPressed() {
      return dart.test(this.isKeyPressed(src__services__keyboard_key.LogicalKeyboardKey.altLeft)) || dart.test(this.isKeyPressed(src__services__keyboard_key.LogicalKeyboardKey.altRight));
    }
    get isMetaPressed() {
      return dart.test(this.isKeyPressed(src__services__keyboard_key.LogicalKeyboardKey.metaLeft)) || dart.test(this.isKeyPressed(src__services__keyboard_key.LogicalKeyboardKey.metaRight));
    }
    get physicalKey() {
      return this.data.physicalKey;
    }
    get logicalKey() {
      return this.data.logicalKey;
    }
  };
  (src__services__raw_keyboard.RawKeyEvent.new = function(opts) {
    let data = opts && 'data' in opts ? opts.data : null;
    let character = opts && 'character' in opts ? opts.character : null;
    this[data$] = data;
    this[character$] = character;
    ;
  }).prototype = src__services__raw_keyboard.RawKeyEvent.prototype;
  dart.addTypeTests(src__services__raw_keyboard.RawKeyEvent);
  const character$ = Symbol("RawKeyEvent.character");
  const data$ = Symbol("RawKeyEvent.data");
  dart.setMethodSignature(src__services__raw_keyboard.RawKeyEvent, () => ({
    __proto__: dart.getMethods(src__services__raw_keyboard.RawKeyEvent.__proto__),
    isKeyPressed: dart.fnType(core.bool, [src__services__keyboard_key.LogicalKeyboardKey])
  }));
  dart.setGetterSignature(src__services__raw_keyboard.RawKeyEvent, () => ({
    __proto__: dart.getGetters(src__services__raw_keyboard.RawKeyEvent.__proto__),
    isControlPressed: core.bool,
    isShiftPressed: core.bool,
    isAltPressed: core.bool,
    isMetaPressed: core.bool,
    physicalKey: src__services__keyboard_key.PhysicalKeyboardKey,
    logicalKey: src__services__keyboard_key.LogicalKeyboardKey
  }));
  dart.setLibraryUri(src__services__raw_keyboard.RawKeyEvent, "package:flutter_web/src/services/raw_keyboard.dart");
  dart.setFieldSignature(src__services__raw_keyboard.RawKeyEvent, () => ({
    __proto__: dart.getFields(src__services__raw_keyboard.RawKeyEvent.__proto__),
    character: dart.finalFieldType(core.String),
    data: dart.finalFieldType(src__services__raw_keyboard.RawKeyEventData)
  }));
  src__services__raw_keyboard.RawKeyDownEvent = class RawKeyDownEvent extends src__services__raw_keyboard.RawKeyEvent {};
  (src__services__raw_keyboard.RawKeyDownEvent.new = function(opts) {
    let data = opts && 'data' in opts ? opts.data : null;
    let character = opts && 'character' in opts ? opts.character : null;
    src__services__raw_keyboard.RawKeyDownEvent.__proto__.new.call(this, {data: data, character: character});
    ;
  }).prototype = src__services__raw_keyboard.RawKeyDownEvent.prototype;
  dart.addTypeTests(src__services__raw_keyboard.RawKeyDownEvent);
  dart.setLibraryUri(src__services__raw_keyboard.RawKeyDownEvent, "package:flutter_web/src/services/raw_keyboard.dart");
  src__services__raw_keyboard.RawKeyUpEvent = class RawKeyUpEvent extends src__services__raw_keyboard.RawKeyEvent {};
  (src__services__raw_keyboard.RawKeyUpEvent.new = function(opts) {
    let data = opts && 'data' in opts ? opts.data : null;
    let character = opts && 'character' in opts ? opts.character : null;
    src__services__raw_keyboard.RawKeyUpEvent.__proto__.new.call(this, {data: data, character: character});
    ;
  }).prototype = src__services__raw_keyboard.RawKeyUpEvent.prototype;
  dart.addTypeTests(src__services__raw_keyboard.RawKeyUpEvent);
  dart.setLibraryUri(src__services__raw_keyboard.RawKeyUpEvent, "package:flutter_web/src/services/raw_keyboard.dart");
  const _listeners$ = dart.privateName(src__services__raw_keyboard, "_listeners");
  const _keysPressed = dart.privateName(src__services__raw_keyboard, "_keysPressed");
  const _handleKeyEvent = dart.privateName(src__services__raw_keyboard, "_handleKeyEvent");
  src__services__raw_keyboard.RawKeyboard = class RawKeyboard extends core.Object {
    addListener(listener) {
      this[_listeners$][$add](listener);
    }
    removeListener(listener) {
      this[_listeners$][$remove](listener);
    }
    [_handleKeyEvent](message) {
      return async.async(dart.dynamic, (function* _handleKeyEvent() {
        let event = src__services__raw_keyboard.RawKeyEvent.fromMessage(MapOfString$dynamic()._check(message));
        if (event == null) {
          return;
        }
        if (src__services__raw_keyboard.RawKeyDownEvent.is(event)) {
          this[_keysPressed].add(event.logicalKey);
        }
        if (src__services__raw_keyboard.RawKeyUpEvent.is(event)) {
          this[_keysPressed].remove(event.logicalKey);
        }
        if (dart.test(this[_listeners$][$isEmpty])) {
          return;
        }
        for (let listener of ListOfRawKeyEventTovoid().from(this[_listeners$])) {
          if (dart.test(this[_listeners$][$contains](listener))) {
            listener(event);
          }
        }
      }).bind(this));
    }
    get keysPressed() {
      return this[_keysPressed].toSet();
    }
  };
  (src__services__raw_keyboard.RawKeyboard.__ = function() {
    this[_listeners$] = JSArrayOfRawKeyEventTovoid().of([]);
    this[_keysPressed] = LinkedHashSetOfLogicalKeyboardKey().new();
    src__services__system_channels.SystemChannels.keyEvent.setMessageHandler(dart.bind(this, _handleKeyEvent));
  }).prototype = src__services__raw_keyboard.RawKeyboard.prototype;
  dart.addTypeTests(src__services__raw_keyboard.RawKeyboard);
  dart.setMethodSignature(src__services__raw_keyboard.RawKeyboard, () => ({
    __proto__: dart.getMethods(src__services__raw_keyboard.RawKeyboard.__proto__),
    addListener: dart.fnType(dart.void, [dart.fnType(dart.void, [src__services__raw_keyboard.RawKeyEvent])]),
    removeListener: dart.fnType(dart.void, [dart.fnType(dart.void, [src__services__raw_keyboard.RawKeyEvent])]),
    [_handleKeyEvent]: dart.fnType(async.Future, [dart.dynamic])
  }));
  dart.setGetterSignature(src__services__raw_keyboard.RawKeyboard, () => ({
    __proto__: dart.getGetters(src__services__raw_keyboard.RawKeyboard.__proto__),
    keysPressed: core.Set$(src__services__keyboard_key.LogicalKeyboardKey)
  }));
  dart.setLibraryUri(src__services__raw_keyboard.RawKeyboard, "package:flutter_web/src/services/raw_keyboard.dart");
  dart.setFieldSignature(src__services__raw_keyboard.RawKeyboard, () => ({
    __proto__: dart.getFields(src__services__raw_keyboard.RawKeyboard.__proto__),
    [_listeners$]: dart.finalFieldType(core.List$(dart.fnType(dart.void, [src__services__raw_keyboard.RawKeyEvent]))),
    [_keysPressed]: dart.finalFieldType(core.Set$(src__services__keyboard_key.LogicalKeyboardKey))
  }));
  dart.defineLazy(src__services__raw_keyboard.RawKeyboard, {
    /*src__services__raw_keyboard.RawKeyboard.instance*/get instance() {
      return new src__services__raw_keyboard.RawKeyboard.__();
    }
  });
  src__services__raw_keyboard_linux.RawKeyEventDataLinux = class RawKeyEventDataLinux extends src__services__raw_keyboard.RawKeyEventData {
    get keyHelper() {
      return this[keyHelper$];
    }
    set keyHelper(value) {
      super.keyHelper = value;
    }
    get scanCode() {
      return this[scanCode$];
    }
    set scanCode(value) {
      super.scanCode = value;
    }
    get codePoint() {
      return this[codePoint$0];
    }
    set codePoint(value) {
      super.codePoint = value;
    }
    get keyCode() {
      return this[keyCode$];
    }
    set keyCode(value) {
      super.keyCode = value;
    }
    get modifiers() {
      return this[modifiers$0];
    }
    set modifiers(value) {
      super.modifiers = value;
    }
    get keyLabel() {
      return this.codePoint === 0 ? null : core.String.fromCharCode(this.codePoint);
    }
    get physicalKey() {
      let t16;
      t16 = src__services__keyboard_maps.kLinuxToPhysicalKey[$_get](this.scanCode);
      return t16 == null ? src__services__keyboard_key.PhysicalKeyboardKey.none : t16;
    }
    get logicalKey() {
      let t16;
      let numPadKey = this.keyHelper.numpadKey(this.keyCode);
      if (numPadKey != null) {
        return numPadKey;
      }
      if (this.keyLabel != null && !dart.test(src__services__keyboard_key.LogicalKeyboardKey.isControlCharacter(this.keyLabel))) {
        let keyId = (dart.notNull(src__services__keyboard_key.LogicalKeyboardKey.unicodePlane) | (dart.notNull(this.codePoint) & dart.notNull(src__services__keyboard_key.LogicalKeyboardKey.valueMask)) >>> 0) >>> 0;
        t16 = src__services__keyboard_key.LogicalKeyboardKey.findKeyByKeyId(keyId);
        return t16 == null ? new src__services__keyboard_key.LogicalKeyboardKey.new(keyId, {keyLabel: this.keyLabel, debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Key " + this.keyLabel[$toUpperCase]()}) : t16;
      }
      let newKey = this.keyHelper.logicalKey(this.keyCode);
      if (newKey != null) {
        return newKey;
      }
      let linuxKeyIdPlane = 25769803776;
      newKey == null ? newKey = new src__services__keyboard_key.LogicalKeyboardKey.new((linuxKeyIdPlane | dart.notNull(this.keyCode) | dart.notNull(src__services__keyboard_key.LogicalKeyboardKey.autogeneratedMask)) >>> 0, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Unknown key code " + dart.str(this.keyCode)}) : null;
      return newKey;
    }
    isModifierPressed(key, opts) {
      let side = opts && 'side' in opts ? opts.side : src__services__raw_keyboard.KeyboardSide.any;
      return this.keyHelper.isModifierPressed(key, this.modifiers, {side: side});
    }
    getModifierSide(key) {
      return this.keyHelper.getModifierSide(key);
    }
    toString() {
      return dart.str(this[$runtimeType]) + "(keyLabel: " + dart.str(this.keyLabel) + ", keyCode: " + dart.str(this.keyCode) + ", scanCode: " + dart.str(this.scanCode) + "," + " codePoint: " + dart.str(this.codePoint) + ", modifiers: " + dart.str(this.modifiers) + ", " + "modifiers down: " + dart.str(this.modifiersPressed) + ")";
    }
  };
  (src__services__raw_keyboard_linux.RawKeyEventDataLinux.new = function(opts) {
    let keyHelper = opts && 'keyHelper' in opts ? opts.keyHelper : null;
    let scanCode = opts && 'scanCode' in opts ? opts.scanCode : 0;
    let codePoint = opts && 'codePoint' in opts ? opts.codePoint : 0;
    let keyCode = opts && 'keyCode' in opts ? opts.keyCode : 0;
    let modifiers = opts && 'modifiers' in opts ? opts.modifiers : 0;
    this[keyHelper$] = keyHelper;
    this[scanCode$] = scanCode;
    this[codePoint$0] = codePoint;
    this[keyCode$] = keyCode;
    this[modifiers$0] = modifiers;
    if (!(scanCode != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/raw_keyboard_linux.dart", 31, 15, "scanCode != null");
    if (!(codePoint != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/raw_keyboard_linux.dart", 32, 15, "codePoint != null");
    if (!(keyCode != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/raw_keyboard_linux.dart", 33, 15, "keyCode != null");
    if (!(modifiers != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/raw_keyboard_linux.dart", 34, 15, "modifiers != null");
    if (!(keyHelper != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/raw_keyboard_linux.dart", 35, 15, "keyHelper != null");
    src__services__raw_keyboard_linux.RawKeyEventDataLinux.__proto__.new.call(this);
    ;
  }).prototype = src__services__raw_keyboard_linux.RawKeyEventDataLinux.prototype;
  dart.addTypeTests(src__services__raw_keyboard_linux.RawKeyEventDataLinux);
  const keyHelper$ = Symbol("RawKeyEventDataLinux.keyHelper");
  const scanCode$ = Symbol("RawKeyEventDataLinux.scanCode");
  const codePoint$0 = Symbol("RawKeyEventDataLinux.codePoint");
  const keyCode$ = Symbol("RawKeyEventDataLinux.keyCode");
  const modifiers$0 = Symbol("RawKeyEventDataLinux.modifiers");
  dart.setMethodSignature(src__services__raw_keyboard_linux.RawKeyEventDataLinux, () => ({
    __proto__: dart.getMethods(src__services__raw_keyboard_linux.RawKeyEventDataLinux.__proto__),
    isModifierPressed: dart.fnType(core.bool, [src__services__raw_keyboard.ModifierKey], {side: src__services__raw_keyboard.KeyboardSide}),
    getModifierSide: dart.fnType(src__services__raw_keyboard.KeyboardSide, [src__services__raw_keyboard.ModifierKey])
  }));
  dart.setGetterSignature(src__services__raw_keyboard_linux.RawKeyEventDataLinux, () => ({
    __proto__: dart.getGetters(src__services__raw_keyboard_linux.RawKeyEventDataLinux.__proto__),
    keyLabel: core.String,
    physicalKey: src__services__keyboard_key.PhysicalKeyboardKey,
    logicalKey: src__services__keyboard_key.LogicalKeyboardKey
  }));
  dart.setLibraryUri(src__services__raw_keyboard_linux.RawKeyEventDataLinux, "package:flutter_web/src/services/raw_keyboard_linux.dart");
  dart.setFieldSignature(src__services__raw_keyboard_linux.RawKeyEventDataLinux, () => ({
    __proto__: dart.getFields(src__services__raw_keyboard_linux.RawKeyEventDataLinux.__proto__),
    keyHelper: dart.finalFieldType(src__services__raw_keyboard_linux.KeyHelper),
    scanCode: dart.finalFieldType(core.int),
    codePoint: dart.finalFieldType(core.int),
    keyCode: dart.finalFieldType(core.int),
    modifiers: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(src__services__raw_keyboard_linux.RawKeyEventDataLinux, ['toString']);
  src__services__raw_keyboard_linux.KeyHelper = class KeyHelper extends core.Object {
    static new(toolkit) {
      if (toolkit === "glfw") {
        return new src__services__raw_keyboard_linux.GLFWKeyHelper.new();
      } else {
        dart.throw(src__foundation__assertions.FlutterError.new("Window toolkit not recognized: " + dart.str(toolkit)));
      }
    }
  };
  (src__services__raw_keyboard_linux.KeyHelper[dart.mixinNew] = function() {
  }).prototype = src__services__raw_keyboard_linux.KeyHelper.prototype;
  dart.addTypeTests(src__services__raw_keyboard_linux.KeyHelper);
  dart.setLibraryUri(src__services__raw_keyboard_linux.KeyHelper, "package:flutter_web/src/services/raw_keyboard_linux.dart");
  const Object_KeyHelper$ = class Object_KeyHelper extends core.Object {};
  (Object_KeyHelper$.new = function() {
  }).prototype = Object_KeyHelper$.prototype;
  dart.applyMixin(Object_KeyHelper$, src__services__raw_keyboard_linux.KeyHelper);
  src__services__raw_keyboard_linux.GLFWKeyHelper = class GLFWKeyHelper extends Object_KeyHelper$ {
    isModifierPressed(key, modifiers, opts) {
      let side = opts && 'side' in opts ? opts.side : src__services__raw_keyboard.KeyboardSide.any;
      switch (key) {
        case src__services__raw_keyboard.ModifierKey.controlModifier:
        {
          return (dart.notNull(modifiers) & dart.notNull(src__services__raw_keyboard_linux.GLFWKeyHelper.modifierControl)) !== 0;
        }
        case src__services__raw_keyboard.ModifierKey.shiftModifier:
        {
          return (dart.notNull(modifiers) & dart.notNull(src__services__raw_keyboard_linux.GLFWKeyHelper.modifierShift)) !== 0;
        }
        case src__services__raw_keyboard.ModifierKey.altModifier:
        {
          return (dart.notNull(modifiers) & dart.notNull(src__services__raw_keyboard_linux.GLFWKeyHelper.modifierAlt)) !== 0;
        }
        case src__services__raw_keyboard.ModifierKey.metaModifier:
        {
          return (dart.notNull(modifiers) & dart.notNull(src__services__raw_keyboard_linux.GLFWKeyHelper.modifierMeta)) !== 0;
        }
        case src__services__raw_keyboard.ModifierKey.capsLockModifier:
        {
          return (dart.notNull(modifiers) & dart.notNull(src__services__raw_keyboard_linux.GLFWKeyHelper.modifierCapsLock)) !== 0;
        }
        case src__services__raw_keyboard.ModifierKey.numLockModifier:
        {
          return (dart.notNull(modifiers) & dart.notNull(src__services__raw_keyboard_linux.GLFWKeyHelper.modifierNumericPad)) !== 0;
        }
        case src__services__raw_keyboard.ModifierKey.functionModifier:
        case src__services__raw_keyboard.ModifierKey.symbolModifier:
        case src__services__raw_keyboard.ModifierKey.scrollLockModifier:
        {
          return false;
        }
      }
      return false;
    }
    getModifierSide(key) {
      switch (key) {
        case src__services__raw_keyboard.ModifierKey.controlModifier:
        case src__services__raw_keyboard.ModifierKey.shiftModifier:
        case src__services__raw_keyboard.ModifierKey.altModifier:
        case src__services__raw_keyboard.ModifierKey.metaModifier:
        {
          return src__services__raw_keyboard.KeyboardSide.any;
        }
        case src__services__raw_keyboard.ModifierKey.capsLockModifier:
        case src__services__raw_keyboard.ModifierKey.numLockModifier:
        case src__services__raw_keyboard.ModifierKey.functionModifier:
        case src__services__raw_keyboard.ModifierKey.symbolModifier:
        case src__services__raw_keyboard.ModifierKey.scrollLockModifier:
        {
          return src__services__raw_keyboard.KeyboardSide.all;
        }
      }
      if (!false) dart.assertFailed("Not handling " + dart.str(key) + " type properly.", "org-dartlang-app:///packages/flutter_web/src/services/raw_keyboard_linux.dart", 246, 12, "false");
      return null;
    }
    numpadKey(keyCode) {
      return src__services__keyboard_maps.kGlfwNumpadMap[$_get](keyCode);
    }
    logicalKey(keyCode) {
      return src__services__keyboard_maps.kGlfwToLogicalKey[$_get](keyCode);
    }
  };
  (src__services__raw_keyboard_linux.GLFWKeyHelper.new = function() {
    ;
  }).prototype = src__services__raw_keyboard_linux.GLFWKeyHelper.prototype;
  dart.addTypeTests(src__services__raw_keyboard_linux.GLFWKeyHelper);
  dart.setMethodSignature(src__services__raw_keyboard_linux.GLFWKeyHelper, () => ({
    __proto__: dart.getMethods(src__services__raw_keyboard_linux.GLFWKeyHelper.__proto__),
    isModifierPressed: dart.fnType(core.bool, [src__services__raw_keyboard.ModifierKey, core.int], {side: src__services__raw_keyboard.KeyboardSide}),
    getModifierSide: dart.fnType(src__services__raw_keyboard.KeyboardSide, [src__services__raw_keyboard.ModifierKey]),
    numpadKey: dart.fnType(src__services__keyboard_key.LogicalKeyboardKey, [core.int]),
    logicalKey: dart.fnType(src__services__keyboard_key.LogicalKeyboardKey, [core.int])
  }));
  dart.setLibraryUri(src__services__raw_keyboard_linux.GLFWKeyHelper, "package:flutter_web/src/services/raw_keyboard_linux.dart");
  dart.defineLazy(src__services__raw_keyboard_linux.GLFWKeyHelper, {
    /*src__services__raw_keyboard_linux.GLFWKeyHelper.modifierCapsLock*/get modifierCapsLock() {
      return 16;
    },
    /*src__services__raw_keyboard_linux.GLFWKeyHelper.modifierShift*/get modifierShift() {
      return 1;
    },
    /*src__services__raw_keyboard_linux.GLFWKeyHelper.modifierControl*/get modifierControl() {
      return 2;
    },
    /*src__services__raw_keyboard_linux.GLFWKeyHelper.modifierAlt*/get modifierAlt() {
      return 4;
    },
    /*src__services__raw_keyboard_linux.GLFWKeyHelper.modifierMeta*/get modifierMeta() {
      return 8;
    },
    /*src__services__raw_keyboard_linux.GLFWKeyHelper.modifierNumericPad*/get modifierNumericPad() {
      return 32;
    }
  });
  dart.defineLazy(src__services__keyboard_maps, {
    /*src__services__keyboard_maps.kAndroidToLogicalKey*/get kAndroidToLogicalKey() {
      return dart.constMap(core.int, src__services__keyboard_key.LogicalKeyboardKey, [0, src__services__keyboard_key.LogicalKeyboardKey.none, 119, src__services__keyboard_key.LogicalKeyboardKey.fn, 223, src__services__keyboard_key.LogicalKeyboardKey.sleep, 224, src__services__keyboard_key.LogicalKeyboardKey.wakeUp, 29, src__services__keyboard_key.LogicalKeyboardKey.keyA, 30, src__services__keyboard_key.LogicalKeyboardKey.keyB, 31, src__services__keyboard_key.LogicalKeyboardKey.keyC, 32, src__services__keyboard_key.LogicalKeyboardKey.keyD, 33, src__services__keyboard_key.LogicalKeyboardKey.keyE, 34, src__services__keyboard_key.LogicalKeyboardKey.keyF, 35, src__services__keyboard_key.LogicalKeyboardKey.keyG, 36, src__services__keyboard_key.LogicalKeyboardKey.keyH, 37, src__services__keyboard_key.LogicalKeyboardKey.keyI, 38, src__services__keyboard_key.LogicalKeyboardKey.keyJ, 39, src__services__keyboard_key.LogicalKeyboardKey.keyK, 40, src__services__keyboard_key.LogicalKeyboardKey.keyL, 41, src__services__keyboard_key.LogicalKeyboardKey.keyM, 42, src__services__keyboard_key.LogicalKeyboardKey.keyN, 43, src__services__keyboard_key.LogicalKeyboardKey.keyO, 44, src__services__keyboard_key.LogicalKeyboardKey.keyP, 45, src__services__keyboard_key.LogicalKeyboardKey.keyQ, 46, src__services__keyboard_key.LogicalKeyboardKey.keyR, 47, src__services__keyboard_key.LogicalKeyboardKey.keyS, 48, src__services__keyboard_key.LogicalKeyboardKey.keyT, 49, src__services__keyboard_key.LogicalKeyboardKey.keyU, 50, src__services__keyboard_key.LogicalKeyboardKey.keyV, 51, src__services__keyboard_key.LogicalKeyboardKey.keyW, 52, src__services__keyboard_key.LogicalKeyboardKey.keyX, 53, src__services__keyboard_key.LogicalKeyboardKey.keyY, 54, src__services__keyboard_key.LogicalKeyboardKey.keyZ, 8, src__services__keyboard_key.LogicalKeyboardKey.digit1, 9, src__services__keyboard_key.LogicalKeyboardKey.digit2, 10, src__services__keyboard_key.LogicalKeyboardKey.digit3, 11, src__services__keyboard_key.LogicalKeyboardKey.digit4, 12, src__services__keyboard_key.LogicalKeyboardKey.digit5, 13, src__services__keyboard_key.LogicalKeyboardKey.digit6, 14, src__services__keyboard_key.LogicalKeyboardKey.digit7, 15, src__services__keyboard_key.LogicalKeyboardKey.digit8, 16, src__services__keyboard_key.LogicalKeyboardKey.digit9, 7, src__services__keyboard_key.LogicalKeyboardKey.digit0, 66, src__services__keyboard_key.LogicalKeyboardKey.enter, 111, src__services__keyboard_key.LogicalKeyboardKey.escape, 67, src__services__keyboard_key.LogicalKeyboardKey.backspace, 61, src__services__keyboard_key.LogicalKeyboardKey.tab, 62, src__services__keyboard_key.LogicalKeyboardKey.space, 69, src__services__keyboard_key.LogicalKeyboardKey.minus, 70, src__services__keyboard_key.LogicalKeyboardKey.equal, 71, src__services__keyboard_key.LogicalKeyboardKey.bracketLeft, 72, src__services__keyboard_key.LogicalKeyboardKey.bracketRight, 73, src__services__keyboard_key.LogicalKeyboardKey.backslash, 74, src__services__keyboard_key.LogicalKeyboardKey.semicolon, 75, src__services__keyboard_key.LogicalKeyboardKey.quote, 68, src__services__keyboard_key.LogicalKeyboardKey.backquote, 55, src__services__keyboard_key.LogicalKeyboardKey.comma, 56, src__services__keyboard_key.LogicalKeyboardKey.period, 76, src__services__keyboard_key.LogicalKeyboardKey.slash, 115, src__services__keyboard_key.LogicalKeyboardKey.capsLock, 131, src__services__keyboard_key.LogicalKeyboardKey.f1, 132, src__services__keyboard_key.LogicalKeyboardKey.f2, 133, src__services__keyboard_key.LogicalKeyboardKey.f3, 134, src__services__keyboard_key.LogicalKeyboardKey.f4, 135, src__services__keyboard_key.LogicalKeyboardKey.f5, 136, src__services__keyboard_key.LogicalKeyboardKey.f6, 137, src__services__keyboard_key.LogicalKeyboardKey.f7, 138, src__services__keyboard_key.LogicalKeyboardKey.f8, 139, src__services__keyboard_key.LogicalKeyboardKey.f9, 140, src__services__keyboard_key.LogicalKeyboardKey.f10, 141, src__services__keyboard_key.LogicalKeyboardKey.f11, 142, src__services__keyboard_key.LogicalKeyboardKey.f12, 120, src__services__keyboard_key.LogicalKeyboardKey.printScreen, 116, src__services__keyboard_key.LogicalKeyboardKey.scrollLock, 121, src__services__keyboard_key.LogicalKeyboardKey.pause, 124, src__services__keyboard_key.LogicalKeyboardKey.insert, 122, src__services__keyboard_key.LogicalKeyboardKey.home, 92, src__services__keyboard_key.LogicalKeyboardKey.pageUp, 112, src__services__keyboard_key.LogicalKeyboardKey.delete, 123, src__services__keyboard_key.LogicalKeyboardKey.end, 93, src__services__keyboard_key.LogicalKeyboardKey.pageDown, 22, src__services__keyboard_key.LogicalKeyboardKey.arrowRight, 21, src__services__keyboard_key.LogicalKeyboardKey.arrowLeft, 20, src__services__keyboard_key.LogicalKeyboardKey.arrowDown, 19, src__services__keyboard_key.LogicalKeyboardKey.arrowUp, 143, src__services__keyboard_key.LogicalKeyboardKey.numLock, 154, src__services__keyboard_key.LogicalKeyboardKey.numpadDivide, 155, src__services__keyboard_key.LogicalKeyboardKey.numpadMultiply, 156, src__services__keyboard_key.LogicalKeyboardKey.numpadSubtract, 157, src__services__keyboard_key.LogicalKeyboardKey.numpadAdd, 160, src__services__keyboard_key.LogicalKeyboardKey.numpadEnter, 145, src__services__keyboard_key.LogicalKeyboardKey.numpad1, 146, src__services__keyboard_key.LogicalKeyboardKey.numpad2, 147, src__services__keyboard_key.LogicalKeyboardKey.numpad3, 148, src__services__keyboard_key.LogicalKeyboardKey.numpad4, 149, src__services__keyboard_key.LogicalKeyboardKey.numpad5, 150, src__services__keyboard_key.LogicalKeyboardKey.numpad6, 151, src__services__keyboard_key.LogicalKeyboardKey.numpad7, 152, src__services__keyboard_key.LogicalKeyboardKey.numpad8, 153, src__services__keyboard_key.LogicalKeyboardKey.numpad9, 144, src__services__keyboard_key.LogicalKeyboardKey.numpad0, 158, src__services__keyboard_key.LogicalKeyboardKey.numpadDecimal, 82, src__services__keyboard_key.LogicalKeyboardKey.contextMenu, 26, src__services__keyboard_key.LogicalKeyboardKey.power, 161, src__services__keyboard_key.LogicalKeyboardKey.numpadEqual, 259, src__services__keyboard_key.LogicalKeyboardKey.help, 277, src__services__keyboard_key.LogicalKeyboardKey.cut, 278, src__services__keyboard_key.LogicalKeyboardKey.copy, 279, src__services__keyboard_key.LogicalKeyboardKey.paste, 164, src__services__keyboard_key.LogicalKeyboardKey.audioVolumeMute, 24, src__services__keyboard_key.LogicalKeyboardKey.audioVolumeUp, 25, src__services__keyboard_key.LogicalKeyboardKey.audioVolumeDown, 159, src__services__keyboard_key.LogicalKeyboardKey.numpadComma, 214, src__services__keyboard_key.LogicalKeyboardKey.convert, 213, src__services__keyboard_key.LogicalKeyboardKey.nonConvert, 162, src__services__keyboard_key.LogicalKeyboardKey.numpadParenLeft, 163, src__services__keyboard_key.LogicalKeyboardKey.numpadParenRight, 113, src__services__keyboard_key.LogicalKeyboardKey.controlLeft, 59, src__services__keyboard_key.LogicalKeyboardKey.shiftLeft, 57, src__services__keyboard_key.LogicalKeyboardKey.altLeft, 117, src__services__keyboard_key.LogicalKeyboardKey.metaLeft, 114, src__services__keyboard_key.LogicalKeyboardKey.controlRight, 60, src__services__keyboard_key.LogicalKeyboardKey.shiftRight, 58, src__services__keyboard_key.LogicalKeyboardKey.altRight, 118, src__services__keyboard_key.LogicalKeyboardKey.metaRight, 165, src__services__keyboard_key.LogicalKeyboardKey.info, 175, src__services__keyboard_key.LogicalKeyboardKey.closedCaptionToggle, 221, src__services__keyboard_key.LogicalKeyboardKey.brightnessUp, 220, src__services__keyboard_key.LogicalKeyboardKey.brightnessDown, 229, src__services__keyboard_key.LogicalKeyboardKey.mediaLast, 166, src__services__keyboard_key.LogicalKeyboardKey.channelUp, 167, src__services__keyboard_key.LogicalKeyboardKey.channelDown, 126, src__services__keyboard_key.LogicalKeyboardKey.mediaPlay, 130, src__services__keyboard_key.LogicalKeyboardKey.mediaRecord, 90, src__services__keyboard_key.LogicalKeyboardKey.mediaFastForward, 89, src__services__keyboard_key.LogicalKeyboardKey.mediaRewind, 87, src__services__keyboard_key.LogicalKeyboardKey.mediaTrackNext, 88, src__services__keyboard_key.LogicalKeyboardKey.mediaTrackPrevious, 86, src__services__keyboard_key.LogicalKeyboardKey.mediaStop, 129, src__services__keyboard_key.LogicalKeyboardKey.eject, 85, src__services__keyboard_key.LogicalKeyboardKey.mediaPlayPause, 65, src__services__keyboard_key.LogicalKeyboardKey.launchMail, 207, src__services__keyboard_key.LogicalKeyboardKey.launchContacts, 208, src__services__keyboard_key.LogicalKeyboardKey.launchCalendar, 219, src__services__keyboard_key.LogicalKeyboardKey.launchAssistant, 128, src__services__keyboard_key.LogicalKeyboardKey.close, 84, src__services__keyboard_key.LogicalKeyboardKey.browserSearch, 125, src__services__keyboard_key.LogicalKeyboardKey.browserForward, 174, src__services__keyboard_key.LogicalKeyboardKey.browserFavorites, 168, src__services__keyboard_key.LogicalKeyboardKey.zoomIn, 169, src__services__keyboard_key.LogicalKeyboardKey.zoomOut, 255, src__services__keyboard_key.LogicalKeyboardKey.zoomToggle]);
    },
    /*src__services__keyboard_maps.kAndroidToPhysicalKey*/get kAndroidToPhysicalKey() {
      return dart.constMap(core.int, src__services__keyboard_key.PhysicalKeyboardKey, [464, src__services__keyboard_key.PhysicalKeyboardKey.fn, 205, src__services__keyboard_key.PhysicalKeyboardKey.suspend, 142, src__services__keyboard_key.PhysicalKeyboardKey.sleep, 143, src__services__keyboard_key.PhysicalKeyboardKey.wakeUp, 30, src__services__keyboard_key.PhysicalKeyboardKey.keyA, 48, src__services__keyboard_key.PhysicalKeyboardKey.keyB, 46, src__services__keyboard_key.PhysicalKeyboardKey.keyC, 32, src__services__keyboard_key.PhysicalKeyboardKey.keyD, 18, src__services__keyboard_key.PhysicalKeyboardKey.keyE, 33, src__services__keyboard_key.PhysicalKeyboardKey.keyF, 34, src__services__keyboard_key.PhysicalKeyboardKey.keyG, 35, src__services__keyboard_key.PhysicalKeyboardKey.keyH, 23, src__services__keyboard_key.PhysicalKeyboardKey.keyI, 36, src__services__keyboard_key.PhysicalKeyboardKey.keyJ, 37, src__services__keyboard_key.PhysicalKeyboardKey.keyK, 38, src__services__keyboard_key.PhysicalKeyboardKey.keyL, 50, src__services__keyboard_key.PhysicalKeyboardKey.keyM, 49, src__services__keyboard_key.PhysicalKeyboardKey.keyN, 24, src__services__keyboard_key.PhysicalKeyboardKey.keyO, 25, src__services__keyboard_key.PhysicalKeyboardKey.keyP, 16, src__services__keyboard_key.PhysicalKeyboardKey.keyQ, 19, src__services__keyboard_key.PhysicalKeyboardKey.keyR, 31, src__services__keyboard_key.PhysicalKeyboardKey.keyS, 20, src__services__keyboard_key.PhysicalKeyboardKey.keyT, 22, src__services__keyboard_key.PhysicalKeyboardKey.keyU, 47, src__services__keyboard_key.PhysicalKeyboardKey.keyV, 17, src__services__keyboard_key.PhysicalKeyboardKey.keyW, 45, src__services__keyboard_key.PhysicalKeyboardKey.keyX, 21, src__services__keyboard_key.PhysicalKeyboardKey.keyY, 44, src__services__keyboard_key.PhysicalKeyboardKey.keyZ, 2, src__services__keyboard_key.PhysicalKeyboardKey.digit1, 3, src__services__keyboard_key.PhysicalKeyboardKey.digit2, 4, src__services__keyboard_key.PhysicalKeyboardKey.digit3, 5, src__services__keyboard_key.PhysicalKeyboardKey.digit4, 6, src__services__keyboard_key.PhysicalKeyboardKey.digit5, 7, src__services__keyboard_key.PhysicalKeyboardKey.digit6, 8, src__services__keyboard_key.PhysicalKeyboardKey.digit7, 9, src__services__keyboard_key.PhysicalKeyboardKey.digit8, 10, src__services__keyboard_key.PhysicalKeyboardKey.digit9, 11, src__services__keyboard_key.PhysicalKeyboardKey.digit0, 28, src__services__keyboard_key.PhysicalKeyboardKey.enter, 1, src__services__keyboard_key.PhysicalKeyboardKey.escape, 14, src__services__keyboard_key.PhysicalKeyboardKey.backspace, 15, src__services__keyboard_key.PhysicalKeyboardKey.tab, 57, src__services__keyboard_key.PhysicalKeyboardKey.space, 12, src__services__keyboard_key.PhysicalKeyboardKey.minus, 13, src__services__keyboard_key.PhysicalKeyboardKey.equal, 26, src__services__keyboard_key.PhysicalKeyboardKey.bracketLeft, 27, src__services__keyboard_key.PhysicalKeyboardKey.bracketRight, 43, src__services__keyboard_key.PhysicalKeyboardKey.backslash, 86, src__services__keyboard_key.PhysicalKeyboardKey.backslash, 39, src__services__keyboard_key.PhysicalKeyboardKey.semicolon, 40, src__services__keyboard_key.PhysicalKeyboardKey.quote, 41, src__services__keyboard_key.PhysicalKeyboardKey.backquote, 51, src__services__keyboard_key.PhysicalKeyboardKey.comma, 52, src__services__keyboard_key.PhysicalKeyboardKey.period, 53, src__services__keyboard_key.PhysicalKeyboardKey.slash, 58, src__services__keyboard_key.PhysicalKeyboardKey.capsLock, 59, src__services__keyboard_key.PhysicalKeyboardKey.f1, 60, src__services__keyboard_key.PhysicalKeyboardKey.f2, 61, src__services__keyboard_key.PhysicalKeyboardKey.f3, 62, src__services__keyboard_key.PhysicalKeyboardKey.f4, 63, src__services__keyboard_key.PhysicalKeyboardKey.f5, 64, src__services__keyboard_key.PhysicalKeyboardKey.f6, 65, src__services__keyboard_key.PhysicalKeyboardKey.f7, 66, src__services__keyboard_key.PhysicalKeyboardKey.f8, 67, src__services__keyboard_key.PhysicalKeyboardKey.f9, 68, src__services__keyboard_key.PhysicalKeyboardKey.f10, 87, src__services__keyboard_key.PhysicalKeyboardKey.f11, 88, src__services__keyboard_key.PhysicalKeyboardKey.f12, 99, src__services__keyboard_key.PhysicalKeyboardKey.printScreen, 70, src__services__keyboard_key.PhysicalKeyboardKey.scrollLock, 119, src__services__keyboard_key.PhysicalKeyboardKey.pause, 411, src__services__keyboard_key.PhysicalKeyboardKey.pause, 110, src__services__keyboard_key.PhysicalKeyboardKey.insert, 102, src__services__keyboard_key.PhysicalKeyboardKey.home, 104, src__services__keyboard_key.PhysicalKeyboardKey.pageUp, 177, src__services__keyboard_key.PhysicalKeyboardKey.pageUp, 111, src__services__keyboard_key.PhysicalKeyboardKey.delete, 107, src__services__keyboard_key.PhysicalKeyboardKey.end, 109, src__services__keyboard_key.PhysicalKeyboardKey.pageDown, 178, src__services__keyboard_key.PhysicalKeyboardKey.pageDown, 106, src__services__keyboard_key.PhysicalKeyboardKey.arrowRight, 105, src__services__keyboard_key.PhysicalKeyboardKey.arrowLeft, 108, src__services__keyboard_key.PhysicalKeyboardKey.arrowDown, 103, src__services__keyboard_key.PhysicalKeyboardKey.arrowUp, 69, src__services__keyboard_key.PhysicalKeyboardKey.numLock, 98, src__services__keyboard_key.PhysicalKeyboardKey.numpadDivide, 55, src__services__keyboard_key.PhysicalKeyboardKey.numpadMultiply, 74, src__services__keyboard_key.PhysicalKeyboardKey.numpadSubtract, 78, src__services__keyboard_key.PhysicalKeyboardKey.numpadAdd, 96, src__services__keyboard_key.PhysicalKeyboardKey.numpadEnter, 79, src__services__keyboard_key.PhysicalKeyboardKey.numpad1, 80, src__services__keyboard_key.PhysicalKeyboardKey.numpad2, 81, src__services__keyboard_key.PhysicalKeyboardKey.numpad3, 75, src__services__keyboard_key.PhysicalKeyboardKey.numpad4, 76, src__services__keyboard_key.PhysicalKeyboardKey.numpad5, 77, src__services__keyboard_key.PhysicalKeyboardKey.numpad6, 71, src__services__keyboard_key.PhysicalKeyboardKey.numpad7, 72, src__services__keyboard_key.PhysicalKeyboardKey.numpad8, 73, src__services__keyboard_key.PhysicalKeyboardKey.numpad9, 82, src__services__keyboard_key.PhysicalKeyboardKey.numpad0, 83, src__services__keyboard_key.PhysicalKeyboardKey.numpadDecimal, 127, src__services__keyboard_key.PhysicalKeyboardKey.contextMenu, 139, src__services__keyboard_key.PhysicalKeyboardKey.contextMenu, 116, src__services__keyboard_key.PhysicalKeyboardKey.power, 152, src__services__keyboard_key.PhysicalKeyboardKey.power, 117, src__services__keyboard_key.PhysicalKeyboardKey.numpadEqual, 183, src__services__keyboard_key.PhysicalKeyboardKey.f13, 184, src__services__keyboard_key.PhysicalKeyboardKey.f14, 185, src__services__keyboard_key.PhysicalKeyboardKey.f15, 186, src__services__keyboard_key.PhysicalKeyboardKey.f16, 187, src__services__keyboard_key.PhysicalKeyboardKey.f17, 188, src__services__keyboard_key.PhysicalKeyboardKey.f18, 189, src__services__keyboard_key.PhysicalKeyboardKey.f19, 190, src__services__keyboard_key.PhysicalKeyboardKey.f20, 191, src__services__keyboard_key.PhysicalKeyboardKey.f21, 192, src__services__keyboard_key.PhysicalKeyboardKey.f22, 193, src__services__keyboard_key.PhysicalKeyboardKey.f23, 194, src__services__keyboard_key.PhysicalKeyboardKey.f24, 134, src__services__keyboard_key.PhysicalKeyboardKey.open, 138, src__services__keyboard_key.PhysicalKeyboardKey.help, 129, src__services__keyboard_key.PhysicalKeyboardKey.again, 131, src__services__keyboard_key.PhysicalKeyboardKey.undo, 137, src__services__keyboard_key.PhysicalKeyboardKey.cut, 133, src__services__keyboard_key.PhysicalKeyboardKey.copy, 135, src__services__keyboard_key.PhysicalKeyboardKey.paste, 136, src__services__keyboard_key.PhysicalKeyboardKey.find, 113, src__services__keyboard_key.PhysicalKeyboardKey.audioVolumeMute, 115, src__services__keyboard_key.PhysicalKeyboardKey.audioVolumeUp, 114, src__services__keyboard_key.PhysicalKeyboardKey.audioVolumeDown, 95, src__services__keyboard_key.PhysicalKeyboardKey.numpadComma, 121, src__services__keyboard_key.PhysicalKeyboardKey.numpadComma, 92, src__services__keyboard_key.PhysicalKeyboardKey.convert, 94, src__services__keyboard_key.PhysicalKeyboardKey.nonConvert, 90, src__services__keyboard_key.PhysicalKeyboardKey.lang3, 91, src__services__keyboard_key.PhysicalKeyboardKey.lang4, 130, src__services__keyboard_key.PhysicalKeyboardKey.props, 179, src__services__keyboard_key.PhysicalKeyboardKey.numpadParenLeft, 180, src__services__keyboard_key.PhysicalKeyboardKey.numpadParenRight, 29, src__services__keyboard_key.PhysicalKeyboardKey.controlLeft, 42, src__services__keyboard_key.PhysicalKeyboardKey.shiftLeft, 56, src__services__keyboard_key.PhysicalKeyboardKey.altLeft, 125, src__services__keyboard_key.PhysicalKeyboardKey.metaLeft, 97, src__services__keyboard_key.PhysicalKeyboardKey.controlRight, 54, src__services__keyboard_key.PhysicalKeyboardKey.shiftRight, 100, src__services__keyboard_key.PhysicalKeyboardKey.altRight, 126, src__services__keyboard_key.PhysicalKeyboardKey.metaRight, 358, src__services__keyboard_key.PhysicalKeyboardKey.info, 225, src__services__keyboard_key.PhysicalKeyboardKey.brightnessUp, 224, src__services__keyboard_key.PhysicalKeyboardKey.brightnessDown, 174, src__services__keyboard_key.PhysicalKeyboardKey.exit, 402, src__services__keyboard_key.PhysicalKeyboardKey.channelUp, 403, src__services__keyboard_key.PhysicalKeyboardKey.channelDown, 200, src__services__keyboard_key.PhysicalKeyboardKey.mediaPlay, 207, src__services__keyboard_key.PhysicalKeyboardKey.mediaPlay, 167, src__services__keyboard_key.PhysicalKeyboardKey.mediaRecord, 208, src__services__keyboard_key.PhysicalKeyboardKey.mediaFastForward, 168, src__services__keyboard_key.PhysicalKeyboardKey.mediaRewind, 163, src__services__keyboard_key.PhysicalKeyboardKey.mediaTrackNext, 165, src__services__keyboard_key.PhysicalKeyboardKey.mediaTrackPrevious, 128, src__services__keyboard_key.PhysicalKeyboardKey.mediaStop, 166, src__services__keyboard_key.PhysicalKeyboardKey.mediaStop, 161, src__services__keyboard_key.PhysicalKeyboardKey.eject, 162, src__services__keyboard_key.PhysicalKeyboardKey.eject, 164, src__services__keyboard_key.PhysicalKeyboardKey.mediaPlayPause, 209, src__services__keyboard_key.PhysicalKeyboardKey.bassBoost, 155, src__services__keyboard_key.PhysicalKeyboardKey.launchMail, 215, src__services__keyboard_key.PhysicalKeyboardKey.launchMail, 429, src__services__keyboard_key.PhysicalKeyboardKey.launchContacts, 397, src__services__keyboard_key.PhysicalKeyboardKey.launchCalendar, 181, src__services__keyboard_key.PhysicalKeyboardKey.newKey, 160, src__services__keyboard_key.PhysicalKeyboardKey.close, 206, src__services__keyboard_key.PhysicalKeyboardKey.close, 210, src__services__keyboard_key.PhysicalKeyboardKey.print, 217, src__services__keyboard_key.PhysicalKeyboardKey.browserSearch, 159, src__services__keyboard_key.PhysicalKeyboardKey.browserForward, 156, src__services__keyboard_key.PhysicalKeyboardKey.browserFavorites, 182, src__services__keyboard_key.PhysicalKeyboardKey.redo]);
    },
    /*src__services__keyboard_maps.kAndroidNumPadMap*/get kAndroidNumPadMap() {
      return dart.constMap(core.int, src__services__keyboard_key.LogicalKeyboardKey, [154, src__services__keyboard_key.LogicalKeyboardKey.numpadDivide, 155, src__services__keyboard_key.LogicalKeyboardKey.numpadMultiply, 156, src__services__keyboard_key.LogicalKeyboardKey.numpadSubtract, 157, src__services__keyboard_key.LogicalKeyboardKey.numpadAdd, 145, src__services__keyboard_key.LogicalKeyboardKey.numpad1, 146, src__services__keyboard_key.LogicalKeyboardKey.numpad2, 147, src__services__keyboard_key.LogicalKeyboardKey.numpad3, 148, src__services__keyboard_key.LogicalKeyboardKey.numpad4, 149, src__services__keyboard_key.LogicalKeyboardKey.numpad5, 150, src__services__keyboard_key.LogicalKeyboardKey.numpad6, 151, src__services__keyboard_key.LogicalKeyboardKey.numpad7, 152, src__services__keyboard_key.LogicalKeyboardKey.numpad8, 153, src__services__keyboard_key.LogicalKeyboardKey.numpad9, 144, src__services__keyboard_key.LogicalKeyboardKey.numpad0, 158, src__services__keyboard_key.LogicalKeyboardKey.numpadDecimal, 161, src__services__keyboard_key.LogicalKeyboardKey.numpadEqual, 159, src__services__keyboard_key.LogicalKeyboardKey.numpadComma, 162, src__services__keyboard_key.LogicalKeyboardKey.numpadParenLeft, 163, src__services__keyboard_key.LogicalKeyboardKey.numpadParenRight]);
    },
    /*src__services__keyboard_maps.kFuchsiaToLogicalKey*/get kFuchsiaToLogicalKey() {
      return dart.constMap(core.int, src__services__keyboard_key.LogicalKeyboardKey, [4294967296, src__services__keyboard_key.LogicalKeyboardKey.none, 4294967312, src__services__keyboard_key.LogicalKeyboardKey.hyper, 4294967313, src__services__keyboard_key.LogicalKeyboardKey.superKey, 4294967314, src__services__keyboard_key.LogicalKeyboardKey.fn, 4294967315, src__services__keyboard_key.LogicalKeyboardKey.fnLock, 4294967316, src__services__keyboard_key.LogicalKeyboardKey.suspend, 4294967317, src__services__keyboard_key.LogicalKeyboardKey.resume, 4294967318, src__services__keyboard_key.LogicalKeyboardKey.turbo, 4295032962, src__services__keyboard_key.LogicalKeyboardKey.sleep, 4295032963, src__services__keyboard_key.LogicalKeyboardKey.wakeUp, 4295033013, src__services__keyboard_key.LogicalKeyboardKey.displayToggleIntExt, 4295426048, src__services__keyboard_key.LogicalKeyboardKey.usbReserved, 4295426049, src__services__keyboard_key.LogicalKeyboardKey.usbErrorRollOver, 4295426050, src__services__keyboard_key.LogicalKeyboardKey.usbPostFail, 4295426051, src__services__keyboard_key.LogicalKeyboardKey.usbErrorUndefined, 97, src__services__keyboard_key.LogicalKeyboardKey.keyA, 98, src__services__keyboard_key.LogicalKeyboardKey.keyB, 99, src__services__keyboard_key.LogicalKeyboardKey.keyC, 100, src__services__keyboard_key.LogicalKeyboardKey.keyD, 101, src__services__keyboard_key.LogicalKeyboardKey.keyE, 102, src__services__keyboard_key.LogicalKeyboardKey.keyF, 103, src__services__keyboard_key.LogicalKeyboardKey.keyG, 104, src__services__keyboard_key.LogicalKeyboardKey.keyH, 105, src__services__keyboard_key.LogicalKeyboardKey.keyI, 106, src__services__keyboard_key.LogicalKeyboardKey.keyJ, 107, src__services__keyboard_key.LogicalKeyboardKey.keyK, 108, src__services__keyboard_key.LogicalKeyboardKey.keyL, 109, src__services__keyboard_key.LogicalKeyboardKey.keyM, 110, src__services__keyboard_key.LogicalKeyboardKey.keyN, 111, src__services__keyboard_key.LogicalKeyboardKey.keyO, 112, src__services__keyboard_key.LogicalKeyboardKey.keyP, 113, src__services__keyboard_key.LogicalKeyboardKey.keyQ, 114, src__services__keyboard_key.LogicalKeyboardKey.keyR, 115, src__services__keyboard_key.LogicalKeyboardKey.keyS, 116, src__services__keyboard_key.LogicalKeyboardKey.keyT, 117, src__services__keyboard_key.LogicalKeyboardKey.keyU, 118, src__services__keyboard_key.LogicalKeyboardKey.keyV, 119, src__services__keyboard_key.LogicalKeyboardKey.keyW, 120, src__services__keyboard_key.LogicalKeyboardKey.keyX, 121, src__services__keyboard_key.LogicalKeyboardKey.keyY, 122, src__services__keyboard_key.LogicalKeyboardKey.keyZ, 49, src__services__keyboard_key.LogicalKeyboardKey.digit1, 50, src__services__keyboard_key.LogicalKeyboardKey.digit2, 51, src__services__keyboard_key.LogicalKeyboardKey.digit3, 52, src__services__keyboard_key.LogicalKeyboardKey.digit4, 53, src__services__keyboard_key.LogicalKeyboardKey.digit5, 54, src__services__keyboard_key.LogicalKeyboardKey.digit6, 55, src__services__keyboard_key.LogicalKeyboardKey.digit7, 56, src__services__keyboard_key.LogicalKeyboardKey.digit8, 57, src__services__keyboard_key.LogicalKeyboardKey.digit9, 48, src__services__keyboard_key.LogicalKeyboardKey.digit0, 4295426088, src__services__keyboard_key.LogicalKeyboardKey.enter, 4295426089, src__services__keyboard_key.LogicalKeyboardKey.escape, 4295426090, src__services__keyboard_key.LogicalKeyboardKey.backspace, 4295426091, src__services__keyboard_key.LogicalKeyboardKey.tab, 32, src__services__keyboard_key.LogicalKeyboardKey.space, 45, src__services__keyboard_key.LogicalKeyboardKey.minus, 61, src__services__keyboard_key.LogicalKeyboardKey.equal, 91, src__services__keyboard_key.LogicalKeyboardKey.bracketLeft, 93, src__services__keyboard_key.LogicalKeyboardKey.bracketRight, 92, src__services__keyboard_key.LogicalKeyboardKey.backslash, 59, src__services__keyboard_key.LogicalKeyboardKey.semicolon, 39, src__services__keyboard_key.LogicalKeyboardKey.quote, 96, src__services__keyboard_key.LogicalKeyboardKey.backquote, 44, src__services__keyboard_key.LogicalKeyboardKey.comma, 46, src__services__keyboard_key.LogicalKeyboardKey.period, 47, src__services__keyboard_key.LogicalKeyboardKey.slash, 4295426105, src__services__keyboard_key.LogicalKeyboardKey.capsLock, 4295426106, src__services__keyboard_key.LogicalKeyboardKey.f1, 4295426107, src__services__keyboard_key.LogicalKeyboardKey.f2, 4295426108, src__services__keyboard_key.LogicalKeyboardKey.f3, 4295426109, src__services__keyboard_key.LogicalKeyboardKey.f4, 4295426110, src__services__keyboard_key.LogicalKeyboardKey.f5, 4295426111, src__services__keyboard_key.LogicalKeyboardKey.f6, 4295426112, src__services__keyboard_key.LogicalKeyboardKey.f7, 4295426113, src__services__keyboard_key.LogicalKeyboardKey.f8, 4295426114, src__services__keyboard_key.LogicalKeyboardKey.f9, 4295426115, src__services__keyboard_key.LogicalKeyboardKey.f10, 4295426116, src__services__keyboard_key.LogicalKeyboardKey.f11, 4295426117, src__services__keyboard_key.LogicalKeyboardKey.f12, 4295426118, src__services__keyboard_key.LogicalKeyboardKey.printScreen, 4295426119, src__services__keyboard_key.LogicalKeyboardKey.scrollLock, 4295426120, src__services__keyboard_key.LogicalKeyboardKey.pause, 4295426121, src__services__keyboard_key.LogicalKeyboardKey.insert, 4295426122, src__services__keyboard_key.LogicalKeyboardKey.home, 4295426123, src__services__keyboard_key.LogicalKeyboardKey.pageUp, 4295426124, src__services__keyboard_key.LogicalKeyboardKey.delete, 4295426125, src__services__keyboard_key.LogicalKeyboardKey.end, 4295426126, src__services__keyboard_key.LogicalKeyboardKey.pageDown, 4295426127, src__services__keyboard_key.LogicalKeyboardKey.arrowRight, 4295426128, src__services__keyboard_key.LogicalKeyboardKey.arrowLeft, 4295426129, src__services__keyboard_key.LogicalKeyboardKey.arrowDown, 4295426130, src__services__keyboard_key.LogicalKeyboardKey.arrowUp, 4295426131, src__services__keyboard_key.LogicalKeyboardKey.numLock, 4295426132, src__services__keyboard_key.LogicalKeyboardKey.numpadDivide, 4295426133, src__services__keyboard_key.LogicalKeyboardKey.numpadMultiply, 4295426134, src__services__keyboard_key.LogicalKeyboardKey.numpadSubtract, 4295426135, src__services__keyboard_key.LogicalKeyboardKey.numpadAdd, 4295426136, src__services__keyboard_key.LogicalKeyboardKey.numpadEnter, 4295426137, src__services__keyboard_key.LogicalKeyboardKey.numpad1, 4295426138, src__services__keyboard_key.LogicalKeyboardKey.numpad2, 4295426139, src__services__keyboard_key.LogicalKeyboardKey.numpad3, 4295426140, src__services__keyboard_key.LogicalKeyboardKey.numpad4, 4295426141, src__services__keyboard_key.LogicalKeyboardKey.numpad5, 4295426142, src__services__keyboard_key.LogicalKeyboardKey.numpad6, 4295426143, src__services__keyboard_key.LogicalKeyboardKey.numpad7, 4295426144, src__services__keyboard_key.LogicalKeyboardKey.numpad8, 4295426145, src__services__keyboard_key.LogicalKeyboardKey.numpad9, 4295426146, src__services__keyboard_key.LogicalKeyboardKey.numpad0, 4295426147, src__services__keyboard_key.LogicalKeyboardKey.numpadDecimal, 4295426148, src__services__keyboard_key.LogicalKeyboardKey.intlBackslash, 4295426149, src__services__keyboard_key.LogicalKeyboardKey.contextMenu, 4295426150, src__services__keyboard_key.LogicalKeyboardKey.power, 4295426151, src__services__keyboard_key.LogicalKeyboardKey.numpadEqual, 4295426152, src__services__keyboard_key.LogicalKeyboardKey.f13, 4295426153, src__services__keyboard_key.LogicalKeyboardKey.f14, 4295426154, src__services__keyboard_key.LogicalKeyboardKey.f15, 4295426155, src__services__keyboard_key.LogicalKeyboardKey.f16, 4295426156, src__services__keyboard_key.LogicalKeyboardKey.f17, 4295426157, src__services__keyboard_key.LogicalKeyboardKey.f18, 4295426158, src__services__keyboard_key.LogicalKeyboardKey.f19, 4295426159, src__services__keyboard_key.LogicalKeyboardKey.f20, 4295426160, src__services__keyboard_key.LogicalKeyboardKey.f21, 4295426161, src__services__keyboard_key.LogicalKeyboardKey.f22, 4295426162, src__services__keyboard_key.LogicalKeyboardKey.f23, 4295426163, src__services__keyboard_key.LogicalKeyboardKey.f24, 4295426164, src__services__keyboard_key.LogicalKeyboardKey.open, 4295426165, src__services__keyboard_key.LogicalKeyboardKey.help, 4295426167, src__services__keyboard_key.LogicalKeyboardKey.select, 4295426169, src__services__keyboard_key.LogicalKeyboardKey.again, 4295426170, src__services__keyboard_key.LogicalKeyboardKey.undo, 4295426171, src__services__keyboard_key.LogicalKeyboardKey.cut, 4295426172, src__services__keyboard_key.LogicalKeyboardKey.copy, 4295426173, src__services__keyboard_key.LogicalKeyboardKey.paste, 4295426174, src__services__keyboard_key.LogicalKeyboardKey.find, 4295426175, src__services__keyboard_key.LogicalKeyboardKey.audioVolumeMute, 4295426176, src__services__keyboard_key.LogicalKeyboardKey.audioVolumeUp, 4295426177, src__services__keyboard_key.LogicalKeyboardKey.audioVolumeDown, 4295426181, src__services__keyboard_key.LogicalKeyboardKey.numpadComma, 4295426183, src__services__keyboard_key.LogicalKeyboardKey.intlRo, 4295426184, src__services__keyboard_key.LogicalKeyboardKey.kanaMode, 4295426185, src__services__keyboard_key.LogicalKeyboardKey.intlYen, 4295426186, src__services__keyboard_key.LogicalKeyboardKey.convert, 4295426187, src__services__keyboard_key.LogicalKeyboardKey.nonConvert, 4295426192, src__services__keyboard_key.LogicalKeyboardKey.lang1, 4295426193, src__services__keyboard_key.LogicalKeyboardKey.lang2, 4295426194, src__services__keyboard_key.LogicalKeyboardKey.lang3, 4295426195, src__services__keyboard_key.LogicalKeyboardKey.lang4, 4295426196, src__services__keyboard_key.LogicalKeyboardKey.lang5, 4295426203, src__services__keyboard_key.LogicalKeyboardKey.abort, 4295426211, src__services__keyboard_key.LogicalKeyboardKey.props, 4295426230, src__services__keyboard_key.LogicalKeyboardKey.numpadParenLeft, 4295426231, src__services__keyboard_key.LogicalKeyboardKey.numpadParenRight, 4295426235, src__services__keyboard_key.LogicalKeyboardKey.numpadBackspace, 4295426256, src__services__keyboard_key.LogicalKeyboardKey.numpadMemoryStore, 4295426257, src__services__keyboard_key.LogicalKeyboardKey.numpadMemoryRecall, 4295426258, src__services__keyboard_key.LogicalKeyboardKey.numpadMemoryClear, 4295426259, src__services__keyboard_key.LogicalKeyboardKey.numpadMemoryAdd, 4295426260, src__services__keyboard_key.LogicalKeyboardKey.numpadMemorySubtract, 4295426263, src__services__keyboard_key.LogicalKeyboardKey.numpadSignChange, 4295426264, src__services__keyboard_key.LogicalKeyboardKey.numpadClear, 4295426265, src__services__keyboard_key.LogicalKeyboardKey.numpadClearEntry, 4295426272, src__services__keyboard_key.LogicalKeyboardKey.controlLeft, 4295426273, src__services__keyboard_key.LogicalKeyboardKey.shiftLeft, 4295426274, src__services__keyboard_key.LogicalKeyboardKey.altLeft, 4295426275, src__services__keyboard_key.LogicalKeyboardKey.metaLeft, 4295426276, src__services__keyboard_key.LogicalKeyboardKey.controlRight, 4295426277, src__services__keyboard_key.LogicalKeyboardKey.shiftRight, 4295426278, src__services__keyboard_key.LogicalKeyboardKey.altRight, 4295426279, src__services__keyboard_key.LogicalKeyboardKey.metaRight, 4295753824, src__services__keyboard_key.LogicalKeyboardKey.info, 4295753825, src__services__keyboard_key.LogicalKeyboardKey.closedCaptionToggle, 4295753839, src__services__keyboard_key.LogicalKeyboardKey.brightnessUp, 4295753840, src__services__keyboard_key.LogicalKeyboardKey.brightnessDown, 4295753842, src__services__keyboard_key.LogicalKeyboardKey.brightnessToggle, 4295753843, src__services__keyboard_key.LogicalKeyboardKey.brightnessMinimum, 4295753844, src__services__keyboard_key.LogicalKeyboardKey.brightnessMaximum, 4295753845, src__services__keyboard_key.LogicalKeyboardKey.brightnessAuto, 4295753859, src__services__keyboard_key.LogicalKeyboardKey.mediaLast, 4295753868, src__services__keyboard_key.LogicalKeyboardKey.launchPhone, 4295753869, src__services__keyboard_key.LogicalKeyboardKey.programGuide, 4295753876, src__services__keyboard_key.LogicalKeyboardKey.exit, 4295753884, src__services__keyboard_key.LogicalKeyboardKey.channelUp, 4295753885, src__services__keyboard_key.LogicalKeyboardKey.channelDown, 4295753904, src__services__keyboard_key.LogicalKeyboardKey.mediaPlay, 4295753906, src__services__keyboard_key.LogicalKeyboardKey.mediaRecord, 4295753907, src__services__keyboard_key.LogicalKeyboardKey.mediaFastForward, 4295753908, src__services__keyboard_key.LogicalKeyboardKey.mediaRewind, 4295753909, src__services__keyboard_key.LogicalKeyboardKey.mediaTrackNext, 4295753910, src__services__keyboard_key.LogicalKeyboardKey.mediaTrackPrevious, 4295753911, src__services__keyboard_key.LogicalKeyboardKey.mediaStop, 4295753912, src__services__keyboard_key.LogicalKeyboardKey.eject, 4295753933, src__services__keyboard_key.LogicalKeyboardKey.mediaPlayPause, 4295753935, src__services__keyboard_key.LogicalKeyboardKey.speechInputToggle, 4295753957, src__services__keyboard_key.LogicalKeyboardKey.bassBoost, 4295754115, src__services__keyboard_key.LogicalKeyboardKey.mediaSelect, 4295754116, src__services__keyboard_key.LogicalKeyboardKey.launchWordProcessor, 4295754118, src__services__keyboard_key.LogicalKeyboardKey.launchSpreadsheet, 4295754122, src__services__keyboard_key.LogicalKeyboardKey.launchMail, 4295754125, src__services__keyboard_key.LogicalKeyboardKey.launchContacts, 4295754126, src__services__keyboard_key.LogicalKeyboardKey.launchCalendar, 4295754130, src__services__keyboard_key.LogicalKeyboardKey.launchApp2, 4295754132, src__services__keyboard_key.LogicalKeyboardKey.launchApp1, 4295754134, src__services__keyboard_key.LogicalKeyboardKey.launchInternetBrowser, 4295754140, src__services__keyboard_key.LogicalKeyboardKey.logOff, 4295754142, src__services__keyboard_key.LogicalKeyboardKey.lockScreen, 4295754143, src__services__keyboard_key.LogicalKeyboardKey.launchControlPanel, 4295754146, src__services__keyboard_key.LogicalKeyboardKey.selectTask, 4295754151, src__services__keyboard_key.LogicalKeyboardKey.launchDocuments, 4295754155, src__services__keyboard_key.LogicalKeyboardKey.spellCheck, 4295754158, src__services__keyboard_key.LogicalKeyboardKey.launchKeyboardLayout, 4295754161, src__services__keyboard_key.LogicalKeyboardKey.launchScreenSaver, 4295754187, src__services__keyboard_key.LogicalKeyboardKey.launchAssistant, 4295754167, src__services__keyboard_key.LogicalKeyboardKey.launchAudioBrowser, 4295754241, src__services__keyboard_key.LogicalKeyboardKey.newKey, 4295754243, src__services__keyboard_key.LogicalKeyboardKey.close, 4295754247, src__services__keyboard_key.LogicalKeyboardKey.save, 4295754248, src__services__keyboard_key.LogicalKeyboardKey.print, 4295754273, src__services__keyboard_key.LogicalKeyboardKey.browserSearch, 4295754275, src__services__keyboard_key.LogicalKeyboardKey.browserHome, 4295754276, src__services__keyboard_key.LogicalKeyboardKey.browserBack, 4295754277, src__services__keyboard_key.LogicalKeyboardKey.browserForward, 4295754278, src__services__keyboard_key.LogicalKeyboardKey.browserStop, 4295754279, src__services__keyboard_key.LogicalKeyboardKey.browserRefresh, 4295754282, src__services__keyboard_key.LogicalKeyboardKey.browserFavorites, 4295754285, src__services__keyboard_key.LogicalKeyboardKey.zoomIn, 4295754286, src__services__keyboard_key.LogicalKeyboardKey.zoomOut, 4295754290, src__services__keyboard_key.LogicalKeyboardKey.zoomToggle, 4295754361, src__services__keyboard_key.LogicalKeyboardKey.redo, 4295754377, src__services__keyboard_key.LogicalKeyboardKey.mailReply, 4295754379, src__services__keyboard_key.LogicalKeyboardKey.mailForward, 4295754380, src__services__keyboard_key.LogicalKeyboardKey.mailSend, 4295754399, src__services__keyboard_key.LogicalKeyboardKey.showAllWindows]);
    },
    /*src__services__keyboard_maps.kFuchsiaToPhysicalKey*/get kFuchsiaToPhysicalKey() {
      return dart.constMap(core.int, src__services__keyboard_key.PhysicalKeyboardKey, [0, src__services__keyboard_key.PhysicalKeyboardKey.none, 16, src__services__keyboard_key.PhysicalKeyboardKey.hyper, 17, src__services__keyboard_key.PhysicalKeyboardKey.superKey, 18, src__services__keyboard_key.PhysicalKeyboardKey.fn, 19, src__services__keyboard_key.PhysicalKeyboardKey.fnLock, 20, src__services__keyboard_key.PhysicalKeyboardKey.suspend, 21, src__services__keyboard_key.PhysicalKeyboardKey.resume, 22, src__services__keyboard_key.PhysicalKeyboardKey.turbo, 65666, src__services__keyboard_key.PhysicalKeyboardKey.sleep, 65667, src__services__keyboard_key.PhysicalKeyboardKey.wakeUp, 65717, src__services__keyboard_key.PhysicalKeyboardKey.displayToggleIntExt, 458752, src__services__keyboard_key.PhysicalKeyboardKey.usbReserved, 458753, src__services__keyboard_key.PhysicalKeyboardKey.usbErrorRollOver, 458754, src__services__keyboard_key.PhysicalKeyboardKey.usbPostFail, 458755, src__services__keyboard_key.PhysicalKeyboardKey.usbErrorUndefined, 458756, src__services__keyboard_key.PhysicalKeyboardKey.keyA, 458757, src__services__keyboard_key.PhysicalKeyboardKey.keyB, 458758, src__services__keyboard_key.PhysicalKeyboardKey.keyC, 458759, src__services__keyboard_key.PhysicalKeyboardKey.keyD, 458760, src__services__keyboard_key.PhysicalKeyboardKey.keyE, 458761, src__services__keyboard_key.PhysicalKeyboardKey.keyF, 458762, src__services__keyboard_key.PhysicalKeyboardKey.keyG, 458763, src__services__keyboard_key.PhysicalKeyboardKey.keyH, 458764, src__services__keyboard_key.PhysicalKeyboardKey.keyI, 458765, src__services__keyboard_key.PhysicalKeyboardKey.keyJ, 458766, src__services__keyboard_key.PhysicalKeyboardKey.keyK, 458767, src__services__keyboard_key.PhysicalKeyboardKey.keyL, 458768, src__services__keyboard_key.PhysicalKeyboardKey.keyM, 458769, src__services__keyboard_key.PhysicalKeyboardKey.keyN, 458770, src__services__keyboard_key.PhysicalKeyboardKey.keyO, 458771, src__services__keyboard_key.PhysicalKeyboardKey.keyP, 458772, src__services__keyboard_key.PhysicalKeyboardKey.keyQ, 458773, src__services__keyboard_key.PhysicalKeyboardKey.keyR, 458774, src__services__keyboard_key.PhysicalKeyboardKey.keyS, 458775, src__services__keyboard_key.PhysicalKeyboardKey.keyT, 458776, src__services__keyboard_key.PhysicalKeyboardKey.keyU, 458777, src__services__keyboard_key.PhysicalKeyboardKey.keyV, 458778, src__services__keyboard_key.PhysicalKeyboardKey.keyW, 458779, src__services__keyboard_key.PhysicalKeyboardKey.keyX, 458780, src__services__keyboard_key.PhysicalKeyboardKey.keyY, 458781, src__services__keyboard_key.PhysicalKeyboardKey.keyZ, 458782, src__services__keyboard_key.PhysicalKeyboardKey.digit1, 458783, src__services__keyboard_key.PhysicalKeyboardKey.digit2, 458784, src__services__keyboard_key.PhysicalKeyboardKey.digit3, 458785, src__services__keyboard_key.PhysicalKeyboardKey.digit4, 458786, src__services__keyboard_key.PhysicalKeyboardKey.digit5, 458787, src__services__keyboard_key.PhysicalKeyboardKey.digit6, 458788, src__services__keyboard_key.PhysicalKeyboardKey.digit7, 458789, src__services__keyboard_key.PhysicalKeyboardKey.digit8, 458790, src__services__keyboard_key.PhysicalKeyboardKey.digit9, 458791, src__services__keyboard_key.PhysicalKeyboardKey.digit0, 458792, src__services__keyboard_key.PhysicalKeyboardKey.enter, 458793, src__services__keyboard_key.PhysicalKeyboardKey.escape, 458794, src__services__keyboard_key.PhysicalKeyboardKey.backspace, 458795, src__services__keyboard_key.PhysicalKeyboardKey.tab, 458796, src__services__keyboard_key.PhysicalKeyboardKey.space, 458797, src__services__keyboard_key.PhysicalKeyboardKey.minus, 458798, src__services__keyboard_key.PhysicalKeyboardKey.equal, 458799, src__services__keyboard_key.PhysicalKeyboardKey.bracketLeft, 458800, src__services__keyboard_key.PhysicalKeyboardKey.bracketRight, 458801, src__services__keyboard_key.PhysicalKeyboardKey.backslash, 458803, src__services__keyboard_key.PhysicalKeyboardKey.semicolon, 458804, src__services__keyboard_key.PhysicalKeyboardKey.quote, 458805, src__services__keyboard_key.PhysicalKeyboardKey.backquote, 458806, src__services__keyboard_key.PhysicalKeyboardKey.comma, 458807, src__services__keyboard_key.PhysicalKeyboardKey.period, 458808, src__services__keyboard_key.PhysicalKeyboardKey.slash, 458809, src__services__keyboard_key.PhysicalKeyboardKey.capsLock, 458810, src__services__keyboard_key.PhysicalKeyboardKey.f1, 458811, src__services__keyboard_key.PhysicalKeyboardKey.f2, 458812, src__services__keyboard_key.PhysicalKeyboardKey.f3, 458813, src__services__keyboard_key.PhysicalKeyboardKey.f4, 458814, src__services__keyboard_key.PhysicalKeyboardKey.f5, 458815, src__services__keyboard_key.PhysicalKeyboardKey.f6, 458816, src__services__keyboard_key.PhysicalKeyboardKey.f7, 458817, src__services__keyboard_key.PhysicalKeyboardKey.f8, 458818, src__services__keyboard_key.PhysicalKeyboardKey.f9, 458819, src__services__keyboard_key.PhysicalKeyboardKey.f10, 458820, src__services__keyboard_key.PhysicalKeyboardKey.f11, 458821, src__services__keyboard_key.PhysicalKeyboardKey.f12, 458822, src__services__keyboard_key.PhysicalKeyboardKey.printScreen, 458823, src__services__keyboard_key.PhysicalKeyboardKey.scrollLock, 458824, src__services__keyboard_key.PhysicalKeyboardKey.pause, 458825, src__services__keyboard_key.PhysicalKeyboardKey.insert, 458826, src__services__keyboard_key.PhysicalKeyboardKey.home, 458827, src__services__keyboard_key.PhysicalKeyboardKey.pageUp, 458828, src__services__keyboard_key.PhysicalKeyboardKey.delete, 458829, src__services__keyboard_key.PhysicalKeyboardKey.end, 458830, src__services__keyboard_key.PhysicalKeyboardKey.pageDown, 458831, src__services__keyboard_key.PhysicalKeyboardKey.arrowRight, 458832, src__services__keyboard_key.PhysicalKeyboardKey.arrowLeft, 458833, src__services__keyboard_key.PhysicalKeyboardKey.arrowDown, 458834, src__services__keyboard_key.PhysicalKeyboardKey.arrowUp, 458835, src__services__keyboard_key.PhysicalKeyboardKey.numLock, 458836, src__services__keyboard_key.PhysicalKeyboardKey.numpadDivide, 458837, src__services__keyboard_key.PhysicalKeyboardKey.numpadMultiply, 458838, src__services__keyboard_key.PhysicalKeyboardKey.numpadSubtract, 458839, src__services__keyboard_key.PhysicalKeyboardKey.numpadAdd, 458840, src__services__keyboard_key.PhysicalKeyboardKey.numpadEnter, 458841, src__services__keyboard_key.PhysicalKeyboardKey.numpad1, 458842, src__services__keyboard_key.PhysicalKeyboardKey.numpad2, 458843, src__services__keyboard_key.PhysicalKeyboardKey.numpad3, 458844, src__services__keyboard_key.PhysicalKeyboardKey.numpad4, 458845, src__services__keyboard_key.PhysicalKeyboardKey.numpad5, 458846, src__services__keyboard_key.PhysicalKeyboardKey.numpad6, 458847, src__services__keyboard_key.PhysicalKeyboardKey.numpad7, 458848, src__services__keyboard_key.PhysicalKeyboardKey.numpad8, 458849, src__services__keyboard_key.PhysicalKeyboardKey.numpad9, 458850, src__services__keyboard_key.PhysicalKeyboardKey.numpad0, 458851, src__services__keyboard_key.PhysicalKeyboardKey.numpadDecimal, 458852, src__services__keyboard_key.PhysicalKeyboardKey.intlBackslash, 458853, src__services__keyboard_key.PhysicalKeyboardKey.contextMenu, 458854, src__services__keyboard_key.PhysicalKeyboardKey.power, 458855, src__services__keyboard_key.PhysicalKeyboardKey.numpadEqual, 458856, src__services__keyboard_key.PhysicalKeyboardKey.f13, 458857, src__services__keyboard_key.PhysicalKeyboardKey.f14, 458858, src__services__keyboard_key.PhysicalKeyboardKey.f15, 458859, src__services__keyboard_key.PhysicalKeyboardKey.f16, 458860, src__services__keyboard_key.PhysicalKeyboardKey.f17, 458861, src__services__keyboard_key.PhysicalKeyboardKey.f18, 458862, src__services__keyboard_key.PhysicalKeyboardKey.f19, 458863, src__services__keyboard_key.PhysicalKeyboardKey.f20, 458864, src__services__keyboard_key.PhysicalKeyboardKey.f21, 458865, src__services__keyboard_key.PhysicalKeyboardKey.f22, 458866, src__services__keyboard_key.PhysicalKeyboardKey.f23, 458867, src__services__keyboard_key.PhysicalKeyboardKey.f24, 458868, src__services__keyboard_key.PhysicalKeyboardKey.open, 458869, src__services__keyboard_key.PhysicalKeyboardKey.help, 458871, src__services__keyboard_key.PhysicalKeyboardKey.select, 458873, src__services__keyboard_key.PhysicalKeyboardKey.again, 458874, src__services__keyboard_key.PhysicalKeyboardKey.undo, 458875, src__services__keyboard_key.PhysicalKeyboardKey.cut, 458876, src__services__keyboard_key.PhysicalKeyboardKey.copy, 458877, src__services__keyboard_key.PhysicalKeyboardKey.paste, 458878, src__services__keyboard_key.PhysicalKeyboardKey.find, 458879, src__services__keyboard_key.PhysicalKeyboardKey.audioVolumeMute, 458880, src__services__keyboard_key.PhysicalKeyboardKey.audioVolumeUp, 458881, src__services__keyboard_key.PhysicalKeyboardKey.audioVolumeDown, 458885, src__services__keyboard_key.PhysicalKeyboardKey.numpadComma, 458887, src__services__keyboard_key.PhysicalKeyboardKey.intlRo, 458888, src__services__keyboard_key.PhysicalKeyboardKey.kanaMode, 458889, src__services__keyboard_key.PhysicalKeyboardKey.intlYen, 458890, src__services__keyboard_key.PhysicalKeyboardKey.convert, 458891, src__services__keyboard_key.PhysicalKeyboardKey.nonConvert, 458896, src__services__keyboard_key.PhysicalKeyboardKey.lang1, 458897, src__services__keyboard_key.PhysicalKeyboardKey.lang2, 458898, src__services__keyboard_key.PhysicalKeyboardKey.lang3, 458899, src__services__keyboard_key.PhysicalKeyboardKey.lang4, 458900, src__services__keyboard_key.PhysicalKeyboardKey.lang5, 458907, src__services__keyboard_key.PhysicalKeyboardKey.abort, 458915, src__services__keyboard_key.PhysicalKeyboardKey.props, 458934, src__services__keyboard_key.PhysicalKeyboardKey.numpadParenLeft, 458935, src__services__keyboard_key.PhysicalKeyboardKey.numpadParenRight, 458939, src__services__keyboard_key.PhysicalKeyboardKey.numpadBackspace, 458960, src__services__keyboard_key.PhysicalKeyboardKey.numpadMemoryStore, 458961, src__services__keyboard_key.PhysicalKeyboardKey.numpadMemoryRecall, 458962, src__services__keyboard_key.PhysicalKeyboardKey.numpadMemoryClear, 458963, src__services__keyboard_key.PhysicalKeyboardKey.numpadMemoryAdd, 458964, src__services__keyboard_key.PhysicalKeyboardKey.numpadMemorySubtract, 458967, src__services__keyboard_key.PhysicalKeyboardKey.numpadSignChange, 458968, src__services__keyboard_key.PhysicalKeyboardKey.numpadClear, 458969, src__services__keyboard_key.PhysicalKeyboardKey.numpadClearEntry, 458976, src__services__keyboard_key.PhysicalKeyboardKey.controlLeft, 458977, src__services__keyboard_key.PhysicalKeyboardKey.shiftLeft, 458978, src__services__keyboard_key.PhysicalKeyboardKey.altLeft, 458979, src__services__keyboard_key.PhysicalKeyboardKey.metaLeft, 458980, src__services__keyboard_key.PhysicalKeyboardKey.controlRight, 458981, src__services__keyboard_key.PhysicalKeyboardKey.shiftRight, 458982, src__services__keyboard_key.PhysicalKeyboardKey.altRight, 458983, src__services__keyboard_key.PhysicalKeyboardKey.metaRight, 786528, src__services__keyboard_key.PhysicalKeyboardKey.info, 786529, src__services__keyboard_key.PhysicalKeyboardKey.closedCaptionToggle, 786543, src__services__keyboard_key.PhysicalKeyboardKey.brightnessUp, 786544, src__services__keyboard_key.PhysicalKeyboardKey.brightnessDown, 786546, src__services__keyboard_key.PhysicalKeyboardKey.brightnessToggle, 786547, src__services__keyboard_key.PhysicalKeyboardKey.brightnessMinimum, 786548, src__services__keyboard_key.PhysicalKeyboardKey.brightnessMaximum, 786549, src__services__keyboard_key.PhysicalKeyboardKey.brightnessAuto, 786563, src__services__keyboard_key.PhysicalKeyboardKey.mediaLast, 786572, src__services__keyboard_key.PhysicalKeyboardKey.launchPhone, 786573, src__services__keyboard_key.PhysicalKeyboardKey.programGuide, 786580, src__services__keyboard_key.PhysicalKeyboardKey.exit, 786588, src__services__keyboard_key.PhysicalKeyboardKey.channelUp, 786589, src__services__keyboard_key.PhysicalKeyboardKey.channelDown, 786608, src__services__keyboard_key.PhysicalKeyboardKey.mediaPlay, 786610, src__services__keyboard_key.PhysicalKeyboardKey.mediaRecord, 786611, src__services__keyboard_key.PhysicalKeyboardKey.mediaFastForward, 786612, src__services__keyboard_key.PhysicalKeyboardKey.mediaRewind, 786613, src__services__keyboard_key.PhysicalKeyboardKey.mediaTrackNext, 786614, src__services__keyboard_key.PhysicalKeyboardKey.mediaTrackPrevious, 786615, src__services__keyboard_key.PhysicalKeyboardKey.mediaStop, 786616, src__services__keyboard_key.PhysicalKeyboardKey.eject, 786637, src__services__keyboard_key.PhysicalKeyboardKey.mediaPlayPause, 786639, src__services__keyboard_key.PhysicalKeyboardKey.speechInputToggle, 786661, src__services__keyboard_key.PhysicalKeyboardKey.bassBoost, 786819, src__services__keyboard_key.PhysicalKeyboardKey.mediaSelect, 786820, src__services__keyboard_key.PhysicalKeyboardKey.launchWordProcessor, 786822, src__services__keyboard_key.PhysicalKeyboardKey.launchSpreadsheet, 786826, src__services__keyboard_key.PhysicalKeyboardKey.launchMail, 786829, src__services__keyboard_key.PhysicalKeyboardKey.launchContacts, 786830, src__services__keyboard_key.PhysicalKeyboardKey.launchCalendar, 786834, src__services__keyboard_key.PhysicalKeyboardKey.launchApp2, 786836, src__services__keyboard_key.PhysicalKeyboardKey.launchApp1, 786838, src__services__keyboard_key.PhysicalKeyboardKey.launchInternetBrowser, 786844, src__services__keyboard_key.PhysicalKeyboardKey.logOff, 786846, src__services__keyboard_key.PhysicalKeyboardKey.lockScreen, 786847, src__services__keyboard_key.PhysicalKeyboardKey.launchControlPanel, 786850, src__services__keyboard_key.PhysicalKeyboardKey.selectTask, 786855, src__services__keyboard_key.PhysicalKeyboardKey.launchDocuments, 786859, src__services__keyboard_key.PhysicalKeyboardKey.spellCheck, 786862, src__services__keyboard_key.PhysicalKeyboardKey.launchKeyboardLayout, 786865, src__services__keyboard_key.PhysicalKeyboardKey.launchScreenSaver, 786891, src__services__keyboard_key.PhysicalKeyboardKey.launchAssistant, 786871, src__services__keyboard_key.PhysicalKeyboardKey.launchAudioBrowser, 786945, src__services__keyboard_key.PhysicalKeyboardKey.newKey, 786947, src__services__keyboard_key.PhysicalKeyboardKey.close, 786951, src__services__keyboard_key.PhysicalKeyboardKey.save, 786952, src__services__keyboard_key.PhysicalKeyboardKey.print, 786977, src__services__keyboard_key.PhysicalKeyboardKey.browserSearch, 786979, src__services__keyboard_key.PhysicalKeyboardKey.browserHome, 786980, src__services__keyboard_key.PhysicalKeyboardKey.browserBack, 786981, src__services__keyboard_key.PhysicalKeyboardKey.browserForward, 786982, src__services__keyboard_key.PhysicalKeyboardKey.browserStop, 786983, src__services__keyboard_key.PhysicalKeyboardKey.browserRefresh, 786986, src__services__keyboard_key.PhysicalKeyboardKey.browserFavorites, 786989, src__services__keyboard_key.PhysicalKeyboardKey.zoomIn, 786990, src__services__keyboard_key.PhysicalKeyboardKey.zoomOut, 786994, src__services__keyboard_key.PhysicalKeyboardKey.zoomToggle, 787065, src__services__keyboard_key.PhysicalKeyboardKey.redo, 787081, src__services__keyboard_key.PhysicalKeyboardKey.mailReply, 787083, src__services__keyboard_key.PhysicalKeyboardKey.mailForward, 787084, src__services__keyboard_key.PhysicalKeyboardKey.mailSend, 787103, src__services__keyboard_key.PhysicalKeyboardKey.showAllWindows]);
    },
    /*src__services__keyboard_maps.kMacOsToPhysicalKey*/get kMacOsToPhysicalKey() {
      return dart.constMap(core.int, src__services__keyboard_key.PhysicalKeyboardKey, [0, src__services__keyboard_key.PhysicalKeyboardKey.keyA, 11, src__services__keyboard_key.PhysicalKeyboardKey.keyB, 8, src__services__keyboard_key.PhysicalKeyboardKey.keyC, 2, src__services__keyboard_key.PhysicalKeyboardKey.keyD, 14, src__services__keyboard_key.PhysicalKeyboardKey.keyE, 3, src__services__keyboard_key.PhysicalKeyboardKey.keyF, 5, src__services__keyboard_key.PhysicalKeyboardKey.keyG, 4, src__services__keyboard_key.PhysicalKeyboardKey.keyH, 34, src__services__keyboard_key.PhysicalKeyboardKey.keyI, 38, src__services__keyboard_key.PhysicalKeyboardKey.keyJ, 40, src__services__keyboard_key.PhysicalKeyboardKey.keyK, 37, src__services__keyboard_key.PhysicalKeyboardKey.keyL, 46, src__services__keyboard_key.PhysicalKeyboardKey.keyM, 45, src__services__keyboard_key.PhysicalKeyboardKey.keyN, 31, src__services__keyboard_key.PhysicalKeyboardKey.keyO, 35, src__services__keyboard_key.PhysicalKeyboardKey.keyP, 12, src__services__keyboard_key.PhysicalKeyboardKey.keyQ, 15, src__services__keyboard_key.PhysicalKeyboardKey.keyR, 1, src__services__keyboard_key.PhysicalKeyboardKey.keyS, 17, src__services__keyboard_key.PhysicalKeyboardKey.keyT, 32, src__services__keyboard_key.PhysicalKeyboardKey.keyU, 9, src__services__keyboard_key.PhysicalKeyboardKey.keyV, 13, src__services__keyboard_key.PhysicalKeyboardKey.keyW, 7, src__services__keyboard_key.PhysicalKeyboardKey.keyX, 16, src__services__keyboard_key.PhysicalKeyboardKey.keyY, 6, src__services__keyboard_key.PhysicalKeyboardKey.keyZ, 18, src__services__keyboard_key.PhysicalKeyboardKey.digit1, 19, src__services__keyboard_key.PhysicalKeyboardKey.digit2, 20, src__services__keyboard_key.PhysicalKeyboardKey.digit3, 21, src__services__keyboard_key.PhysicalKeyboardKey.digit4, 23, src__services__keyboard_key.PhysicalKeyboardKey.digit5, 22, src__services__keyboard_key.PhysicalKeyboardKey.digit6, 26, src__services__keyboard_key.PhysicalKeyboardKey.digit7, 28, src__services__keyboard_key.PhysicalKeyboardKey.digit8, 25, src__services__keyboard_key.PhysicalKeyboardKey.digit9, 29, src__services__keyboard_key.PhysicalKeyboardKey.digit0, 36, src__services__keyboard_key.PhysicalKeyboardKey.enter, 53, src__services__keyboard_key.PhysicalKeyboardKey.escape, 51, src__services__keyboard_key.PhysicalKeyboardKey.backspace, 48, src__services__keyboard_key.PhysicalKeyboardKey.tab, 49, src__services__keyboard_key.PhysicalKeyboardKey.space, 27, src__services__keyboard_key.PhysicalKeyboardKey.minus, 24, src__services__keyboard_key.PhysicalKeyboardKey.equal, 33, src__services__keyboard_key.PhysicalKeyboardKey.bracketLeft, 30, src__services__keyboard_key.PhysicalKeyboardKey.bracketRight, 42, src__services__keyboard_key.PhysicalKeyboardKey.backslash, 41, src__services__keyboard_key.PhysicalKeyboardKey.semicolon, 39, src__services__keyboard_key.PhysicalKeyboardKey.quote, 50, src__services__keyboard_key.PhysicalKeyboardKey.backquote, 43, src__services__keyboard_key.PhysicalKeyboardKey.comma, 47, src__services__keyboard_key.PhysicalKeyboardKey.period, 44, src__services__keyboard_key.PhysicalKeyboardKey.slash, 57, src__services__keyboard_key.PhysicalKeyboardKey.capsLock, 122, src__services__keyboard_key.PhysicalKeyboardKey.f1, 120, src__services__keyboard_key.PhysicalKeyboardKey.f2, 99, src__services__keyboard_key.PhysicalKeyboardKey.f3, 118, src__services__keyboard_key.PhysicalKeyboardKey.f4, 96, src__services__keyboard_key.PhysicalKeyboardKey.f5, 97, src__services__keyboard_key.PhysicalKeyboardKey.f6, 98, src__services__keyboard_key.PhysicalKeyboardKey.f7, 100, src__services__keyboard_key.PhysicalKeyboardKey.f8, 101, src__services__keyboard_key.PhysicalKeyboardKey.f9, 109, src__services__keyboard_key.PhysicalKeyboardKey.f10, 103, src__services__keyboard_key.PhysicalKeyboardKey.f11, 111, src__services__keyboard_key.PhysicalKeyboardKey.f12, 114, src__services__keyboard_key.PhysicalKeyboardKey.insert, 115, src__services__keyboard_key.PhysicalKeyboardKey.home, 116, src__services__keyboard_key.PhysicalKeyboardKey.pageUp, 117, src__services__keyboard_key.PhysicalKeyboardKey.delete, 119, src__services__keyboard_key.PhysicalKeyboardKey.end, 121, src__services__keyboard_key.PhysicalKeyboardKey.pageDown, 124, src__services__keyboard_key.PhysicalKeyboardKey.arrowRight, 123, src__services__keyboard_key.PhysicalKeyboardKey.arrowLeft, 125, src__services__keyboard_key.PhysicalKeyboardKey.arrowDown, 126, src__services__keyboard_key.PhysicalKeyboardKey.arrowUp, 71, src__services__keyboard_key.PhysicalKeyboardKey.numLock, 75, src__services__keyboard_key.PhysicalKeyboardKey.numpadDivide, 67, src__services__keyboard_key.PhysicalKeyboardKey.numpadMultiply, 78, src__services__keyboard_key.PhysicalKeyboardKey.numpadSubtract, 69, src__services__keyboard_key.PhysicalKeyboardKey.numpadAdd, 76, src__services__keyboard_key.PhysicalKeyboardKey.numpadEnter, 83, src__services__keyboard_key.PhysicalKeyboardKey.numpad1, 84, src__services__keyboard_key.PhysicalKeyboardKey.numpad2, 85, src__services__keyboard_key.PhysicalKeyboardKey.numpad3, 86, src__services__keyboard_key.PhysicalKeyboardKey.numpad4, 87, src__services__keyboard_key.PhysicalKeyboardKey.numpad5, 88, src__services__keyboard_key.PhysicalKeyboardKey.numpad6, 89, src__services__keyboard_key.PhysicalKeyboardKey.numpad7, 91, src__services__keyboard_key.PhysicalKeyboardKey.numpad8, 92, src__services__keyboard_key.PhysicalKeyboardKey.numpad9, 82, src__services__keyboard_key.PhysicalKeyboardKey.numpad0, 65, src__services__keyboard_key.PhysicalKeyboardKey.numpadDecimal, 10, src__services__keyboard_key.PhysicalKeyboardKey.intlBackslash, 110, src__services__keyboard_key.PhysicalKeyboardKey.contextMenu, 81, src__services__keyboard_key.PhysicalKeyboardKey.numpadEqual, 105, src__services__keyboard_key.PhysicalKeyboardKey.f13, 107, src__services__keyboard_key.PhysicalKeyboardKey.f14, 113, src__services__keyboard_key.PhysicalKeyboardKey.f15, 106, src__services__keyboard_key.PhysicalKeyboardKey.f16, 64, src__services__keyboard_key.PhysicalKeyboardKey.f17, 79, src__services__keyboard_key.PhysicalKeyboardKey.f18, 80, src__services__keyboard_key.PhysicalKeyboardKey.f19, 90, src__services__keyboard_key.PhysicalKeyboardKey.f20, 74, src__services__keyboard_key.PhysicalKeyboardKey.audioVolumeMute, 72, src__services__keyboard_key.PhysicalKeyboardKey.audioVolumeUp, 73, src__services__keyboard_key.PhysicalKeyboardKey.audioVolumeDown, 95, src__services__keyboard_key.PhysicalKeyboardKey.numpadComma, 94, src__services__keyboard_key.PhysicalKeyboardKey.intlRo, 104, src__services__keyboard_key.PhysicalKeyboardKey.kanaMode, 93, src__services__keyboard_key.PhysicalKeyboardKey.intlYen, 59, src__services__keyboard_key.PhysicalKeyboardKey.controlLeft, 56, src__services__keyboard_key.PhysicalKeyboardKey.shiftLeft, 58, src__services__keyboard_key.PhysicalKeyboardKey.altLeft, 55, src__services__keyboard_key.PhysicalKeyboardKey.metaLeft, 62, src__services__keyboard_key.PhysicalKeyboardKey.controlRight, 60, src__services__keyboard_key.PhysicalKeyboardKey.shiftRight, 61, src__services__keyboard_key.PhysicalKeyboardKey.altRight, 54, src__services__keyboard_key.PhysicalKeyboardKey.metaRight]);
    },
    /*src__services__keyboard_maps.kMacOsNumPadMap*/get kMacOsNumPadMap() {
      return dart.constMap(core.int, src__services__keyboard_key.LogicalKeyboardKey, [75, src__services__keyboard_key.LogicalKeyboardKey.numpadDivide, 67, src__services__keyboard_key.LogicalKeyboardKey.numpadMultiply, 78, src__services__keyboard_key.LogicalKeyboardKey.numpadSubtract, 69, src__services__keyboard_key.LogicalKeyboardKey.numpadAdd, 83, src__services__keyboard_key.LogicalKeyboardKey.numpad1, 84, src__services__keyboard_key.LogicalKeyboardKey.numpad2, 85, src__services__keyboard_key.LogicalKeyboardKey.numpad3, 86, src__services__keyboard_key.LogicalKeyboardKey.numpad4, 87, src__services__keyboard_key.LogicalKeyboardKey.numpad5, 88, src__services__keyboard_key.LogicalKeyboardKey.numpad6, 89, src__services__keyboard_key.LogicalKeyboardKey.numpad7, 91, src__services__keyboard_key.LogicalKeyboardKey.numpad8, 92, src__services__keyboard_key.LogicalKeyboardKey.numpad9, 82, src__services__keyboard_key.LogicalKeyboardKey.numpad0, 65, src__services__keyboard_key.LogicalKeyboardKey.numpadDecimal, 81, src__services__keyboard_key.LogicalKeyboardKey.numpadEqual, 95, src__services__keyboard_key.LogicalKeyboardKey.numpadComma]);
    },
    /*src__services__keyboard_maps.kGlfwToLogicalKey*/get kGlfwToLogicalKey() {
      return dart.constMap(core.int, src__services__keyboard_key.LogicalKeyboardKey, [65, src__services__keyboard_key.LogicalKeyboardKey.keyA, 66, src__services__keyboard_key.LogicalKeyboardKey.keyB, 67, src__services__keyboard_key.LogicalKeyboardKey.keyC, 68, src__services__keyboard_key.LogicalKeyboardKey.keyD, 69, src__services__keyboard_key.LogicalKeyboardKey.keyE, 70, src__services__keyboard_key.LogicalKeyboardKey.keyF, 71, src__services__keyboard_key.LogicalKeyboardKey.keyG, 72, src__services__keyboard_key.LogicalKeyboardKey.keyH, 73, src__services__keyboard_key.LogicalKeyboardKey.keyI, 74, src__services__keyboard_key.LogicalKeyboardKey.keyJ, 75, src__services__keyboard_key.LogicalKeyboardKey.keyK, 76, src__services__keyboard_key.LogicalKeyboardKey.keyL, 77, src__services__keyboard_key.LogicalKeyboardKey.keyM, 78, src__services__keyboard_key.LogicalKeyboardKey.keyN, 79, src__services__keyboard_key.LogicalKeyboardKey.keyO, 80, src__services__keyboard_key.LogicalKeyboardKey.keyP, 81, src__services__keyboard_key.LogicalKeyboardKey.keyQ, 82, src__services__keyboard_key.LogicalKeyboardKey.keyR, 83, src__services__keyboard_key.LogicalKeyboardKey.keyS, 84, src__services__keyboard_key.LogicalKeyboardKey.keyT, 85, src__services__keyboard_key.LogicalKeyboardKey.keyU, 86, src__services__keyboard_key.LogicalKeyboardKey.keyV, 87, src__services__keyboard_key.LogicalKeyboardKey.keyW, 88, src__services__keyboard_key.LogicalKeyboardKey.keyX, 89, src__services__keyboard_key.LogicalKeyboardKey.keyY, 90, src__services__keyboard_key.LogicalKeyboardKey.keyZ, 49, src__services__keyboard_key.LogicalKeyboardKey.digit1, 50, src__services__keyboard_key.LogicalKeyboardKey.digit2, 51, src__services__keyboard_key.LogicalKeyboardKey.digit3, 52, src__services__keyboard_key.LogicalKeyboardKey.digit4, 53, src__services__keyboard_key.LogicalKeyboardKey.digit5, 54, src__services__keyboard_key.LogicalKeyboardKey.digit6, 55, src__services__keyboard_key.LogicalKeyboardKey.digit7, 56, src__services__keyboard_key.LogicalKeyboardKey.digit8, 57, src__services__keyboard_key.LogicalKeyboardKey.digit9, 48, src__services__keyboard_key.LogicalKeyboardKey.digit0, 257, src__services__keyboard_key.LogicalKeyboardKey.enter, 256, src__services__keyboard_key.LogicalKeyboardKey.escape, 259, src__services__keyboard_key.LogicalKeyboardKey.backspace, 258, src__services__keyboard_key.LogicalKeyboardKey.tab, 32, src__services__keyboard_key.LogicalKeyboardKey.space, 45, src__services__keyboard_key.LogicalKeyboardKey.minus, 61, src__services__keyboard_key.LogicalKeyboardKey.equal, 91, src__services__keyboard_key.LogicalKeyboardKey.bracketLeft, 93, src__services__keyboard_key.LogicalKeyboardKey.bracketRight, 92, src__services__keyboard_key.LogicalKeyboardKey.backslash, 59, src__services__keyboard_key.LogicalKeyboardKey.semicolon, 39, src__services__keyboard_key.LogicalKeyboardKey.quote, 96, src__services__keyboard_key.LogicalKeyboardKey.backquote, 44, src__services__keyboard_key.LogicalKeyboardKey.comma, 46, src__services__keyboard_key.LogicalKeyboardKey.period, 47, src__services__keyboard_key.LogicalKeyboardKey.slash, 280, src__services__keyboard_key.LogicalKeyboardKey.capsLock, 290, src__services__keyboard_key.LogicalKeyboardKey.f1, 291, src__services__keyboard_key.LogicalKeyboardKey.f2, 292, src__services__keyboard_key.LogicalKeyboardKey.f3, 293, src__services__keyboard_key.LogicalKeyboardKey.f4, 294, src__services__keyboard_key.LogicalKeyboardKey.f5, 295, src__services__keyboard_key.LogicalKeyboardKey.f6, 296, src__services__keyboard_key.LogicalKeyboardKey.f7, 297, src__services__keyboard_key.LogicalKeyboardKey.f8, 298, src__services__keyboard_key.LogicalKeyboardKey.f9, 299, src__services__keyboard_key.LogicalKeyboardKey.f10, 300, src__services__keyboard_key.LogicalKeyboardKey.f11, 301, src__services__keyboard_key.LogicalKeyboardKey.f12, 283, src__services__keyboard_key.LogicalKeyboardKey.printScreen, 284, src__services__keyboard_key.LogicalKeyboardKey.pause, 260, src__services__keyboard_key.LogicalKeyboardKey.insert, 268, src__services__keyboard_key.LogicalKeyboardKey.home, 266, src__services__keyboard_key.LogicalKeyboardKey.pageUp, 261, src__services__keyboard_key.LogicalKeyboardKey.delete, 269, src__services__keyboard_key.LogicalKeyboardKey.end, 267, src__services__keyboard_key.LogicalKeyboardKey.pageDown, 262, src__services__keyboard_key.LogicalKeyboardKey.arrowRight, 263, src__services__keyboard_key.LogicalKeyboardKey.arrowLeft, 264, src__services__keyboard_key.LogicalKeyboardKey.arrowDown, 265, src__services__keyboard_key.LogicalKeyboardKey.arrowUp, 282, src__services__keyboard_key.LogicalKeyboardKey.numLock, 331, src__services__keyboard_key.LogicalKeyboardKey.numpadDivide, 332, src__services__keyboard_key.LogicalKeyboardKey.numpadMultiply, 334, src__services__keyboard_key.LogicalKeyboardKey.numpadAdd, 335, src__services__keyboard_key.LogicalKeyboardKey.numpadEnter, 321, src__services__keyboard_key.LogicalKeyboardKey.numpad1, 322, src__services__keyboard_key.LogicalKeyboardKey.numpad2, 323, src__services__keyboard_key.LogicalKeyboardKey.numpad3, 324, src__services__keyboard_key.LogicalKeyboardKey.numpad4, 325, src__services__keyboard_key.LogicalKeyboardKey.numpad5, 326, src__services__keyboard_key.LogicalKeyboardKey.numpad6, 327, src__services__keyboard_key.LogicalKeyboardKey.numpad7, 328, src__services__keyboard_key.LogicalKeyboardKey.numpad8, 329, src__services__keyboard_key.LogicalKeyboardKey.numpad9, 320, src__services__keyboard_key.LogicalKeyboardKey.numpad0, 330, src__services__keyboard_key.LogicalKeyboardKey.numpadDecimal, 348, src__services__keyboard_key.LogicalKeyboardKey.contextMenu, 336, src__services__keyboard_key.LogicalKeyboardKey.numpadEqual, 302, src__services__keyboard_key.LogicalKeyboardKey.f13, 303, src__services__keyboard_key.LogicalKeyboardKey.f14, 304, src__services__keyboard_key.LogicalKeyboardKey.f15, 305, src__services__keyboard_key.LogicalKeyboardKey.f16, 306, src__services__keyboard_key.LogicalKeyboardKey.f17, 307, src__services__keyboard_key.LogicalKeyboardKey.f18, 308, src__services__keyboard_key.LogicalKeyboardKey.f19, 309, src__services__keyboard_key.LogicalKeyboardKey.f20, 310, src__services__keyboard_key.LogicalKeyboardKey.f21, 311, src__services__keyboard_key.LogicalKeyboardKey.f22, 312, src__services__keyboard_key.LogicalKeyboardKey.f23, 341, src__services__keyboard_key.LogicalKeyboardKey.controlLeft, 340, src__services__keyboard_key.LogicalKeyboardKey.shiftLeft, 342, src__services__keyboard_key.LogicalKeyboardKey.altLeft, 345, src__services__keyboard_key.LogicalKeyboardKey.controlRight, 344, src__services__keyboard_key.LogicalKeyboardKey.shiftRight, 346, src__services__keyboard_key.LogicalKeyboardKey.altRight]);
    },
    /*src__services__keyboard_maps.kGlfwNumpadMap*/get kGlfwNumpadMap() {
      return dart.constMap(core.int, src__services__keyboard_key.LogicalKeyboardKey, [331, src__services__keyboard_key.LogicalKeyboardKey.numpadDivide, 332, src__services__keyboard_key.LogicalKeyboardKey.numpadMultiply, 334, src__services__keyboard_key.LogicalKeyboardKey.numpadAdd, 321, src__services__keyboard_key.LogicalKeyboardKey.numpad1, 322, src__services__keyboard_key.LogicalKeyboardKey.numpad2, 323, src__services__keyboard_key.LogicalKeyboardKey.numpad3, 324, src__services__keyboard_key.LogicalKeyboardKey.numpad4, 325, src__services__keyboard_key.LogicalKeyboardKey.numpad5, 326, src__services__keyboard_key.LogicalKeyboardKey.numpad6, 327, src__services__keyboard_key.LogicalKeyboardKey.numpad7, 328, src__services__keyboard_key.LogicalKeyboardKey.numpad8, 329, src__services__keyboard_key.LogicalKeyboardKey.numpad9, 320, src__services__keyboard_key.LogicalKeyboardKey.numpad0, 330, src__services__keyboard_key.LogicalKeyboardKey.numpadDecimal, 336, src__services__keyboard_key.LogicalKeyboardKey.numpadEqual]);
    },
    /*src__services__keyboard_maps.kLinuxToPhysicalKey*/get kLinuxToPhysicalKey() {
      return dart.constMap(core.int, src__services__keyboard_key.PhysicalKeyboardKey, [150, src__services__keyboard_key.PhysicalKeyboardKey.sleep, 151, src__services__keyboard_key.PhysicalKeyboardKey.wakeUp, 235, src__services__keyboard_key.PhysicalKeyboardKey.displayToggleIntExt, 38, src__services__keyboard_key.PhysicalKeyboardKey.keyA, 56, src__services__keyboard_key.PhysicalKeyboardKey.keyB, 54, src__services__keyboard_key.PhysicalKeyboardKey.keyC, 40, src__services__keyboard_key.PhysicalKeyboardKey.keyD, 26, src__services__keyboard_key.PhysicalKeyboardKey.keyE, 41, src__services__keyboard_key.PhysicalKeyboardKey.keyF, 42, src__services__keyboard_key.PhysicalKeyboardKey.keyG, 43, src__services__keyboard_key.PhysicalKeyboardKey.keyH, 31, src__services__keyboard_key.PhysicalKeyboardKey.keyI, 44, src__services__keyboard_key.PhysicalKeyboardKey.keyJ, 45, src__services__keyboard_key.PhysicalKeyboardKey.keyK, 46, src__services__keyboard_key.PhysicalKeyboardKey.keyL, 58, src__services__keyboard_key.PhysicalKeyboardKey.keyM, 57, src__services__keyboard_key.PhysicalKeyboardKey.keyN, 32, src__services__keyboard_key.PhysicalKeyboardKey.keyO, 33, src__services__keyboard_key.PhysicalKeyboardKey.keyP, 24, src__services__keyboard_key.PhysicalKeyboardKey.keyQ, 27, src__services__keyboard_key.PhysicalKeyboardKey.keyR, 39, src__services__keyboard_key.PhysicalKeyboardKey.keyS, 28, src__services__keyboard_key.PhysicalKeyboardKey.keyT, 30, src__services__keyboard_key.PhysicalKeyboardKey.keyU, 55, src__services__keyboard_key.PhysicalKeyboardKey.keyV, 25, src__services__keyboard_key.PhysicalKeyboardKey.keyW, 53, src__services__keyboard_key.PhysicalKeyboardKey.keyX, 29, src__services__keyboard_key.PhysicalKeyboardKey.keyY, 52, src__services__keyboard_key.PhysicalKeyboardKey.keyZ, 10, src__services__keyboard_key.PhysicalKeyboardKey.digit1, 11, src__services__keyboard_key.PhysicalKeyboardKey.digit2, 12, src__services__keyboard_key.PhysicalKeyboardKey.digit3, 13, src__services__keyboard_key.PhysicalKeyboardKey.digit4, 14, src__services__keyboard_key.PhysicalKeyboardKey.digit5, 15, src__services__keyboard_key.PhysicalKeyboardKey.digit6, 16, src__services__keyboard_key.PhysicalKeyboardKey.digit7, 17, src__services__keyboard_key.PhysicalKeyboardKey.digit8, 18, src__services__keyboard_key.PhysicalKeyboardKey.digit9, 19, src__services__keyboard_key.PhysicalKeyboardKey.digit0, 36, src__services__keyboard_key.PhysicalKeyboardKey.enter, 9, src__services__keyboard_key.PhysicalKeyboardKey.escape, 22, src__services__keyboard_key.PhysicalKeyboardKey.backspace, 23, src__services__keyboard_key.PhysicalKeyboardKey.tab, 65, src__services__keyboard_key.PhysicalKeyboardKey.space, 20, src__services__keyboard_key.PhysicalKeyboardKey.minus, 21, src__services__keyboard_key.PhysicalKeyboardKey.equal, 34, src__services__keyboard_key.PhysicalKeyboardKey.bracketLeft, 35, src__services__keyboard_key.PhysicalKeyboardKey.bracketRight, 51, src__services__keyboard_key.PhysicalKeyboardKey.backslash, 47, src__services__keyboard_key.PhysicalKeyboardKey.semicolon, 48, src__services__keyboard_key.PhysicalKeyboardKey.quote, 49, src__services__keyboard_key.PhysicalKeyboardKey.backquote, 59, src__services__keyboard_key.PhysicalKeyboardKey.comma, 60, src__services__keyboard_key.PhysicalKeyboardKey.period, 61, src__services__keyboard_key.PhysicalKeyboardKey.slash, 66, src__services__keyboard_key.PhysicalKeyboardKey.capsLock, 67, src__services__keyboard_key.PhysicalKeyboardKey.f1, 68, src__services__keyboard_key.PhysicalKeyboardKey.f2, 69, src__services__keyboard_key.PhysicalKeyboardKey.f3, 70, src__services__keyboard_key.PhysicalKeyboardKey.f4, 71, src__services__keyboard_key.PhysicalKeyboardKey.f5, 72, src__services__keyboard_key.PhysicalKeyboardKey.f6, 73, src__services__keyboard_key.PhysicalKeyboardKey.f7, 74, src__services__keyboard_key.PhysicalKeyboardKey.f8, 75, src__services__keyboard_key.PhysicalKeyboardKey.f9, 76, src__services__keyboard_key.PhysicalKeyboardKey.f10, 95, src__services__keyboard_key.PhysicalKeyboardKey.f11, 96, src__services__keyboard_key.PhysicalKeyboardKey.f12, 107, src__services__keyboard_key.PhysicalKeyboardKey.printScreen, 78, src__services__keyboard_key.PhysicalKeyboardKey.scrollLock, 127, src__services__keyboard_key.PhysicalKeyboardKey.pause, 118, src__services__keyboard_key.PhysicalKeyboardKey.insert, 110, src__services__keyboard_key.PhysicalKeyboardKey.home, 112, src__services__keyboard_key.PhysicalKeyboardKey.pageUp, 119, src__services__keyboard_key.PhysicalKeyboardKey.delete, 115, src__services__keyboard_key.PhysicalKeyboardKey.end, 117, src__services__keyboard_key.PhysicalKeyboardKey.pageDown, 114, src__services__keyboard_key.PhysicalKeyboardKey.arrowRight, 113, src__services__keyboard_key.PhysicalKeyboardKey.arrowLeft, 116, src__services__keyboard_key.PhysicalKeyboardKey.arrowDown, 111, src__services__keyboard_key.PhysicalKeyboardKey.arrowUp, 77, src__services__keyboard_key.PhysicalKeyboardKey.numLock, 106, src__services__keyboard_key.PhysicalKeyboardKey.numpadDivide, 63, src__services__keyboard_key.PhysicalKeyboardKey.numpadMultiply, 82, src__services__keyboard_key.PhysicalKeyboardKey.numpadSubtract, 86, src__services__keyboard_key.PhysicalKeyboardKey.numpadAdd, 104, src__services__keyboard_key.PhysicalKeyboardKey.numpadEnter, 87, src__services__keyboard_key.PhysicalKeyboardKey.numpad1, 88, src__services__keyboard_key.PhysicalKeyboardKey.numpad2, 89, src__services__keyboard_key.PhysicalKeyboardKey.numpad3, 83, src__services__keyboard_key.PhysicalKeyboardKey.numpad4, 84, src__services__keyboard_key.PhysicalKeyboardKey.numpad5, 85, src__services__keyboard_key.PhysicalKeyboardKey.numpad6, 79, src__services__keyboard_key.PhysicalKeyboardKey.numpad7, 80, src__services__keyboard_key.PhysicalKeyboardKey.numpad8, 81, src__services__keyboard_key.PhysicalKeyboardKey.numpad9, 90, src__services__keyboard_key.PhysicalKeyboardKey.numpad0, 91, src__services__keyboard_key.PhysicalKeyboardKey.numpadDecimal, 94, src__services__keyboard_key.PhysicalKeyboardKey.intlBackslash, 135, src__services__keyboard_key.PhysicalKeyboardKey.contextMenu, 124, src__services__keyboard_key.PhysicalKeyboardKey.power, 125, src__services__keyboard_key.PhysicalKeyboardKey.numpadEqual, 191, src__services__keyboard_key.PhysicalKeyboardKey.f13, 192, src__services__keyboard_key.PhysicalKeyboardKey.f14, 193, src__services__keyboard_key.PhysicalKeyboardKey.f15, 194, src__services__keyboard_key.PhysicalKeyboardKey.f16, 195, src__services__keyboard_key.PhysicalKeyboardKey.f17, 196, src__services__keyboard_key.PhysicalKeyboardKey.f18, 197, src__services__keyboard_key.PhysicalKeyboardKey.f19, 198, src__services__keyboard_key.PhysicalKeyboardKey.f20, 199, src__services__keyboard_key.PhysicalKeyboardKey.f21, 200, src__services__keyboard_key.PhysicalKeyboardKey.f22, 201, src__services__keyboard_key.PhysicalKeyboardKey.f23, 202, src__services__keyboard_key.PhysicalKeyboardKey.f24, 142, src__services__keyboard_key.PhysicalKeyboardKey.open, 146, src__services__keyboard_key.PhysicalKeyboardKey.help, 140, src__services__keyboard_key.PhysicalKeyboardKey.select, 137, src__services__keyboard_key.PhysicalKeyboardKey.again, 139, src__services__keyboard_key.PhysicalKeyboardKey.undo, 145, src__services__keyboard_key.PhysicalKeyboardKey.cut, 141, src__services__keyboard_key.PhysicalKeyboardKey.copy, 143, src__services__keyboard_key.PhysicalKeyboardKey.paste, 144, src__services__keyboard_key.PhysicalKeyboardKey.find, 121, src__services__keyboard_key.PhysicalKeyboardKey.audioVolumeMute, 123, src__services__keyboard_key.PhysicalKeyboardKey.audioVolumeUp, 122, src__services__keyboard_key.PhysicalKeyboardKey.audioVolumeDown, 129, src__services__keyboard_key.PhysicalKeyboardKey.numpadComma, 97, src__services__keyboard_key.PhysicalKeyboardKey.intlRo, 101, src__services__keyboard_key.PhysicalKeyboardKey.kanaMode, 132, src__services__keyboard_key.PhysicalKeyboardKey.intlYen, 100, src__services__keyboard_key.PhysicalKeyboardKey.convert, 102, src__services__keyboard_key.PhysicalKeyboardKey.nonConvert, 130, src__services__keyboard_key.PhysicalKeyboardKey.lang1, 131, src__services__keyboard_key.PhysicalKeyboardKey.lang2, 98, src__services__keyboard_key.PhysicalKeyboardKey.lang3, 99, src__services__keyboard_key.PhysicalKeyboardKey.lang4, 93, src__services__keyboard_key.PhysicalKeyboardKey.lang5, 187, src__services__keyboard_key.PhysicalKeyboardKey.numpadParenLeft, 188, src__services__keyboard_key.PhysicalKeyboardKey.numpadParenRight, 126, src__services__keyboard_key.PhysicalKeyboardKey.numpadSignChange, 37, src__services__keyboard_key.PhysicalKeyboardKey.controlLeft, 50, src__services__keyboard_key.PhysicalKeyboardKey.shiftLeft, 64, src__services__keyboard_key.PhysicalKeyboardKey.altLeft, 133, src__services__keyboard_key.PhysicalKeyboardKey.metaLeft, 105, src__services__keyboard_key.PhysicalKeyboardKey.controlRight, 62, src__services__keyboard_key.PhysicalKeyboardKey.shiftRight, 108, src__services__keyboard_key.PhysicalKeyboardKey.altRight, 134, src__services__keyboard_key.PhysicalKeyboardKey.metaRight, 366, src__services__keyboard_key.PhysicalKeyboardKey.info, 378, src__services__keyboard_key.PhysicalKeyboardKey.closedCaptionToggle, 233, src__services__keyboard_key.PhysicalKeyboardKey.brightnessUp, 232, src__services__keyboard_key.PhysicalKeyboardKey.brightnessDown, 439, src__services__keyboard_key.PhysicalKeyboardKey.brightnessToggle, 600, src__services__keyboard_key.PhysicalKeyboardKey.brightnessMinimum, 601, src__services__keyboard_key.PhysicalKeyboardKey.brightnessMaximum, 252, src__services__keyboard_key.PhysicalKeyboardKey.brightnessAuto, 413, src__services__keyboard_key.PhysicalKeyboardKey.mediaLast, 177, src__services__keyboard_key.PhysicalKeyboardKey.launchPhone, 370, src__services__keyboard_key.PhysicalKeyboardKey.programGuide, 182, src__services__keyboard_key.PhysicalKeyboardKey.exit, 418, src__services__keyboard_key.PhysicalKeyboardKey.channelUp, 419, src__services__keyboard_key.PhysicalKeyboardKey.channelDown, 215, src__services__keyboard_key.PhysicalKeyboardKey.mediaPlay, 175, src__services__keyboard_key.PhysicalKeyboardKey.mediaRecord, 216, src__services__keyboard_key.PhysicalKeyboardKey.mediaFastForward, 176, src__services__keyboard_key.PhysicalKeyboardKey.mediaRewind, 171, src__services__keyboard_key.PhysicalKeyboardKey.mediaTrackNext, 173, src__services__keyboard_key.PhysicalKeyboardKey.mediaTrackPrevious, 174, src__services__keyboard_key.PhysicalKeyboardKey.mediaStop, 169, src__services__keyboard_key.PhysicalKeyboardKey.eject, 172, src__services__keyboard_key.PhysicalKeyboardKey.mediaPlayPause, 590, src__services__keyboard_key.PhysicalKeyboardKey.speechInputToggle, 217, src__services__keyboard_key.PhysicalKeyboardKey.bassBoost, 179, src__services__keyboard_key.PhysicalKeyboardKey.mediaSelect, 429, src__services__keyboard_key.PhysicalKeyboardKey.launchWordProcessor, 431, src__services__keyboard_key.PhysicalKeyboardKey.launchSpreadsheet, 163, src__services__keyboard_key.PhysicalKeyboardKey.launchMail, 437, src__services__keyboard_key.PhysicalKeyboardKey.launchContacts, 405, src__services__keyboard_key.PhysicalKeyboardKey.launchCalendar, 148, src__services__keyboard_key.PhysicalKeyboardKey.launchApp2, 152, src__services__keyboard_key.PhysicalKeyboardKey.launchApp1, 158, src__services__keyboard_key.PhysicalKeyboardKey.launchInternetBrowser, 441, src__services__keyboard_key.PhysicalKeyboardKey.logOff, 160, src__services__keyboard_key.PhysicalKeyboardKey.lockScreen, 587, src__services__keyboard_key.PhysicalKeyboardKey.launchControlPanel, 588, src__services__keyboard_key.PhysicalKeyboardKey.selectTask, 243, src__services__keyboard_key.PhysicalKeyboardKey.launchDocuments, 440, src__services__keyboard_key.PhysicalKeyboardKey.spellCheck, 382, src__services__keyboard_key.PhysicalKeyboardKey.launchKeyboardLayout, 589, src__services__keyboard_key.PhysicalKeyboardKey.launchScreenSaver, 591, src__services__keyboard_key.PhysicalKeyboardKey.launchAssistant, 400, src__services__keyboard_key.PhysicalKeyboardKey.launchAudioBrowser, 189, src__services__keyboard_key.PhysicalKeyboardKey.newKey, 214, src__services__keyboard_key.PhysicalKeyboardKey.close, 242, src__services__keyboard_key.PhysicalKeyboardKey.save, 218, src__services__keyboard_key.PhysicalKeyboardKey.print, 225, src__services__keyboard_key.PhysicalKeyboardKey.browserSearch, 180, src__services__keyboard_key.PhysicalKeyboardKey.browserHome, 166, src__services__keyboard_key.PhysicalKeyboardKey.browserBack, 167, src__services__keyboard_key.PhysicalKeyboardKey.browserForward, 136, src__services__keyboard_key.PhysicalKeyboardKey.browserStop, 181, src__services__keyboard_key.PhysicalKeyboardKey.browserRefresh, 164, src__services__keyboard_key.PhysicalKeyboardKey.browserFavorites, 426, src__services__keyboard_key.PhysicalKeyboardKey.zoomIn, 427, src__services__keyboard_key.PhysicalKeyboardKey.zoomOut, 380, src__services__keyboard_key.PhysicalKeyboardKey.zoomToggle, 190, src__services__keyboard_key.PhysicalKeyboardKey.redo, 240, src__services__keyboard_key.PhysicalKeyboardKey.mailReply, 241, src__services__keyboard_key.PhysicalKeyboardKey.mailForward, 239, src__services__keyboard_key.PhysicalKeyboardKey.mailSend, 128, src__services__keyboard_key.PhysicalKeyboardKey.showAllWindows]);
    }
  });
  src__services__keyboard_key.LogicalKeyboardKey = class LogicalKeyboardKey extends src__foundation__diagnostics.Diagnosticable {
    get keyId() {
      return this[keyId$];
    }
    set keyId(value) {
      super.keyId = value;
    }
    get debugName() {
      return this[debugName$];
    }
    set debugName(value) {
      super.debugName = value;
    }
    get keyLabel() {
      return this[keyLabel$];
    }
    set keyLabel(value) {
      super.keyLabel = value;
    }
    get hashCode() {
      return dart.hashCode(this.keyId);
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.equals(dart.runtimeType(other), this[$runtimeType])) {
        return false;
      }
      let typedOther = src__services__keyboard_key.LogicalKeyboardKey._check(other);
      return this.keyId == typedOther.keyId;
    }
    static findKeyByKeyId(keyId) {
      return src__services__keyboard_key.LogicalKeyboardKey._knownLogicalKeys[$_get](keyId);
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new src__foundation__diagnostics.StringProperty.new("keyId", "0x" + this.keyId[$toRadixString](16)[$padLeft](8, "0"), {showName: true}));
      properties.add(new src__foundation__diagnostics.StringProperty.new("keyLabel", this.keyLabel, {showName: true}));
      properties.add(new src__foundation__diagnostics.StringProperty.new("debugName", this.debugName, {showName: true, defaultValue: null}));
    }
    static isControlCharacter(label) {
      if (label.length > 1) {
        return false;
      }
      let codeUnit = label[$codeUnitAt](0);
      return codeUnit <= 31 && codeUnit >= 0 || codeUnit >= 127 && codeUnit <= 159;
    }
    get isAutogenerated() {
      return (dart.notNull(this.keyId) & dart.notNull(src__services__keyboard_key.LogicalKeyboardKey.autogeneratedMask)) !== 0;
    }
  };
  (src__services__keyboard_key.LogicalKeyboardKey.new = function(keyId, opts) {
    let debugName = opts && 'debugName' in opts ? opts.debugName : null;
    let keyLabel = opts && 'keyLabel' in opts ? opts.keyLabel : null;
    this[keyId$] = keyId;
    this[debugName$] = debugName;
    this[keyLabel$] = keyLabel;
    if (!(keyId != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/keyboard_key.dart", 127, 16, "keyId != null");
    src__services__keyboard_key.LogicalKeyboardKey.__proto__.new.call(this);
    ;
  }).prototype = src__services__keyboard_key.LogicalKeyboardKey.prototype;
  dart.addTypeTests(src__services__keyboard_key.LogicalKeyboardKey);
  const keyId$ = Symbol("LogicalKeyboardKey.keyId");
  const debugName$ = Symbol("LogicalKeyboardKey.debugName");
  const keyLabel$ = Symbol("LogicalKeyboardKey.keyLabel");
  dart.setGetterSignature(src__services__keyboard_key.LogicalKeyboardKey, () => ({
    __proto__: dart.getGetters(src__services__keyboard_key.LogicalKeyboardKey.__proto__),
    isAutogenerated: core.bool
  }));
  dart.setLibraryUri(src__services__keyboard_key.LogicalKeyboardKey, "package:flutter_web/src/services/keyboard_key.dart");
  dart.setFieldSignature(src__services__keyboard_key.LogicalKeyboardKey, () => ({
    __proto__: dart.getFields(src__services__keyboard_key.LogicalKeyboardKey.__proto__),
    keyId: dart.finalFieldType(core.int),
    debugName: dart.finalFieldType(core.String),
    keyLabel: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(src__services__keyboard_key.LogicalKeyboardKey, ['_equals']);
  dart.defineExtensionAccessors(src__services__keyboard_key.LogicalKeyboardKey, ['hashCode']);
  dart.defineLazy(src__services__keyboard_key.LogicalKeyboardKey, {
    /*src__services__keyboard_key.LogicalKeyboardKey.valueMask*/get valueMask() {
      return 4294967295;
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.platformMask*/get platformMask() {
      return 1095216660480;
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.autogeneratedMask*/get autogeneratedMask() {
      return 1099511627776;
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.unicodePlane*/get unicodePlane() {
      return 0;
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.hidPlane*/get hidPlane() {
      return 4294967296;
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.none*/get none() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4294967296, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "None"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.hyper*/get hyper() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4294967312, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Hyper"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.superKey*/get superKey() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4294967313, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Super Key"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.fn*/get fn() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4294967314, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Fn"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.fnLock*/get fnLock() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4294967315, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Fn Lock"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.suspend*/get suspend() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4294967316, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Suspend"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.resume*/get resume() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4294967317, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Resume"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.turbo*/get turbo() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4294967318, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Turbo"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.sleep*/get sleep() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295032962, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Sleep"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.wakeUp*/get wakeUp() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295032963, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Wake Up"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.displayToggleIntExt*/get displayToggleIntExt() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295033013, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Display Toggle Int Ext"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.usbReserved*/get usbReserved() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426048, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Usb Reserved"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.usbErrorRollOver*/get usbErrorRollOver() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426049, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Usb Error Roll Over"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.usbPostFail*/get usbPostFail() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426050, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Usb Post Fail"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.usbErrorUndefined*/get usbErrorUndefined() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426051, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Usb Error Undefined"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.keyA*/get keyA() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(97, {keyLabel: "a", debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Key A"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.keyB*/get keyB() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(98, {keyLabel: "b", debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Key B"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.keyC*/get keyC() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(99, {keyLabel: "c", debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Key C"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.keyD*/get keyD() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(100, {keyLabel: "d", debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Key D"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.keyE*/get keyE() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(101, {keyLabel: "e", debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Key E"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.keyF*/get keyF() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(102, {keyLabel: "f", debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Key F"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.keyG*/get keyG() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(103, {keyLabel: "g", debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Key G"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.keyH*/get keyH() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(104, {keyLabel: "h", debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Key H"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.keyI*/get keyI() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(105, {keyLabel: "i", debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Key I"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.keyJ*/get keyJ() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(106, {keyLabel: "j", debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Key J"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.keyK*/get keyK() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(107, {keyLabel: "k", debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Key K"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.keyL*/get keyL() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(108, {keyLabel: "l", debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Key L"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.keyM*/get keyM() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(109, {keyLabel: "m", debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Key M"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.keyN*/get keyN() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(110, {keyLabel: "n", debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Key N"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.keyO*/get keyO() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(111, {keyLabel: "o", debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Key O"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.keyP*/get keyP() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(112, {keyLabel: "p", debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Key P"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.keyQ*/get keyQ() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(113, {keyLabel: "q", debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Key Q"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.keyR*/get keyR() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(114, {keyLabel: "r", debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Key R"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.keyS*/get keyS() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(115, {keyLabel: "s", debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Key S"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.keyT*/get keyT() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(116, {keyLabel: "t", debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Key T"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.keyU*/get keyU() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(117, {keyLabel: "u", debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Key U"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.keyV*/get keyV() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(118, {keyLabel: "v", debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Key V"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.keyW*/get keyW() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(119, {keyLabel: "w", debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Key W"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.keyX*/get keyX() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(120, {keyLabel: "x", debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Key X"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.keyY*/get keyY() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(121, {keyLabel: "y", debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Key Y"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.keyZ*/get keyZ() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(122, {keyLabel: "z", debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Key Z"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.digit1*/get digit1() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(49, {keyLabel: "1", debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Digit 1"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.digit2*/get digit2() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(50, {keyLabel: "2", debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Digit 2"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.digit3*/get digit3() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(51, {keyLabel: "3", debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Digit 3"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.digit4*/get digit4() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(52, {keyLabel: "4", debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Digit 4"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.digit5*/get digit5() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(53, {keyLabel: "5", debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Digit 5"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.digit6*/get digit6() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(54, {keyLabel: "6", debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Digit 6"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.digit7*/get digit7() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(55, {keyLabel: "7", debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Digit 7"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.digit8*/get digit8() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(56, {keyLabel: "8", debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Digit 8"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.digit9*/get digit9() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(57, {keyLabel: "9", debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Digit 9"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.digit0*/get digit0() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(48, {keyLabel: "0", debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Digit 0"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.enter*/get enter() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426088, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Enter"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.escape*/get escape() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426089, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Escape"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.backspace*/get backspace() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426090, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Backspace"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.tab*/get tab() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426091, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Tab"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.space*/get space() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(32, {keyLabel: " ", debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Space"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.minus*/get minus() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(45, {keyLabel: "-", debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Minus"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.equal*/get equal() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(61, {keyLabel: "=", debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Equal"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.bracketLeft*/get bracketLeft() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(91, {keyLabel: "[", debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Bracket Left"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.bracketRight*/get bracketRight() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(93, {keyLabel: "]", debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Bracket Right"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.backslash*/get backslash() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(92, {keyLabel: "\\", debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Backslash"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.semicolon*/get semicolon() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(59, {keyLabel: ";", debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Semicolon"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.quote*/get quote() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(39, {keyLabel: "'", debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Quote"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.backquote*/get backquote() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(96, {keyLabel: "`", debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Backquote"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.comma*/get comma() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(44, {keyLabel: ",", debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Comma"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.period*/get period() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(46, {keyLabel: ".", debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Period"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.slash*/get slash() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(47, {keyLabel: "/", debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Slash"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.capsLock*/get capsLock() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426105, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Caps Lock"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.f1*/get f1() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426106, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "F1"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.f2*/get f2() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426107, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "F2"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.f3*/get f3() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426108, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "F3"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.f4*/get f4() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426109, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "F4"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.f5*/get f5() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426110, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "F5"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.f6*/get f6() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426111, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "F6"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.f7*/get f7() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426112, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "F7"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.f8*/get f8() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426113, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "F8"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.f9*/get f9() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426114, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "F9"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.f10*/get f10() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426115, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "F10"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.f11*/get f11() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426116, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "F11"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.f12*/get f12() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426117, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "F12"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.printScreen*/get printScreen() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426118, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Print Screen"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.scrollLock*/get scrollLock() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426119, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Scroll Lock"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.pause*/get pause() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426120, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Pause"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.insert*/get insert() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426121, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Insert"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.home*/get home() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426122, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Home"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.pageUp*/get pageUp() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426123, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Page Up"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.delete*/get delete() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426124, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Delete"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.end*/get end() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426125, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "End"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.pageDown*/get pageDown() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426126, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Page Down"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.arrowRight*/get arrowRight() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426127, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Arrow Right"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.arrowLeft*/get arrowLeft() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426128, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Arrow Left"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.arrowDown*/get arrowDown() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426129, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Arrow Down"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.arrowUp*/get arrowUp() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426130, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Arrow Up"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.numLock*/get numLock() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426131, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Num Lock"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.numpadDivide*/get numpadDivide() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426132, {keyLabel: "/", debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Numpad Divide"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.numpadMultiply*/get numpadMultiply() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426133, {keyLabel: "*", debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Numpad Multiply"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.numpadSubtract*/get numpadSubtract() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426134, {keyLabel: "-", debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Numpad Subtract"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.numpadAdd*/get numpadAdd() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426135, {keyLabel: "+", debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Numpad Add"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.numpadEnter*/get numpadEnter() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426136, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Numpad Enter"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.numpad1*/get numpad1() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426137, {keyLabel: "1", debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Numpad 1"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.numpad2*/get numpad2() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426138, {keyLabel: "2", debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Numpad 2"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.numpad3*/get numpad3() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426139, {keyLabel: "3", debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Numpad 3"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.numpad4*/get numpad4() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426140, {keyLabel: "4", debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Numpad 4"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.numpad5*/get numpad5() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426141, {keyLabel: "5", debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Numpad 5"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.numpad6*/get numpad6() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426142, {keyLabel: "6", debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Numpad 6"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.numpad7*/get numpad7() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426143, {keyLabel: "7", debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Numpad 7"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.numpad8*/get numpad8() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426144, {keyLabel: "8", debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Numpad 8"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.numpad9*/get numpad9() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426145, {keyLabel: "9", debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Numpad 9"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.numpad0*/get numpad0() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426146, {keyLabel: "0", debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Numpad 0"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.numpadDecimal*/get numpadDecimal() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426147, {keyLabel: ".", debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Numpad Decimal"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.intlBackslash*/get intlBackslash() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426148, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Intl Backslash"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.contextMenu*/get contextMenu() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426149, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Context Menu"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.power*/get power() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426150, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Power"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.numpadEqual*/get numpadEqual() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426151, {keyLabel: "=", debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Numpad Equal"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.f13*/get f13() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426152, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "F13"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.f14*/get f14() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426153, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "F14"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.f15*/get f15() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426154, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "F15"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.f16*/get f16() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426155, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "F16"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.f17*/get f17() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426156, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "F17"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.f18*/get f18() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426157, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "F18"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.f19*/get f19() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426158, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "F19"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.f20*/get f20() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426159, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "F20"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.f21*/get f21() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426160, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "F21"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.f22*/get f22() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426161, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "F22"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.f23*/get f23() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426162, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "F23"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.f24*/get f24() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426163, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "F24"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.open*/get open() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426164, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Open"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.help*/get help() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426165, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Help"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.select*/get select() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426167, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Select"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.again*/get again() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426169, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Again"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.undo*/get undo() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426170, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Undo"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.cut*/get cut() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426171, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Cut"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.copy*/get copy() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426172, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Copy"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.paste*/get paste() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426173, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Paste"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.find*/get find() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426174, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Find"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.audioVolumeMute*/get audioVolumeMute() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426175, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Audio Volume Mute"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.audioVolumeUp*/get audioVolumeUp() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426176, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Audio Volume Up"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.audioVolumeDown*/get audioVolumeDown() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426177, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Audio Volume Down"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.numpadComma*/get numpadComma() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426181, {keyLabel: ",", debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Numpad Comma"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.intlRo*/get intlRo() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426183, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Intl Ro"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.kanaMode*/get kanaMode() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426184, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Kana Mode"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.intlYen*/get intlYen() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426185, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Intl Yen"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.convert*/get convert() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426186, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Convert"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.nonConvert*/get nonConvert() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426187, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Non Convert"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.lang1*/get lang1() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426192, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Lang 1"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.lang2*/get lang2() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426193, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Lang 2"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.lang3*/get lang3() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426194, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Lang 3"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.lang4*/get lang4() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426195, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Lang 4"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.lang5*/get lang5() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426196, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Lang 5"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.abort*/get abort() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426203, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Abort"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.props*/get props() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426211, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Props"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.numpadParenLeft*/get numpadParenLeft() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426230, {keyLabel: "(", debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Numpad Paren Left"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.numpadParenRight*/get numpadParenRight() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426231, {keyLabel: ")", debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Numpad Paren Right"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.numpadBackspace*/get numpadBackspace() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426235, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Numpad Backspace"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.numpadMemoryStore*/get numpadMemoryStore() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426256, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Numpad Memory Store"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.numpadMemoryRecall*/get numpadMemoryRecall() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426257, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Numpad Memory Recall"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.numpadMemoryClear*/get numpadMemoryClear() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426258, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Numpad Memory Clear"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.numpadMemoryAdd*/get numpadMemoryAdd() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426259, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Numpad Memory Add"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.numpadMemorySubtract*/get numpadMemorySubtract() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426260, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Numpad Memory Subtract"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.numpadSignChange*/get numpadSignChange() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426263, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Numpad Sign Change"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.numpadClear*/get numpadClear() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426264, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Numpad Clear"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.numpadClearEntry*/get numpadClearEntry() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426265, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Numpad Clear Entry"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.controlLeft*/get controlLeft() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426272, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Control Left"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.shiftLeft*/get shiftLeft() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426273, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Shift Left"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.altLeft*/get altLeft() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426274, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Alt Left"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.metaLeft*/get metaLeft() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426275, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Meta Left"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.controlRight*/get controlRight() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426276, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Control Right"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.shiftRight*/get shiftRight() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426277, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Shift Right"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.altRight*/get altRight() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426278, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Alt Right"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.metaRight*/get metaRight() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295426279, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Meta Right"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.info*/get info() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295753824, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Info"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.closedCaptionToggle*/get closedCaptionToggle() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295753825, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Closed Caption Toggle"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.brightnessUp*/get brightnessUp() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295753839, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Brightness Up"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.brightnessDown*/get brightnessDown() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295753840, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Brightness Down"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.brightnessToggle*/get brightnessToggle() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295753842, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Brightness Toggle"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.brightnessMinimum*/get brightnessMinimum() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295753843, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Brightness Minimum"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.brightnessMaximum*/get brightnessMaximum() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295753844, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Brightness Maximum"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.brightnessAuto*/get brightnessAuto() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295753845, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Brightness Auto"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.mediaLast*/get mediaLast() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295753859, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Media Last"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.launchPhone*/get launchPhone() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295753868, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Launch Phone"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.programGuide*/get programGuide() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295753869, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Program Guide"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.exit*/get exit() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295753876, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Exit"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.channelUp*/get channelUp() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295753884, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Channel Up"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.channelDown*/get channelDown() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295753885, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Channel Down"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.mediaPlay*/get mediaPlay() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295753904, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Media Play"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.mediaRecord*/get mediaRecord() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295753906, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Media Record"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.mediaFastForward*/get mediaFastForward() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295753907, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Media Fast Forward"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.mediaRewind*/get mediaRewind() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295753908, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Media Rewind"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.mediaTrackNext*/get mediaTrackNext() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295753909, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Media Track Next"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.mediaTrackPrevious*/get mediaTrackPrevious() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295753910, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Media Track Previous"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.mediaStop*/get mediaStop() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295753911, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Media Stop"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.eject*/get eject() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295753912, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Eject"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.mediaPlayPause*/get mediaPlayPause() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295753933, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Media Play Pause"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.speechInputToggle*/get speechInputToggle() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295753935, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Speech Input Toggle"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.bassBoost*/get bassBoost() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295753957, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Bass Boost"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.mediaSelect*/get mediaSelect() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295754115, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Media Select"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.launchWordProcessor*/get launchWordProcessor() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295754116, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Launch Word Processor"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.launchSpreadsheet*/get launchSpreadsheet() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295754118, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Launch Spreadsheet"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.launchMail*/get launchMail() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295754122, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Launch Mail"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.launchContacts*/get launchContacts() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295754125, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Launch Contacts"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.launchCalendar*/get launchCalendar() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295754126, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Launch Calendar"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.launchApp2*/get launchApp2() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295754130, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Launch App2"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.launchApp1*/get launchApp1() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295754132, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Launch App1"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.launchInternetBrowser*/get launchInternetBrowser() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295754134, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Launch Internet Browser"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.logOff*/get logOff() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295754140, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Log Off"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.lockScreen*/get lockScreen() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295754142, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Lock Screen"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.launchControlPanel*/get launchControlPanel() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295754143, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Launch Control Panel"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.selectTask*/get selectTask() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295754146, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Select Task"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.launchDocuments*/get launchDocuments() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295754151, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Launch Documents"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.spellCheck*/get spellCheck() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295754155, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Spell Check"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.launchKeyboardLayout*/get launchKeyboardLayout() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295754158, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Launch Keyboard Layout"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.launchScreenSaver*/get launchScreenSaver() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295754161, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Launch Screen Saver"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.launchAssistant*/get launchAssistant() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295754187, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Launch Assistant"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.launchAudioBrowser*/get launchAudioBrowser() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295754167, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Launch Audio Browser"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.newKey*/get newKey() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295754241, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "New Key"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.close*/get close() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295754243, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Close"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.save*/get save() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295754247, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Save"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.print*/get print() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295754248, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Print"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.browserSearch*/get browserSearch() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295754273, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Browser Search"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.browserHome*/get browserHome() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295754275, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Browser Home"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.browserBack*/get browserBack() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295754276, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Browser Back"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.browserForward*/get browserForward() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295754277, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Browser Forward"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.browserStop*/get browserStop() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295754278, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Browser Stop"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.browserRefresh*/get browserRefresh() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295754279, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Browser Refresh"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.browserFavorites*/get browserFavorites() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295754282, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Browser Favorites"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.zoomIn*/get zoomIn() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295754285, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Zoom In"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.zoomOut*/get zoomOut() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295754286, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Zoom Out"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.zoomToggle*/get zoomToggle() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295754290, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Zoom Toggle"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.redo*/get redo() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295754361, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Redo"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.mailReply*/get mailReply() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295754377, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Mail Reply"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.mailForward*/get mailForward() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295754379, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Mail Forward"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.mailSend*/get mailSend() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295754380, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Mail Send"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey.showAllWindows*/get showAllWindows() {
      return dart.const(new src__services__keyboard_key.LogicalKeyboardKey.new(4295754399, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Show All Windows"}));
    },
    /*src__services__keyboard_key.LogicalKeyboardKey._knownLogicalKeys*/get _knownLogicalKeys() {
      return dart.constMap(core.int, src__services__keyboard_key.LogicalKeyboardKey, [4294967296, src__services__keyboard_key.LogicalKeyboardKey.none, 4294967312, src__services__keyboard_key.LogicalKeyboardKey.hyper, 4294967313, src__services__keyboard_key.LogicalKeyboardKey.superKey, 4294967314, src__services__keyboard_key.LogicalKeyboardKey.fn, 4294967315, src__services__keyboard_key.LogicalKeyboardKey.fnLock, 4294967316, src__services__keyboard_key.LogicalKeyboardKey.suspend, 4294967317, src__services__keyboard_key.LogicalKeyboardKey.resume, 4294967318, src__services__keyboard_key.LogicalKeyboardKey.turbo, 4295032962, src__services__keyboard_key.LogicalKeyboardKey.sleep, 4295032963, src__services__keyboard_key.LogicalKeyboardKey.wakeUp, 4295033013, src__services__keyboard_key.LogicalKeyboardKey.displayToggleIntExt, 4295426048, src__services__keyboard_key.LogicalKeyboardKey.usbReserved, 4295426049, src__services__keyboard_key.LogicalKeyboardKey.usbErrorRollOver, 4295426050, src__services__keyboard_key.LogicalKeyboardKey.usbPostFail, 4295426051, src__services__keyboard_key.LogicalKeyboardKey.usbErrorUndefined, 97, src__services__keyboard_key.LogicalKeyboardKey.keyA, 98, src__services__keyboard_key.LogicalKeyboardKey.keyB, 99, src__services__keyboard_key.LogicalKeyboardKey.keyC, 100, src__services__keyboard_key.LogicalKeyboardKey.keyD, 101, src__services__keyboard_key.LogicalKeyboardKey.keyE, 102, src__services__keyboard_key.LogicalKeyboardKey.keyF, 103, src__services__keyboard_key.LogicalKeyboardKey.keyG, 104, src__services__keyboard_key.LogicalKeyboardKey.keyH, 105, src__services__keyboard_key.LogicalKeyboardKey.keyI, 106, src__services__keyboard_key.LogicalKeyboardKey.keyJ, 107, src__services__keyboard_key.LogicalKeyboardKey.keyK, 108, src__services__keyboard_key.LogicalKeyboardKey.keyL, 109, src__services__keyboard_key.LogicalKeyboardKey.keyM, 110, src__services__keyboard_key.LogicalKeyboardKey.keyN, 111, src__services__keyboard_key.LogicalKeyboardKey.keyO, 112, src__services__keyboard_key.LogicalKeyboardKey.keyP, 113, src__services__keyboard_key.LogicalKeyboardKey.keyQ, 114, src__services__keyboard_key.LogicalKeyboardKey.keyR, 115, src__services__keyboard_key.LogicalKeyboardKey.keyS, 116, src__services__keyboard_key.LogicalKeyboardKey.keyT, 117, src__services__keyboard_key.LogicalKeyboardKey.keyU, 118, src__services__keyboard_key.LogicalKeyboardKey.keyV, 119, src__services__keyboard_key.LogicalKeyboardKey.keyW, 120, src__services__keyboard_key.LogicalKeyboardKey.keyX, 121, src__services__keyboard_key.LogicalKeyboardKey.keyY, 122, src__services__keyboard_key.LogicalKeyboardKey.keyZ, 49, src__services__keyboard_key.LogicalKeyboardKey.digit1, 50, src__services__keyboard_key.LogicalKeyboardKey.digit2, 51, src__services__keyboard_key.LogicalKeyboardKey.digit3, 52, src__services__keyboard_key.LogicalKeyboardKey.digit4, 53, src__services__keyboard_key.LogicalKeyboardKey.digit5, 54, src__services__keyboard_key.LogicalKeyboardKey.digit6, 55, src__services__keyboard_key.LogicalKeyboardKey.digit7, 56, src__services__keyboard_key.LogicalKeyboardKey.digit8, 57, src__services__keyboard_key.LogicalKeyboardKey.digit9, 48, src__services__keyboard_key.LogicalKeyboardKey.digit0, 4295426088, src__services__keyboard_key.LogicalKeyboardKey.enter, 4295426089, src__services__keyboard_key.LogicalKeyboardKey.escape, 4295426090, src__services__keyboard_key.LogicalKeyboardKey.backspace, 4295426091, src__services__keyboard_key.LogicalKeyboardKey.tab, 32, src__services__keyboard_key.LogicalKeyboardKey.space, 45, src__services__keyboard_key.LogicalKeyboardKey.minus, 61, src__services__keyboard_key.LogicalKeyboardKey.equal, 91, src__services__keyboard_key.LogicalKeyboardKey.bracketLeft, 93, src__services__keyboard_key.LogicalKeyboardKey.bracketRight, 92, src__services__keyboard_key.LogicalKeyboardKey.backslash, 59, src__services__keyboard_key.LogicalKeyboardKey.semicolon, 39, src__services__keyboard_key.LogicalKeyboardKey.quote, 96, src__services__keyboard_key.LogicalKeyboardKey.backquote, 44, src__services__keyboard_key.LogicalKeyboardKey.comma, 46, src__services__keyboard_key.LogicalKeyboardKey.period, 47, src__services__keyboard_key.LogicalKeyboardKey.slash, 4295426105, src__services__keyboard_key.LogicalKeyboardKey.capsLock, 4295426106, src__services__keyboard_key.LogicalKeyboardKey.f1, 4295426107, src__services__keyboard_key.LogicalKeyboardKey.f2, 4295426108, src__services__keyboard_key.LogicalKeyboardKey.f3, 4295426109, src__services__keyboard_key.LogicalKeyboardKey.f4, 4295426110, src__services__keyboard_key.LogicalKeyboardKey.f5, 4295426111, src__services__keyboard_key.LogicalKeyboardKey.f6, 4295426112, src__services__keyboard_key.LogicalKeyboardKey.f7, 4295426113, src__services__keyboard_key.LogicalKeyboardKey.f8, 4295426114, src__services__keyboard_key.LogicalKeyboardKey.f9, 4295426115, src__services__keyboard_key.LogicalKeyboardKey.f10, 4295426116, src__services__keyboard_key.LogicalKeyboardKey.f11, 4295426117, src__services__keyboard_key.LogicalKeyboardKey.f12, 4295426118, src__services__keyboard_key.LogicalKeyboardKey.printScreen, 4295426119, src__services__keyboard_key.LogicalKeyboardKey.scrollLock, 4295426120, src__services__keyboard_key.LogicalKeyboardKey.pause, 4295426121, src__services__keyboard_key.LogicalKeyboardKey.insert, 4295426122, src__services__keyboard_key.LogicalKeyboardKey.home, 4295426123, src__services__keyboard_key.LogicalKeyboardKey.pageUp, 4295426124, src__services__keyboard_key.LogicalKeyboardKey.delete, 4295426125, src__services__keyboard_key.LogicalKeyboardKey.end, 4295426126, src__services__keyboard_key.LogicalKeyboardKey.pageDown, 4295426127, src__services__keyboard_key.LogicalKeyboardKey.arrowRight, 4295426128, src__services__keyboard_key.LogicalKeyboardKey.arrowLeft, 4295426129, src__services__keyboard_key.LogicalKeyboardKey.arrowDown, 4295426130, src__services__keyboard_key.LogicalKeyboardKey.arrowUp, 4295426131, src__services__keyboard_key.LogicalKeyboardKey.numLock, 4295426132, src__services__keyboard_key.LogicalKeyboardKey.numpadDivide, 4295426133, src__services__keyboard_key.LogicalKeyboardKey.numpadMultiply, 4295426134, src__services__keyboard_key.LogicalKeyboardKey.numpadSubtract, 4295426135, src__services__keyboard_key.LogicalKeyboardKey.numpadAdd, 4295426136, src__services__keyboard_key.LogicalKeyboardKey.numpadEnter, 4295426137, src__services__keyboard_key.LogicalKeyboardKey.numpad1, 4295426138, src__services__keyboard_key.LogicalKeyboardKey.numpad2, 4295426139, src__services__keyboard_key.LogicalKeyboardKey.numpad3, 4295426140, src__services__keyboard_key.LogicalKeyboardKey.numpad4, 4295426141, src__services__keyboard_key.LogicalKeyboardKey.numpad5, 4295426142, src__services__keyboard_key.LogicalKeyboardKey.numpad6, 4295426143, src__services__keyboard_key.LogicalKeyboardKey.numpad7, 4295426144, src__services__keyboard_key.LogicalKeyboardKey.numpad8, 4295426145, src__services__keyboard_key.LogicalKeyboardKey.numpad9, 4295426146, src__services__keyboard_key.LogicalKeyboardKey.numpad0, 4295426147, src__services__keyboard_key.LogicalKeyboardKey.numpadDecimal, 4295426148, src__services__keyboard_key.LogicalKeyboardKey.intlBackslash, 4295426149, src__services__keyboard_key.LogicalKeyboardKey.contextMenu, 4295426150, src__services__keyboard_key.LogicalKeyboardKey.power, 4295426151, src__services__keyboard_key.LogicalKeyboardKey.numpadEqual, 4295426152, src__services__keyboard_key.LogicalKeyboardKey.f13, 4295426153, src__services__keyboard_key.LogicalKeyboardKey.f14, 4295426154, src__services__keyboard_key.LogicalKeyboardKey.f15, 4295426155, src__services__keyboard_key.LogicalKeyboardKey.f16, 4295426156, src__services__keyboard_key.LogicalKeyboardKey.f17, 4295426157, src__services__keyboard_key.LogicalKeyboardKey.f18, 4295426158, src__services__keyboard_key.LogicalKeyboardKey.f19, 4295426159, src__services__keyboard_key.LogicalKeyboardKey.f20, 4295426160, src__services__keyboard_key.LogicalKeyboardKey.f21, 4295426161, src__services__keyboard_key.LogicalKeyboardKey.f22, 4295426162, src__services__keyboard_key.LogicalKeyboardKey.f23, 4295426163, src__services__keyboard_key.LogicalKeyboardKey.f24, 4295426164, src__services__keyboard_key.LogicalKeyboardKey.open, 4295426165, src__services__keyboard_key.LogicalKeyboardKey.help, 4295426167, src__services__keyboard_key.LogicalKeyboardKey.select, 4295426169, src__services__keyboard_key.LogicalKeyboardKey.again, 4295426170, src__services__keyboard_key.LogicalKeyboardKey.undo, 4295426171, src__services__keyboard_key.LogicalKeyboardKey.cut, 4295426172, src__services__keyboard_key.LogicalKeyboardKey.copy, 4295426173, src__services__keyboard_key.LogicalKeyboardKey.paste, 4295426174, src__services__keyboard_key.LogicalKeyboardKey.find, 4295426175, src__services__keyboard_key.LogicalKeyboardKey.audioVolumeMute, 4295426176, src__services__keyboard_key.LogicalKeyboardKey.audioVolumeUp, 4295426177, src__services__keyboard_key.LogicalKeyboardKey.audioVolumeDown, 4295426181, src__services__keyboard_key.LogicalKeyboardKey.numpadComma, 4295426183, src__services__keyboard_key.LogicalKeyboardKey.intlRo, 4295426184, src__services__keyboard_key.LogicalKeyboardKey.kanaMode, 4295426185, src__services__keyboard_key.LogicalKeyboardKey.intlYen, 4295426186, src__services__keyboard_key.LogicalKeyboardKey.convert, 4295426187, src__services__keyboard_key.LogicalKeyboardKey.nonConvert, 4295426192, src__services__keyboard_key.LogicalKeyboardKey.lang1, 4295426193, src__services__keyboard_key.LogicalKeyboardKey.lang2, 4295426194, src__services__keyboard_key.LogicalKeyboardKey.lang3, 4295426195, src__services__keyboard_key.LogicalKeyboardKey.lang4, 4295426196, src__services__keyboard_key.LogicalKeyboardKey.lang5, 4295426203, src__services__keyboard_key.LogicalKeyboardKey.abort, 4295426211, src__services__keyboard_key.LogicalKeyboardKey.props, 4295426230, src__services__keyboard_key.LogicalKeyboardKey.numpadParenLeft, 4295426231, src__services__keyboard_key.LogicalKeyboardKey.numpadParenRight, 4295426235, src__services__keyboard_key.LogicalKeyboardKey.numpadBackspace, 4295426256, src__services__keyboard_key.LogicalKeyboardKey.numpadMemoryStore, 4295426257, src__services__keyboard_key.LogicalKeyboardKey.numpadMemoryRecall, 4295426258, src__services__keyboard_key.LogicalKeyboardKey.numpadMemoryClear, 4295426259, src__services__keyboard_key.LogicalKeyboardKey.numpadMemoryAdd, 4295426260, src__services__keyboard_key.LogicalKeyboardKey.numpadMemorySubtract, 4295426263, src__services__keyboard_key.LogicalKeyboardKey.numpadSignChange, 4295426264, src__services__keyboard_key.LogicalKeyboardKey.numpadClear, 4295426265, src__services__keyboard_key.LogicalKeyboardKey.numpadClearEntry, 4295426272, src__services__keyboard_key.LogicalKeyboardKey.controlLeft, 4295426273, src__services__keyboard_key.LogicalKeyboardKey.shiftLeft, 4295426274, src__services__keyboard_key.LogicalKeyboardKey.altLeft, 4295426275, src__services__keyboard_key.LogicalKeyboardKey.metaLeft, 4295426276, src__services__keyboard_key.LogicalKeyboardKey.controlRight, 4295426277, src__services__keyboard_key.LogicalKeyboardKey.shiftRight, 4295426278, src__services__keyboard_key.LogicalKeyboardKey.altRight, 4295426279, src__services__keyboard_key.LogicalKeyboardKey.metaRight, 4295753824, src__services__keyboard_key.LogicalKeyboardKey.info, 4295753825, src__services__keyboard_key.LogicalKeyboardKey.closedCaptionToggle, 4295753839, src__services__keyboard_key.LogicalKeyboardKey.brightnessUp, 4295753840, src__services__keyboard_key.LogicalKeyboardKey.brightnessDown, 4295753842, src__services__keyboard_key.LogicalKeyboardKey.brightnessToggle, 4295753843, src__services__keyboard_key.LogicalKeyboardKey.brightnessMinimum, 4295753844, src__services__keyboard_key.LogicalKeyboardKey.brightnessMaximum, 4295753845, src__services__keyboard_key.LogicalKeyboardKey.brightnessAuto, 4295753859, src__services__keyboard_key.LogicalKeyboardKey.mediaLast, 4295753868, src__services__keyboard_key.LogicalKeyboardKey.launchPhone, 4295753869, src__services__keyboard_key.LogicalKeyboardKey.programGuide, 4295753876, src__services__keyboard_key.LogicalKeyboardKey.exit, 4295753884, src__services__keyboard_key.LogicalKeyboardKey.channelUp, 4295753885, src__services__keyboard_key.LogicalKeyboardKey.channelDown, 4295753904, src__services__keyboard_key.LogicalKeyboardKey.mediaPlay, 4295753906, src__services__keyboard_key.LogicalKeyboardKey.mediaRecord, 4295753907, src__services__keyboard_key.LogicalKeyboardKey.mediaFastForward, 4295753908, src__services__keyboard_key.LogicalKeyboardKey.mediaRewind, 4295753909, src__services__keyboard_key.LogicalKeyboardKey.mediaTrackNext, 4295753910, src__services__keyboard_key.LogicalKeyboardKey.mediaTrackPrevious, 4295753911, src__services__keyboard_key.LogicalKeyboardKey.mediaStop, 4295753912, src__services__keyboard_key.LogicalKeyboardKey.eject, 4295753933, src__services__keyboard_key.LogicalKeyboardKey.mediaPlayPause, 4295753935, src__services__keyboard_key.LogicalKeyboardKey.speechInputToggle, 4295753957, src__services__keyboard_key.LogicalKeyboardKey.bassBoost, 4295754115, src__services__keyboard_key.LogicalKeyboardKey.mediaSelect, 4295754116, src__services__keyboard_key.LogicalKeyboardKey.launchWordProcessor, 4295754118, src__services__keyboard_key.LogicalKeyboardKey.launchSpreadsheet, 4295754122, src__services__keyboard_key.LogicalKeyboardKey.launchMail, 4295754125, src__services__keyboard_key.LogicalKeyboardKey.launchContacts, 4295754126, src__services__keyboard_key.LogicalKeyboardKey.launchCalendar, 4295754130, src__services__keyboard_key.LogicalKeyboardKey.launchApp2, 4295754132, src__services__keyboard_key.LogicalKeyboardKey.launchApp1, 4295754134, src__services__keyboard_key.LogicalKeyboardKey.launchInternetBrowser, 4295754140, src__services__keyboard_key.LogicalKeyboardKey.logOff, 4295754142, src__services__keyboard_key.LogicalKeyboardKey.lockScreen, 4295754143, src__services__keyboard_key.LogicalKeyboardKey.launchControlPanel, 4295754146, src__services__keyboard_key.LogicalKeyboardKey.selectTask, 4295754151, src__services__keyboard_key.LogicalKeyboardKey.launchDocuments, 4295754155, src__services__keyboard_key.LogicalKeyboardKey.spellCheck, 4295754158, src__services__keyboard_key.LogicalKeyboardKey.launchKeyboardLayout, 4295754161, src__services__keyboard_key.LogicalKeyboardKey.launchScreenSaver, 4295754187, src__services__keyboard_key.LogicalKeyboardKey.launchAssistant, 4295754167, src__services__keyboard_key.LogicalKeyboardKey.launchAudioBrowser, 4295754241, src__services__keyboard_key.LogicalKeyboardKey.newKey, 4295754243, src__services__keyboard_key.LogicalKeyboardKey.close, 4295754247, src__services__keyboard_key.LogicalKeyboardKey.save, 4295754248, src__services__keyboard_key.LogicalKeyboardKey.print, 4295754273, src__services__keyboard_key.LogicalKeyboardKey.browserSearch, 4295754275, src__services__keyboard_key.LogicalKeyboardKey.browserHome, 4295754276, src__services__keyboard_key.LogicalKeyboardKey.browserBack, 4295754277, src__services__keyboard_key.LogicalKeyboardKey.browserForward, 4295754278, src__services__keyboard_key.LogicalKeyboardKey.browserStop, 4295754279, src__services__keyboard_key.LogicalKeyboardKey.browserRefresh, 4295754282, src__services__keyboard_key.LogicalKeyboardKey.browserFavorites, 4295754285, src__services__keyboard_key.LogicalKeyboardKey.zoomIn, 4295754286, src__services__keyboard_key.LogicalKeyboardKey.zoomOut, 4295754290, src__services__keyboard_key.LogicalKeyboardKey.zoomToggle, 4295754361, src__services__keyboard_key.LogicalKeyboardKey.redo, 4295754377, src__services__keyboard_key.LogicalKeyboardKey.mailReply, 4295754379, src__services__keyboard_key.LogicalKeyboardKey.mailForward, 4295754380, src__services__keyboard_key.LogicalKeyboardKey.mailSend, 4295754399, src__services__keyboard_key.LogicalKeyboardKey.showAllWindows]);
    }
  });
  src__services__keyboard_key.PhysicalKeyboardKey = class PhysicalKeyboardKey extends src__foundation__diagnostics.Diagnosticable {
    get usbHidUsage() {
      return this[usbHidUsage$];
    }
    set usbHidUsage(value) {
      super.usbHidUsage = value;
    }
    get debugName() {
      return this[debugName$0];
    }
    set debugName(value) {
      super.debugName = value;
    }
    static findKeyByCode(usageCode) {
      return src__services__keyboard_key.PhysicalKeyboardKey._knownPhysicalKeys[$_get](usageCode);
    }
    get hashCode() {
      return dart.hashCode(this.usbHidUsage);
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.equals(dart.runtimeType(other), this[$runtimeType])) {
        return false;
      }
      let typedOther = src__services__keyboard_key.PhysicalKeyboardKey._check(other);
      return this.usbHidUsage == typedOther.usbHidUsage;
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new src__foundation__diagnostics.StringProperty.new("usbHidUsage", "0x" + this.usbHidUsage[$toRadixString](16)[$padLeft](8, "0"), {showName: true}));
      properties.add(new src__foundation__diagnostics.StringProperty.new("debugName", this.debugName, {showName: true, defaultValue: null}));
    }
  };
  (src__services__keyboard_key.PhysicalKeyboardKey.new = function(usbHidUsage, opts) {
    let debugName = opts && 'debugName' in opts ? opts.debugName : null;
    this[usbHidUsage$] = usbHidUsage;
    this[debugName$0] = debugName;
    if (!(usbHidUsage != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/keyboard_key.dart", 1756, 16, "})\n      : assert(u");
    src__services__keyboard_key.PhysicalKeyboardKey.__proto__.new.call(this);
    ;
  }).prototype = src__services__keyboard_key.PhysicalKeyboardKey.prototype;
  dart.addTypeTests(src__services__keyboard_key.PhysicalKeyboardKey);
  const usbHidUsage$ = Symbol("PhysicalKeyboardKey.usbHidUsage");
  const debugName$0 = Symbol("PhysicalKeyboardKey.debugName");
  dart.setLibraryUri(src__services__keyboard_key.PhysicalKeyboardKey, "package:flutter_web/src/services/keyboard_key.dart");
  dart.setFieldSignature(src__services__keyboard_key.PhysicalKeyboardKey, () => ({
    __proto__: dart.getFields(src__services__keyboard_key.PhysicalKeyboardKey.__proto__),
    usbHidUsage: dart.finalFieldType(core.int),
    debugName: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(src__services__keyboard_key.PhysicalKeyboardKey, ['_equals']);
  dart.defineExtensionAccessors(src__services__keyboard_key.PhysicalKeyboardKey, ['hashCode']);
  dart.defineLazy(src__services__keyboard_key.PhysicalKeyboardKey, {
    /*src__services__keyboard_key.PhysicalKeyboardKey.none*/get none() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(0, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "None"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.hyper*/get hyper() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(16, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Hyper"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.superKey*/get superKey() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(17, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Super Key"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.fn*/get fn() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(18, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Fn"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.fnLock*/get fnLock() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(19, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Fn Lock"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.suspend*/get suspend() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(20, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Suspend"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.resume*/get resume() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(21, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Resume"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.turbo*/get turbo() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(22, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Turbo"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.sleep*/get sleep() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(65666, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Sleep"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.wakeUp*/get wakeUp() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(65667, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Wake Up"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.displayToggleIntExt*/get displayToggleIntExt() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(65717, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Display Toggle Int Ext"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.usbReserved*/get usbReserved() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458752, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Usb Reserved"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.usbErrorRollOver*/get usbErrorRollOver() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458753, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Usb Error Roll Over"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.usbPostFail*/get usbPostFail() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458754, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Usb Post Fail"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.usbErrorUndefined*/get usbErrorUndefined() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458755, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Usb Error Undefined"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.keyA*/get keyA() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458756, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Key A"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.keyB*/get keyB() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458757, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Key B"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.keyC*/get keyC() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458758, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Key C"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.keyD*/get keyD() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458759, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Key D"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.keyE*/get keyE() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458760, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Key E"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.keyF*/get keyF() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458761, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Key F"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.keyG*/get keyG() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458762, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Key G"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.keyH*/get keyH() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458763, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Key H"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.keyI*/get keyI() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458764, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Key I"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.keyJ*/get keyJ() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458765, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Key J"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.keyK*/get keyK() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458766, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Key K"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.keyL*/get keyL() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458767, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Key L"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.keyM*/get keyM() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458768, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Key M"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.keyN*/get keyN() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458769, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Key N"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.keyO*/get keyO() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458770, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Key O"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.keyP*/get keyP() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458771, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Key P"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.keyQ*/get keyQ() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458772, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Key Q"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.keyR*/get keyR() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458773, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Key R"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.keyS*/get keyS() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458774, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Key S"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.keyT*/get keyT() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458775, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Key T"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.keyU*/get keyU() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458776, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Key U"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.keyV*/get keyV() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458777, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Key V"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.keyW*/get keyW() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458778, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Key W"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.keyX*/get keyX() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458779, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Key X"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.keyY*/get keyY() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458780, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Key Y"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.keyZ*/get keyZ() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458781, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Key Z"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.digit1*/get digit1() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458782, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Digit 1"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.digit2*/get digit2() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458783, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Digit 2"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.digit3*/get digit3() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458784, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Digit 3"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.digit4*/get digit4() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458785, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Digit 4"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.digit5*/get digit5() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458786, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Digit 5"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.digit6*/get digit6() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458787, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Digit 6"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.digit7*/get digit7() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458788, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Digit 7"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.digit8*/get digit8() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458789, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Digit 8"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.digit9*/get digit9() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458790, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Digit 9"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.digit0*/get digit0() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458791, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Digit 0"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.enter*/get enter() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458792, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Enter"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.escape*/get escape() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458793, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Escape"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.backspace*/get backspace() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458794, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Backspace"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.tab*/get tab() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458795, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Tab"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.space*/get space() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458796, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Space"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.minus*/get minus() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458797, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Minus"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.equal*/get equal() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458798, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Equal"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.bracketLeft*/get bracketLeft() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458799, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Bracket Left"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.bracketRight*/get bracketRight() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458800, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Bracket Right"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.backslash*/get backslash() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458801, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Backslash"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.semicolon*/get semicolon() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458803, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Semicolon"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.quote*/get quote() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458804, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Quote"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.backquote*/get backquote() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458805, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Backquote"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.comma*/get comma() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458806, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Comma"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.period*/get period() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458807, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Period"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.slash*/get slash() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458808, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Slash"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.capsLock*/get capsLock() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458809, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Caps Lock"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.f1*/get f1() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458810, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "F1"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.f2*/get f2() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458811, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "F2"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.f3*/get f3() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458812, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "F3"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.f4*/get f4() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458813, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "F4"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.f5*/get f5() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458814, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "F5"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.f6*/get f6() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458815, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "F6"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.f7*/get f7() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458816, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "F7"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.f8*/get f8() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458817, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "F8"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.f9*/get f9() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458818, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "F9"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.f10*/get f10() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458819, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "F10"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.f11*/get f11() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458820, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "F11"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.f12*/get f12() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458821, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "F12"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.printScreen*/get printScreen() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458822, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Print Screen"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.scrollLock*/get scrollLock() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458823, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Scroll Lock"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.pause*/get pause() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458824, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Pause"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.insert*/get insert() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458825, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Insert"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.home*/get home() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458826, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Home"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.pageUp*/get pageUp() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458827, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Page Up"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.delete*/get delete() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458828, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Delete"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.end*/get end() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458829, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "End"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.pageDown*/get pageDown() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458830, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Page Down"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.arrowRight*/get arrowRight() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458831, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Arrow Right"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.arrowLeft*/get arrowLeft() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458832, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Arrow Left"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.arrowDown*/get arrowDown() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458833, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Arrow Down"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.arrowUp*/get arrowUp() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458834, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Arrow Up"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.numLock*/get numLock() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458835, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Num Lock"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.numpadDivide*/get numpadDivide() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458836, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Numpad Divide"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.numpadMultiply*/get numpadMultiply() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458837, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Numpad Multiply"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.numpadSubtract*/get numpadSubtract() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458838, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Numpad Subtract"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.numpadAdd*/get numpadAdd() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458839, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Numpad Add"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.numpadEnter*/get numpadEnter() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458840, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Numpad Enter"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.numpad1*/get numpad1() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458841, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Numpad 1"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.numpad2*/get numpad2() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458842, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Numpad 2"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.numpad3*/get numpad3() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458843, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Numpad 3"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.numpad4*/get numpad4() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458844, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Numpad 4"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.numpad5*/get numpad5() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458845, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Numpad 5"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.numpad6*/get numpad6() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458846, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Numpad 6"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.numpad7*/get numpad7() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458847, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Numpad 7"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.numpad8*/get numpad8() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458848, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Numpad 8"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.numpad9*/get numpad9() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458849, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Numpad 9"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.numpad0*/get numpad0() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458850, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Numpad 0"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.numpadDecimal*/get numpadDecimal() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458851, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Numpad Decimal"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.intlBackslash*/get intlBackslash() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458852, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Intl Backslash"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.contextMenu*/get contextMenu() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458853, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Context Menu"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.power*/get power() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458854, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Power"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.numpadEqual*/get numpadEqual() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458855, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Numpad Equal"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.f13*/get f13() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458856, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "F13"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.f14*/get f14() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458857, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "F14"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.f15*/get f15() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458858, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "F15"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.f16*/get f16() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458859, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "F16"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.f17*/get f17() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458860, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "F17"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.f18*/get f18() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458861, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "F18"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.f19*/get f19() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458862, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "F19"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.f20*/get f20() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458863, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "F20"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.f21*/get f21() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458864, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "F21"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.f22*/get f22() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458865, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "F22"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.f23*/get f23() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458866, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "F23"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.f24*/get f24() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458867, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "F24"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.open*/get open() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458868, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Open"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.help*/get help() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458869, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Help"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.select*/get select() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458871, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Select"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.again*/get again() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458873, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Again"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.undo*/get undo() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458874, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Undo"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.cut*/get cut() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458875, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Cut"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.copy*/get copy() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458876, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Copy"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.paste*/get paste() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458877, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Paste"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.find*/get find() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458878, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Find"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.audioVolumeMute*/get audioVolumeMute() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458879, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Audio Volume Mute"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.audioVolumeUp*/get audioVolumeUp() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458880, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Audio Volume Up"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.audioVolumeDown*/get audioVolumeDown() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458881, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Audio Volume Down"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.numpadComma*/get numpadComma() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458885, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Numpad Comma"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.intlRo*/get intlRo() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458887, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Intl Ro"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.kanaMode*/get kanaMode() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458888, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Kana Mode"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.intlYen*/get intlYen() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458889, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Intl Yen"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.convert*/get convert() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458890, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Convert"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.nonConvert*/get nonConvert() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458891, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Non Convert"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.lang1*/get lang1() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458896, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Lang 1"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.lang2*/get lang2() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458897, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Lang 2"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.lang3*/get lang3() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458898, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Lang 3"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.lang4*/get lang4() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458899, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Lang 4"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.lang5*/get lang5() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458900, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Lang 5"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.abort*/get abort() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458907, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Abort"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.props*/get props() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458915, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Props"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.numpadParenLeft*/get numpadParenLeft() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458934, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Numpad Paren Left"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.numpadParenRight*/get numpadParenRight() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458935, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Numpad Paren Right"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.numpadBackspace*/get numpadBackspace() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458939, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Numpad Backspace"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.numpadMemoryStore*/get numpadMemoryStore() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458960, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Numpad Memory Store"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.numpadMemoryRecall*/get numpadMemoryRecall() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458961, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Numpad Memory Recall"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.numpadMemoryClear*/get numpadMemoryClear() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458962, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Numpad Memory Clear"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.numpadMemoryAdd*/get numpadMemoryAdd() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458963, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Numpad Memory Add"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.numpadMemorySubtract*/get numpadMemorySubtract() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458964, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Numpad Memory Subtract"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.numpadSignChange*/get numpadSignChange() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458967, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Numpad Sign Change"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.numpadClear*/get numpadClear() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458968, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Numpad Clear"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.numpadClearEntry*/get numpadClearEntry() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458969, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Numpad Clear Entry"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.controlLeft*/get controlLeft() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458976, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Control Left"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.shiftLeft*/get shiftLeft() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458977, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Shift Left"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.altLeft*/get altLeft() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458978, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Alt Left"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.metaLeft*/get metaLeft() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458979, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Meta Left"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.controlRight*/get controlRight() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458980, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Control Right"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.shiftRight*/get shiftRight() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458981, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Shift Right"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.altRight*/get altRight() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458982, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Alt Right"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.metaRight*/get metaRight() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(458983, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Meta Right"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.info*/get info() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(786528, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Info"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.closedCaptionToggle*/get closedCaptionToggle() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(786529, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Closed Caption Toggle"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.brightnessUp*/get brightnessUp() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(786543, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Brightness Up"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.brightnessDown*/get brightnessDown() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(786544, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Brightness Down"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.brightnessToggle*/get brightnessToggle() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(786546, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Brightness Toggle"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.brightnessMinimum*/get brightnessMinimum() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(786547, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Brightness Minimum"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.brightnessMaximum*/get brightnessMaximum() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(786548, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Brightness Maximum"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.brightnessAuto*/get brightnessAuto() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(786549, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Brightness Auto"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.mediaLast*/get mediaLast() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(786563, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Media Last"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.launchPhone*/get launchPhone() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(786572, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Launch Phone"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.programGuide*/get programGuide() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(786573, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Program Guide"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.exit*/get exit() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(786580, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Exit"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.channelUp*/get channelUp() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(786588, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Channel Up"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.channelDown*/get channelDown() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(786589, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Channel Down"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.mediaPlay*/get mediaPlay() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(786608, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Media Play"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.mediaRecord*/get mediaRecord() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(786610, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Media Record"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.mediaFastForward*/get mediaFastForward() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(786611, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Media Fast Forward"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.mediaRewind*/get mediaRewind() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(786612, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Media Rewind"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.mediaTrackNext*/get mediaTrackNext() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(786613, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Media Track Next"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.mediaTrackPrevious*/get mediaTrackPrevious() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(786614, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Media Track Previous"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.mediaStop*/get mediaStop() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(786615, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Media Stop"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.eject*/get eject() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(786616, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Eject"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.mediaPlayPause*/get mediaPlayPause() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(786637, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Media Play Pause"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.speechInputToggle*/get speechInputToggle() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(786639, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Speech Input Toggle"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.bassBoost*/get bassBoost() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(786661, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Bass Boost"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.mediaSelect*/get mediaSelect() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(786819, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Media Select"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.launchWordProcessor*/get launchWordProcessor() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(786820, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Launch Word Processor"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.launchSpreadsheet*/get launchSpreadsheet() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(786822, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Launch Spreadsheet"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.launchMail*/get launchMail() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(786826, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Launch Mail"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.launchContacts*/get launchContacts() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(786829, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Launch Contacts"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.launchCalendar*/get launchCalendar() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(786830, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Launch Calendar"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.launchApp2*/get launchApp2() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(786834, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Launch App2"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.launchApp1*/get launchApp1() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(786836, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Launch App1"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.launchInternetBrowser*/get launchInternetBrowser() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(786838, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Launch Internet Browser"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.logOff*/get logOff() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(786844, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Log Off"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.lockScreen*/get lockScreen() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(786846, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Lock Screen"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.launchControlPanel*/get launchControlPanel() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(786847, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Launch Control Panel"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.selectTask*/get selectTask() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(786850, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Select Task"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.launchDocuments*/get launchDocuments() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(786855, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Launch Documents"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.spellCheck*/get spellCheck() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(786859, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Spell Check"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.launchKeyboardLayout*/get launchKeyboardLayout() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(786862, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Launch Keyboard Layout"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.launchScreenSaver*/get launchScreenSaver() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(786865, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Launch Screen Saver"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.launchAssistant*/get launchAssistant() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(786891, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Launch Assistant"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.launchAudioBrowser*/get launchAudioBrowser() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(786871, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Launch Audio Browser"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.newKey*/get newKey() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(786945, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "New Key"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.close*/get close() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(786947, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Close"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.save*/get save() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(786951, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Save"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.print*/get print() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(786952, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Print"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.browserSearch*/get browserSearch() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(786977, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Browser Search"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.browserHome*/get browserHome() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(786979, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Browser Home"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.browserBack*/get browserBack() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(786980, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Browser Back"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.browserForward*/get browserForward() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(786981, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Browser Forward"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.browserStop*/get browserStop() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(786982, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Browser Stop"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.browserRefresh*/get browserRefresh() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(786983, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Browser Refresh"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.browserFavorites*/get browserFavorites() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(786986, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Browser Favorites"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.zoomIn*/get zoomIn() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(786989, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Zoom In"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.zoomOut*/get zoomOut() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(786990, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Zoom Out"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.zoomToggle*/get zoomToggle() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(786994, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Zoom Toggle"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.redo*/get redo() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(787065, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Redo"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.mailReply*/get mailReply() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(787081, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Mail Reply"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.mailForward*/get mailForward() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(787083, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Mail Forward"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.mailSend*/get mailSend() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(787084, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Mail Send"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey.showAllWindows*/get showAllWindows() {
      return dart.const(new src__services__keyboard_key.PhysicalKeyboardKey.new(787103, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Show All Windows"}));
    },
    /*src__services__keyboard_key.PhysicalKeyboardKey._knownPhysicalKeys*/get _knownPhysicalKeys() {
      return dart.constMap(core.int, src__services__keyboard_key.PhysicalKeyboardKey, [0, src__services__keyboard_key.PhysicalKeyboardKey.none, 16, src__services__keyboard_key.PhysicalKeyboardKey.hyper, 17, src__services__keyboard_key.PhysicalKeyboardKey.superKey, 18, src__services__keyboard_key.PhysicalKeyboardKey.fn, 19, src__services__keyboard_key.PhysicalKeyboardKey.fnLock, 20, src__services__keyboard_key.PhysicalKeyboardKey.suspend, 21, src__services__keyboard_key.PhysicalKeyboardKey.resume, 22, src__services__keyboard_key.PhysicalKeyboardKey.turbo, 65666, src__services__keyboard_key.PhysicalKeyboardKey.sleep, 65667, src__services__keyboard_key.PhysicalKeyboardKey.wakeUp, 65717, src__services__keyboard_key.PhysicalKeyboardKey.displayToggleIntExt, 458752, src__services__keyboard_key.PhysicalKeyboardKey.usbReserved, 458753, src__services__keyboard_key.PhysicalKeyboardKey.usbErrorRollOver, 458754, src__services__keyboard_key.PhysicalKeyboardKey.usbPostFail, 458755, src__services__keyboard_key.PhysicalKeyboardKey.usbErrorUndefined, 458756, src__services__keyboard_key.PhysicalKeyboardKey.keyA, 458757, src__services__keyboard_key.PhysicalKeyboardKey.keyB, 458758, src__services__keyboard_key.PhysicalKeyboardKey.keyC, 458759, src__services__keyboard_key.PhysicalKeyboardKey.keyD, 458760, src__services__keyboard_key.PhysicalKeyboardKey.keyE, 458761, src__services__keyboard_key.PhysicalKeyboardKey.keyF, 458762, src__services__keyboard_key.PhysicalKeyboardKey.keyG, 458763, src__services__keyboard_key.PhysicalKeyboardKey.keyH, 458764, src__services__keyboard_key.PhysicalKeyboardKey.keyI, 458765, src__services__keyboard_key.PhysicalKeyboardKey.keyJ, 458766, src__services__keyboard_key.PhysicalKeyboardKey.keyK, 458767, src__services__keyboard_key.PhysicalKeyboardKey.keyL, 458768, src__services__keyboard_key.PhysicalKeyboardKey.keyM, 458769, src__services__keyboard_key.PhysicalKeyboardKey.keyN, 458770, src__services__keyboard_key.PhysicalKeyboardKey.keyO, 458771, src__services__keyboard_key.PhysicalKeyboardKey.keyP, 458772, src__services__keyboard_key.PhysicalKeyboardKey.keyQ, 458773, src__services__keyboard_key.PhysicalKeyboardKey.keyR, 458774, src__services__keyboard_key.PhysicalKeyboardKey.keyS, 458775, src__services__keyboard_key.PhysicalKeyboardKey.keyT, 458776, src__services__keyboard_key.PhysicalKeyboardKey.keyU, 458777, src__services__keyboard_key.PhysicalKeyboardKey.keyV, 458778, src__services__keyboard_key.PhysicalKeyboardKey.keyW, 458779, src__services__keyboard_key.PhysicalKeyboardKey.keyX, 458780, src__services__keyboard_key.PhysicalKeyboardKey.keyY, 458781, src__services__keyboard_key.PhysicalKeyboardKey.keyZ, 458782, src__services__keyboard_key.PhysicalKeyboardKey.digit1, 458783, src__services__keyboard_key.PhysicalKeyboardKey.digit2, 458784, src__services__keyboard_key.PhysicalKeyboardKey.digit3, 458785, src__services__keyboard_key.PhysicalKeyboardKey.digit4, 458786, src__services__keyboard_key.PhysicalKeyboardKey.digit5, 458787, src__services__keyboard_key.PhysicalKeyboardKey.digit6, 458788, src__services__keyboard_key.PhysicalKeyboardKey.digit7, 458789, src__services__keyboard_key.PhysicalKeyboardKey.digit8, 458790, src__services__keyboard_key.PhysicalKeyboardKey.digit9, 458791, src__services__keyboard_key.PhysicalKeyboardKey.digit0, 458792, src__services__keyboard_key.PhysicalKeyboardKey.enter, 458793, src__services__keyboard_key.PhysicalKeyboardKey.escape, 458794, src__services__keyboard_key.PhysicalKeyboardKey.backspace, 458795, src__services__keyboard_key.PhysicalKeyboardKey.tab, 458796, src__services__keyboard_key.PhysicalKeyboardKey.space, 458797, src__services__keyboard_key.PhysicalKeyboardKey.minus, 458798, src__services__keyboard_key.PhysicalKeyboardKey.equal, 458799, src__services__keyboard_key.PhysicalKeyboardKey.bracketLeft, 458800, src__services__keyboard_key.PhysicalKeyboardKey.bracketRight, 458801, src__services__keyboard_key.PhysicalKeyboardKey.backslash, 458803, src__services__keyboard_key.PhysicalKeyboardKey.semicolon, 458804, src__services__keyboard_key.PhysicalKeyboardKey.quote, 458805, src__services__keyboard_key.PhysicalKeyboardKey.backquote, 458806, src__services__keyboard_key.PhysicalKeyboardKey.comma, 458807, src__services__keyboard_key.PhysicalKeyboardKey.period, 458808, src__services__keyboard_key.PhysicalKeyboardKey.slash, 458809, src__services__keyboard_key.PhysicalKeyboardKey.capsLock, 458810, src__services__keyboard_key.PhysicalKeyboardKey.f1, 458811, src__services__keyboard_key.PhysicalKeyboardKey.f2, 458812, src__services__keyboard_key.PhysicalKeyboardKey.f3, 458813, src__services__keyboard_key.PhysicalKeyboardKey.f4, 458814, src__services__keyboard_key.PhysicalKeyboardKey.f5, 458815, src__services__keyboard_key.PhysicalKeyboardKey.f6, 458816, src__services__keyboard_key.PhysicalKeyboardKey.f7, 458817, src__services__keyboard_key.PhysicalKeyboardKey.f8, 458818, src__services__keyboard_key.PhysicalKeyboardKey.f9, 458819, src__services__keyboard_key.PhysicalKeyboardKey.f10, 458820, src__services__keyboard_key.PhysicalKeyboardKey.f11, 458821, src__services__keyboard_key.PhysicalKeyboardKey.f12, 458822, src__services__keyboard_key.PhysicalKeyboardKey.printScreen, 458823, src__services__keyboard_key.PhysicalKeyboardKey.scrollLock, 458824, src__services__keyboard_key.PhysicalKeyboardKey.pause, 458825, src__services__keyboard_key.PhysicalKeyboardKey.insert, 458826, src__services__keyboard_key.PhysicalKeyboardKey.home, 458827, src__services__keyboard_key.PhysicalKeyboardKey.pageUp, 458828, src__services__keyboard_key.PhysicalKeyboardKey.delete, 458829, src__services__keyboard_key.PhysicalKeyboardKey.end, 458830, src__services__keyboard_key.PhysicalKeyboardKey.pageDown, 458831, src__services__keyboard_key.PhysicalKeyboardKey.arrowRight, 458832, src__services__keyboard_key.PhysicalKeyboardKey.arrowLeft, 458833, src__services__keyboard_key.PhysicalKeyboardKey.arrowDown, 458834, src__services__keyboard_key.PhysicalKeyboardKey.arrowUp, 458835, src__services__keyboard_key.PhysicalKeyboardKey.numLock, 458836, src__services__keyboard_key.PhysicalKeyboardKey.numpadDivide, 458837, src__services__keyboard_key.PhysicalKeyboardKey.numpadMultiply, 458838, src__services__keyboard_key.PhysicalKeyboardKey.numpadSubtract, 458839, src__services__keyboard_key.PhysicalKeyboardKey.numpadAdd, 458840, src__services__keyboard_key.PhysicalKeyboardKey.numpadEnter, 458841, src__services__keyboard_key.PhysicalKeyboardKey.numpad1, 458842, src__services__keyboard_key.PhysicalKeyboardKey.numpad2, 458843, src__services__keyboard_key.PhysicalKeyboardKey.numpad3, 458844, src__services__keyboard_key.PhysicalKeyboardKey.numpad4, 458845, src__services__keyboard_key.PhysicalKeyboardKey.numpad5, 458846, src__services__keyboard_key.PhysicalKeyboardKey.numpad6, 458847, src__services__keyboard_key.PhysicalKeyboardKey.numpad7, 458848, src__services__keyboard_key.PhysicalKeyboardKey.numpad8, 458849, src__services__keyboard_key.PhysicalKeyboardKey.numpad9, 458850, src__services__keyboard_key.PhysicalKeyboardKey.numpad0, 458851, src__services__keyboard_key.PhysicalKeyboardKey.numpadDecimal, 458852, src__services__keyboard_key.PhysicalKeyboardKey.intlBackslash, 458853, src__services__keyboard_key.PhysicalKeyboardKey.contextMenu, 458854, src__services__keyboard_key.PhysicalKeyboardKey.power, 458855, src__services__keyboard_key.PhysicalKeyboardKey.numpadEqual, 458856, src__services__keyboard_key.PhysicalKeyboardKey.f13, 458857, src__services__keyboard_key.PhysicalKeyboardKey.f14, 458858, src__services__keyboard_key.PhysicalKeyboardKey.f15, 458859, src__services__keyboard_key.PhysicalKeyboardKey.f16, 458860, src__services__keyboard_key.PhysicalKeyboardKey.f17, 458861, src__services__keyboard_key.PhysicalKeyboardKey.f18, 458862, src__services__keyboard_key.PhysicalKeyboardKey.f19, 458863, src__services__keyboard_key.PhysicalKeyboardKey.f20, 458864, src__services__keyboard_key.PhysicalKeyboardKey.f21, 458865, src__services__keyboard_key.PhysicalKeyboardKey.f22, 458866, src__services__keyboard_key.PhysicalKeyboardKey.f23, 458867, src__services__keyboard_key.PhysicalKeyboardKey.f24, 458868, src__services__keyboard_key.PhysicalKeyboardKey.open, 458869, src__services__keyboard_key.PhysicalKeyboardKey.help, 458871, src__services__keyboard_key.PhysicalKeyboardKey.select, 458873, src__services__keyboard_key.PhysicalKeyboardKey.again, 458874, src__services__keyboard_key.PhysicalKeyboardKey.undo, 458875, src__services__keyboard_key.PhysicalKeyboardKey.cut, 458876, src__services__keyboard_key.PhysicalKeyboardKey.copy, 458877, src__services__keyboard_key.PhysicalKeyboardKey.paste, 458878, src__services__keyboard_key.PhysicalKeyboardKey.find, 458879, src__services__keyboard_key.PhysicalKeyboardKey.audioVolumeMute, 458880, src__services__keyboard_key.PhysicalKeyboardKey.audioVolumeUp, 458881, src__services__keyboard_key.PhysicalKeyboardKey.audioVolumeDown, 458885, src__services__keyboard_key.PhysicalKeyboardKey.numpadComma, 458887, src__services__keyboard_key.PhysicalKeyboardKey.intlRo, 458888, src__services__keyboard_key.PhysicalKeyboardKey.kanaMode, 458889, src__services__keyboard_key.PhysicalKeyboardKey.intlYen, 458890, src__services__keyboard_key.PhysicalKeyboardKey.convert, 458891, src__services__keyboard_key.PhysicalKeyboardKey.nonConvert, 458896, src__services__keyboard_key.PhysicalKeyboardKey.lang1, 458897, src__services__keyboard_key.PhysicalKeyboardKey.lang2, 458898, src__services__keyboard_key.PhysicalKeyboardKey.lang3, 458899, src__services__keyboard_key.PhysicalKeyboardKey.lang4, 458900, src__services__keyboard_key.PhysicalKeyboardKey.lang5, 458907, src__services__keyboard_key.PhysicalKeyboardKey.abort, 458915, src__services__keyboard_key.PhysicalKeyboardKey.props, 458934, src__services__keyboard_key.PhysicalKeyboardKey.numpadParenLeft, 458935, src__services__keyboard_key.PhysicalKeyboardKey.numpadParenRight, 458939, src__services__keyboard_key.PhysicalKeyboardKey.numpadBackspace, 458960, src__services__keyboard_key.PhysicalKeyboardKey.numpadMemoryStore, 458961, src__services__keyboard_key.PhysicalKeyboardKey.numpadMemoryRecall, 458962, src__services__keyboard_key.PhysicalKeyboardKey.numpadMemoryClear, 458963, src__services__keyboard_key.PhysicalKeyboardKey.numpadMemoryAdd, 458964, src__services__keyboard_key.PhysicalKeyboardKey.numpadMemorySubtract, 458967, src__services__keyboard_key.PhysicalKeyboardKey.numpadSignChange, 458968, src__services__keyboard_key.PhysicalKeyboardKey.numpadClear, 458969, src__services__keyboard_key.PhysicalKeyboardKey.numpadClearEntry, 458976, src__services__keyboard_key.PhysicalKeyboardKey.controlLeft, 458977, src__services__keyboard_key.PhysicalKeyboardKey.shiftLeft, 458978, src__services__keyboard_key.PhysicalKeyboardKey.altLeft, 458979, src__services__keyboard_key.PhysicalKeyboardKey.metaLeft, 458980, src__services__keyboard_key.PhysicalKeyboardKey.controlRight, 458981, src__services__keyboard_key.PhysicalKeyboardKey.shiftRight, 458982, src__services__keyboard_key.PhysicalKeyboardKey.altRight, 458983, src__services__keyboard_key.PhysicalKeyboardKey.metaRight, 786528, src__services__keyboard_key.PhysicalKeyboardKey.info, 786529, src__services__keyboard_key.PhysicalKeyboardKey.closedCaptionToggle, 786543, src__services__keyboard_key.PhysicalKeyboardKey.brightnessUp, 786544, src__services__keyboard_key.PhysicalKeyboardKey.brightnessDown, 786546, src__services__keyboard_key.PhysicalKeyboardKey.brightnessToggle, 786547, src__services__keyboard_key.PhysicalKeyboardKey.brightnessMinimum, 786548, src__services__keyboard_key.PhysicalKeyboardKey.brightnessMaximum, 786549, src__services__keyboard_key.PhysicalKeyboardKey.brightnessAuto, 786563, src__services__keyboard_key.PhysicalKeyboardKey.mediaLast, 786572, src__services__keyboard_key.PhysicalKeyboardKey.launchPhone, 786573, src__services__keyboard_key.PhysicalKeyboardKey.programGuide, 786580, src__services__keyboard_key.PhysicalKeyboardKey.exit, 786588, src__services__keyboard_key.PhysicalKeyboardKey.channelUp, 786589, src__services__keyboard_key.PhysicalKeyboardKey.channelDown, 786608, src__services__keyboard_key.PhysicalKeyboardKey.mediaPlay, 786610, src__services__keyboard_key.PhysicalKeyboardKey.mediaRecord, 786611, src__services__keyboard_key.PhysicalKeyboardKey.mediaFastForward, 786612, src__services__keyboard_key.PhysicalKeyboardKey.mediaRewind, 786613, src__services__keyboard_key.PhysicalKeyboardKey.mediaTrackNext, 786614, src__services__keyboard_key.PhysicalKeyboardKey.mediaTrackPrevious, 786615, src__services__keyboard_key.PhysicalKeyboardKey.mediaStop, 786616, src__services__keyboard_key.PhysicalKeyboardKey.eject, 786637, src__services__keyboard_key.PhysicalKeyboardKey.mediaPlayPause, 786639, src__services__keyboard_key.PhysicalKeyboardKey.speechInputToggle, 786661, src__services__keyboard_key.PhysicalKeyboardKey.bassBoost, 786819, src__services__keyboard_key.PhysicalKeyboardKey.mediaSelect, 786820, src__services__keyboard_key.PhysicalKeyboardKey.launchWordProcessor, 786822, src__services__keyboard_key.PhysicalKeyboardKey.launchSpreadsheet, 786826, src__services__keyboard_key.PhysicalKeyboardKey.launchMail, 786829, src__services__keyboard_key.PhysicalKeyboardKey.launchContacts, 786830, src__services__keyboard_key.PhysicalKeyboardKey.launchCalendar, 786834, src__services__keyboard_key.PhysicalKeyboardKey.launchApp2, 786836, src__services__keyboard_key.PhysicalKeyboardKey.launchApp1, 786838, src__services__keyboard_key.PhysicalKeyboardKey.launchInternetBrowser, 786844, src__services__keyboard_key.PhysicalKeyboardKey.logOff, 786846, src__services__keyboard_key.PhysicalKeyboardKey.lockScreen, 786847, src__services__keyboard_key.PhysicalKeyboardKey.launchControlPanel, 786850, src__services__keyboard_key.PhysicalKeyboardKey.selectTask, 786855, src__services__keyboard_key.PhysicalKeyboardKey.launchDocuments, 786859, src__services__keyboard_key.PhysicalKeyboardKey.spellCheck, 786862, src__services__keyboard_key.PhysicalKeyboardKey.launchKeyboardLayout, 786865, src__services__keyboard_key.PhysicalKeyboardKey.launchScreenSaver, 786891, src__services__keyboard_key.PhysicalKeyboardKey.launchAssistant, 786871, src__services__keyboard_key.PhysicalKeyboardKey.launchAudioBrowser, 786945, src__services__keyboard_key.PhysicalKeyboardKey.newKey, 786947, src__services__keyboard_key.PhysicalKeyboardKey.close, 786951, src__services__keyboard_key.PhysicalKeyboardKey.save, 786952, src__services__keyboard_key.PhysicalKeyboardKey.print, 786977, src__services__keyboard_key.PhysicalKeyboardKey.browserSearch, 786979, src__services__keyboard_key.PhysicalKeyboardKey.browserHome, 786980, src__services__keyboard_key.PhysicalKeyboardKey.browserBack, 786981, src__services__keyboard_key.PhysicalKeyboardKey.browserForward, 786982, src__services__keyboard_key.PhysicalKeyboardKey.browserStop, 786983, src__services__keyboard_key.PhysicalKeyboardKey.browserRefresh, 786986, src__services__keyboard_key.PhysicalKeyboardKey.browserFavorites, 786989, src__services__keyboard_key.PhysicalKeyboardKey.zoomIn, 786990, src__services__keyboard_key.PhysicalKeyboardKey.zoomOut, 786994, src__services__keyboard_key.PhysicalKeyboardKey.zoomToggle, 787065, src__services__keyboard_key.PhysicalKeyboardKey.redo, 787081, src__services__keyboard_key.PhysicalKeyboardKey.mailReply, 787083, src__services__keyboard_key.PhysicalKeyboardKey.mailForward, 787084, src__services__keyboard_key.PhysicalKeyboardKey.mailSend, 787103, src__services__keyboard_key.PhysicalKeyboardKey.showAllWindows]);
    }
  });
  const _isLeftRightModifierPressed$ = dart.privateName(src__services__raw_keyboard_macos, "_isLeftRightModifierPressed");
  src__services__raw_keyboard_macos.RawKeyEventDataMacOs = class RawKeyEventDataMacOs extends src__services__raw_keyboard.RawKeyEventData {
    get characters() {
      return this[characters$];
    }
    set characters(value) {
      super.characters = value;
    }
    get charactersIgnoringModifiers() {
      return this[charactersIgnoringModifiers$];
    }
    set charactersIgnoringModifiers(value) {
      super.charactersIgnoringModifiers = value;
    }
    get keyCode() {
      return this[keyCode$0];
    }
    set keyCode(value) {
      super.keyCode = value;
    }
    get modifiers() {
      return this[modifiers$1];
    }
    set modifiers(value) {
      super.modifiers = value;
    }
    get keyLabel() {
      return this.charactersIgnoringModifiers[$isEmpty] ? null : this.charactersIgnoringModifiers;
    }
    get physicalKey() {
      let t16;
      t16 = src__services__keyboard_maps.kMacOsToPhysicalKey[$_get](this.keyCode);
      return t16 == null ? src__services__keyboard_key.PhysicalKeyboardKey.none : t16;
    }
    get logicalKey() {
      let t16, t16$;
      let numPadKey = src__services__keyboard_maps.kMacOsNumPadMap[$_get](this.keyCode);
      if (numPadKey != null) {
        return numPadKey;
      }
      if (this.keyLabel != null && !dart.test(src__services__keyboard_key.LogicalKeyboardKey.isControlCharacter(this.keyLabel))) {
        if (!(this.charactersIgnoringModifiers.length <= 2)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/raw_keyboard_macos.dart", 83, 14, "charactersIgnoringModifiers.length <= 2");
        let codeUnit = this.charactersIgnoringModifiers[$codeUnitAt](0);
        if (this.charactersIgnoringModifiers.length === 2) {
          let secondCode = this.charactersIgnoringModifiers[$codeUnitAt](1);
          codeUnit = (codeUnit << 16 | secondCode) >>> 0;
        }
        let keyId = (dart.notNull(src__services__keyboard_key.LogicalKeyboardKey.unicodePlane) | (codeUnit & dart.notNull(src__services__keyboard_key.LogicalKeyboardKey.valueMask)) >>> 0) >>> 0;
        t16 = src__services__keyboard_key.LogicalKeyboardKey.findKeyByKeyId(keyId);
        return t16 == null ? new src__services__keyboard_key.LogicalKeyboardKey.new(keyId, {keyLabel: this.keyLabel, debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Key " + this.keyLabel[$toUpperCase]()}) : t16;
      }
      let macOsKeyIdPlane = 21474836480;
      if (!dart.equals(this.physicalKey, src__services__keyboard_key.PhysicalKeyboardKey.none)) {
        let keyId = (dart.notNull(this.physicalKey.usbHidUsage) | dart.notNull(src__services__keyboard_key.LogicalKeyboardKey.hidPlane)) >>> 0;
        t16$ = src__services__keyboard_key.LogicalKeyboardKey.findKeyByKeyId(keyId);
        return t16$ == null ? new src__services__keyboard_key.LogicalKeyboardKey.new(keyId, {keyLabel: this.physicalKey.debugName, debugName: this.physicalKey.debugName}) : t16$;
      }
      return new src__services__keyboard_key.LogicalKeyboardKey.new((macOsKeyIdPlane | dart.notNull(this.keyCode) | dart.notNull(src__services__keyboard_key.LogicalKeyboardKey.autogeneratedMask)) >>> 0, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Unknown macOS key code " + dart.str(this.keyCode)});
    }
    [_isLeftRightModifierPressed$](side, anyMask, leftMask, rightMask) {
      if ((dart.notNull(this.modifiers) & dart.notNull(anyMask)) === 0) {
        return false;
      }
      switch (side) {
        case src__services__raw_keyboard.KeyboardSide.any:
        {
          return true;
        }
        case src__services__raw_keyboard.KeyboardSide.all:
        {
          return (dart.notNull(this.modifiers) & dart.notNull(leftMask)) !== 0 && (dart.notNull(this.modifiers) & dart.notNull(rightMask)) !== 0;
        }
        case src__services__raw_keyboard.KeyboardSide.left:
        {
          return (dart.notNull(this.modifiers) & dart.notNull(leftMask)) !== 0;
        }
        case src__services__raw_keyboard.KeyboardSide.right:
        {
          return (dart.notNull(this.modifiers) & dart.notNull(rightMask)) !== 0;
        }
      }
      return false;
    }
    isModifierPressed(key, opts) {
      let side = opts && 'side' in opts ? opts.side : src__services__raw_keyboard.KeyboardSide.any;
      let independentModifier = (dart.notNull(this.modifiers) & dart.notNull(src__services__raw_keyboard_macos.RawKeyEventDataMacOs.deviceIndependentMask)) >>> 0;
      switch (key) {
        case src__services__raw_keyboard.ModifierKey.controlModifier:
        {
          return this[_isLeftRightModifierPressed$](side, (independentModifier & dart.notNull(src__services__raw_keyboard_macos.RawKeyEventDataMacOs.modifierControl)) >>> 0, src__services__raw_keyboard_macos.RawKeyEventDataMacOs.modifierLeftControl, src__services__raw_keyboard_macos.RawKeyEventDataMacOs.modifierRightControl);
        }
        case src__services__raw_keyboard.ModifierKey.shiftModifier:
        {
          return this[_isLeftRightModifierPressed$](side, (independentModifier & dart.notNull(src__services__raw_keyboard_macos.RawKeyEventDataMacOs.modifierShift)) >>> 0, src__services__raw_keyboard_macos.RawKeyEventDataMacOs.modifierLeftShift, src__services__raw_keyboard_macos.RawKeyEventDataMacOs.modifierRightShift);
        }
        case src__services__raw_keyboard.ModifierKey.altModifier:
        {
          return this[_isLeftRightModifierPressed$](side, (independentModifier & dart.notNull(src__services__raw_keyboard_macos.RawKeyEventDataMacOs.modifierOption)) >>> 0, src__services__raw_keyboard_macos.RawKeyEventDataMacOs.modifierLeftOption, src__services__raw_keyboard_macos.RawKeyEventDataMacOs.modifierRightOption);
        }
        case src__services__raw_keyboard.ModifierKey.metaModifier:
        {
          return this[_isLeftRightModifierPressed$](side, (independentModifier & dart.notNull(src__services__raw_keyboard_macos.RawKeyEventDataMacOs.modifierCommand)) >>> 0, src__services__raw_keyboard_macos.RawKeyEventDataMacOs.modifierLeftCommand, src__services__raw_keyboard_macos.RawKeyEventDataMacOs.modifierRightCommand);
        }
        case src__services__raw_keyboard.ModifierKey.capsLockModifier:
        {
          return (independentModifier & dart.notNull(src__services__raw_keyboard_macos.RawKeyEventDataMacOs.modifierCapsLock)) !== 0;
        }
        case src__services__raw_keyboard.ModifierKey.numLockModifier:
        {
          return (independentModifier & dart.notNull(src__services__raw_keyboard_macos.RawKeyEventDataMacOs.modifierNumericPad)) !== 0;
        }
        case src__services__raw_keyboard.ModifierKey.functionModifier:
        {
          return (independentModifier & dart.notNull(src__services__raw_keyboard_macos.RawKeyEventDataMacOs.modifierFunction)) !== 0;
        }
        case src__services__raw_keyboard.ModifierKey.symbolModifier:
        case src__services__raw_keyboard.ModifierKey.scrollLockModifier:
        {
          return false;
        }
      }
      return false;
    }
    getModifierSide(key) {
      const findSide = (leftMask, rightMask) => {
        let combinedMask = (dart.notNull(leftMask) | dart.notNull(rightMask)) >>> 0;
        let combined = (dart.notNull(this.modifiers) & combinedMask) >>> 0;
        if (combined === leftMask) {
          return src__services__raw_keyboard.KeyboardSide.left;
        } else if (combined === rightMask) {
          return src__services__raw_keyboard.KeyboardSide.right;
        } else if (combined === combinedMask) {
          return src__services__raw_keyboard.KeyboardSide.all;
        }
        return null;
      };
      dart.fn(findSide, intAndintToKeyboardSide());
      switch (key) {
        case src__services__raw_keyboard.ModifierKey.controlModifier:
        {
          return findSide(src__services__raw_keyboard_macos.RawKeyEventDataMacOs.modifierLeftControl, src__services__raw_keyboard_macos.RawKeyEventDataMacOs.modifierRightControl);
        }
        case src__services__raw_keyboard.ModifierKey.shiftModifier:
        {
          return findSide(src__services__raw_keyboard_macos.RawKeyEventDataMacOs.modifierLeftShift, src__services__raw_keyboard_macos.RawKeyEventDataMacOs.modifierRightShift);
        }
        case src__services__raw_keyboard.ModifierKey.altModifier:
        {
          return findSide(src__services__raw_keyboard_macos.RawKeyEventDataMacOs.modifierLeftOption, src__services__raw_keyboard_macos.RawKeyEventDataMacOs.modifierRightOption);
        }
        case src__services__raw_keyboard.ModifierKey.metaModifier:
        {
          return findSide(src__services__raw_keyboard_macos.RawKeyEventDataMacOs.modifierLeftCommand, src__services__raw_keyboard_macos.RawKeyEventDataMacOs.modifierRightCommand);
        }
        case src__services__raw_keyboard.ModifierKey.capsLockModifier:
        case src__services__raw_keyboard.ModifierKey.numLockModifier:
        case src__services__raw_keyboard.ModifierKey.scrollLockModifier:
        case src__services__raw_keyboard.ModifierKey.functionModifier:
        case src__services__raw_keyboard.ModifierKey.symbolModifier:
        {
          return src__services__raw_keyboard.KeyboardSide.all;
        }
      }
      if (!false) dart.assertFailed("Not handling " + dart.str(key) + " type properly.", "org-dartlang-app:///packages/flutter_web/src/services/raw_keyboard_macos.dart", 197, 12, "false");
      return null;
    }
    toString() {
      return dart.str(this[$runtimeType]) + "(keyLabel: " + dart.str(this.keyLabel) + ", keyCode: " + dart.str(this.keyCode) + ", characters: " + dart.str(this.characters) + "," + " unmodifiedCharacters: " + dart.str(this.charactersIgnoringModifiers) + ", modifiers: " + dart.str(this.modifiers) + ", " + "modifiers down: " + dart.str(this.modifiersPressed) + ")";
    }
  };
  (src__services__raw_keyboard_macos.RawKeyEventDataMacOs.new = function(opts) {
    let characters = opts && 'characters' in opts ? opts.characters : "";
    let charactersIgnoringModifiers = opts && 'charactersIgnoringModifiers' in opts ? opts.charactersIgnoringModifiers : "";
    let keyCode = opts && 'keyCode' in opts ? opts.keyCode : 0;
    let modifiers = opts && 'modifiers' in opts ? opts.modifiers : 0;
    this[characters$] = characters;
    this[charactersIgnoringModifiers$] = charactersIgnoringModifiers;
    this[keyCode$0] = keyCode;
    this[modifiers$1] = modifiers;
    if (!(characters != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/raw_keyboard_macos.dart", 30, 15, "characters != null");
    if (!(charactersIgnoringModifiers != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/raw_keyboard_macos.dart", 31, 15, "charactersIgnoringModifiers != null");
    if (!(keyCode != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/raw_keyboard_macos.dart", 32, 15, "keyCode != null");
    if (!(modifiers != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/raw_keyboard_macos.dart", 33, 15, "modifiers != null");
    src__services__raw_keyboard_macos.RawKeyEventDataMacOs.__proto__.new.call(this);
    ;
  }).prototype = src__services__raw_keyboard_macos.RawKeyEventDataMacOs.prototype;
  dart.addTypeTests(src__services__raw_keyboard_macos.RawKeyEventDataMacOs);
  const characters$ = Symbol("RawKeyEventDataMacOs.characters");
  const charactersIgnoringModifiers$ = Symbol("RawKeyEventDataMacOs.charactersIgnoringModifiers");
  const keyCode$0 = Symbol("RawKeyEventDataMacOs.keyCode");
  const modifiers$1 = Symbol("RawKeyEventDataMacOs.modifiers");
  dart.setMethodSignature(src__services__raw_keyboard_macos.RawKeyEventDataMacOs, () => ({
    __proto__: dart.getMethods(src__services__raw_keyboard_macos.RawKeyEventDataMacOs.__proto__),
    [_isLeftRightModifierPressed$]: dart.fnType(core.bool, [src__services__raw_keyboard.KeyboardSide, core.int, core.int, core.int]),
    isModifierPressed: dart.fnType(core.bool, [src__services__raw_keyboard.ModifierKey], {side: src__services__raw_keyboard.KeyboardSide}),
    getModifierSide: dart.fnType(src__services__raw_keyboard.KeyboardSide, [src__services__raw_keyboard.ModifierKey])
  }));
  dart.setGetterSignature(src__services__raw_keyboard_macos.RawKeyEventDataMacOs, () => ({
    __proto__: dart.getGetters(src__services__raw_keyboard_macos.RawKeyEventDataMacOs.__proto__),
    keyLabel: core.String,
    physicalKey: src__services__keyboard_key.PhysicalKeyboardKey,
    logicalKey: src__services__keyboard_key.LogicalKeyboardKey
  }));
  dart.setLibraryUri(src__services__raw_keyboard_macos.RawKeyEventDataMacOs, "package:flutter_web/src/services/raw_keyboard_macos.dart");
  dart.setFieldSignature(src__services__raw_keyboard_macos.RawKeyEventDataMacOs, () => ({
    __proto__: dart.getFields(src__services__raw_keyboard_macos.RawKeyEventDataMacOs.__proto__),
    characters: dart.finalFieldType(core.String),
    charactersIgnoringModifiers: dart.finalFieldType(core.String),
    keyCode: dart.finalFieldType(core.int),
    modifiers: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(src__services__raw_keyboard_macos.RawKeyEventDataMacOs, ['toString']);
  dart.defineLazy(src__services__raw_keyboard_macos.RawKeyEventDataMacOs, {
    /*src__services__raw_keyboard_macos.RawKeyEventDataMacOs.modifierCapsLock*/get modifierCapsLock() {
      return 65536;
    },
    /*src__services__raw_keyboard_macos.RawKeyEventDataMacOs.modifierShift*/get modifierShift() {
      return 131072;
    },
    /*src__services__raw_keyboard_macos.RawKeyEventDataMacOs.modifierLeftShift*/get modifierLeftShift() {
      return 2;
    },
    /*src__services__raw_keyboard_macos.RawKeyEventDataMacOs.modifierRightShift*/get modifierRightShift() {
      return 4;
    },
    /*src__services__raw_keyboard_macos.RawKeyEventDataMacOs.modifierControl*/get modifierControl() {
      return 262144;
    },
    /*src__services__raw_keyboard_macos.RawKeyEventDataMacOs.modifierLeftControl*/get modifierLeftControl() {
      return 1;
    },
    /*src__services__raw_keyboard_macos.RawKeyEventDataMacOs.modifierRightControl*/get modifierRightControl() {
      return 8192;
    },
    /*src__services__raw_keyboard_macos.RawKeyEventDataMacOs.modifierOption*/get modifierOption() {
      return 524288;
    },
    /*src__services__raw_keyboard_macos.RawKeyEventDataMacOs.modifierLeftOption*/get modifierLeftOption() {
      return 32;
    },
    /*src__services__raw_keyboard_macos.RawKeyEventDataMacOs.modifierRightOption*/get modifierRightOption() {
      return 64;
    },
    /*src__services__raw_keyboard_macos.RawKeyEventDataMacOs.modifierCommand*/get modifierCommand() {
      return 1048576;
    },
    /*src__services__raw_keyboard_macos.RawKeyEventDataMacOs.modifierLeftCommand*/get modifierLeftCommand() {
      return 8;
    },
    /*src__services__raw_keyboard_macos.RawKeyEventDataMacOs.modifierRightCommand*/get modifierRightCommand() {
      return 16;
    },
    /*src__services__raw_keyboard_macos.RawKeyEventDataMacOs.modifierNumericPad*/get modifierNumericPad() {
      return 2097152;
    },
    /*src__services__raw_keyboard_macos.RawKeyEventDataMacOs.modifierHelp*/get modifierHelp() {
      return 4194304;
    },
    /*src__services__raw_keyboard_macos.RawKeyEventDataMacOs.modifierFunction*/get modifierFunction() {
      return 8388608;
    },
    /*src__services__raw_keyboard_macos.RawKeyEventDataMacOs.deviceIndependentMask*/get deviceIndependentMask() {
      return 4294901760;
    }
  });
  const _isLeftRightModifierPressed$0 = dart.privateName(src__services__raw_keyboard_android, "_isLeftRightModifierPressed");
  src__services__raw_keyboard_android.RawKeyEventDataAndroid = class RawKeyEventDataAndroid extends src__services__raw_keyboard.RawKeyEventData {
    get flags() {
      return this[flags$];
    }
    set flags(value) {
      super.flags = value;
    }
    get codePoint() {
      return this[codePoint$1];
    }
    set codePoint(value) {
      super.codePoint = value;
    }
    get plainCodePoint() {
      return this[plainCodePoint$];
    }
    set plainCodePoint(value) {
      super.plainCodePoint = value;
    }
    get keyCode() {
      return this[keyCode$1];
    }
    set keyCode(value) {
      super.keyCode = value;
    }
    get scanCode() {
      return this[scanCode$0];
    }
    set scanCode(value) {
      super.scanCode = value;
    }
    get metaState() {
      return this[metaState$];
    }
    set metaState(value) {
      super.metaState = value;
    }
    get keyLabel() {
      return this.plainCodePoint === 0 ? null : core.String.fromCharCode((dart.notNull(this.plainCodePoint) & dart.notNull(src__services__raw_keyboard_android._kCombiningCharacterMask)) >>> 0);
    }
    get physicalKey() {
      let t16;
      t16 = src__services__keyboard_maps.kAndroidToPhysicalKey[$_get](this.scanCode);
      return t16 == null ? src__services__keyboard_key.PhysicalKeyboardKey.none : t16;
    }
    get logicalKey() {
      let t16;
      let numPadKey = src__services__keyboard_maps.kAndroidNumPadMap[$_get](this.keyCode);
      if (numPadKey != null) {
        return numPadKey;
      }
      if (this.keyLabel != null && this.keyLabel[$isNotEmpty] && !dart.test(src__services__keyboard_key.LogicalKeyboardKey.isControlCharacter(this.keyLabel))) {
        let combinedCodePoint = (dart.notNull(this.plainCodePoint) & dart.notNull(src__services__raw_keyboard_android._kCombiningCharacterMask)) >>> 0;
        let keyId = (dart.notNull(src__services__keyboard_key.LogicalKeyboardKey.unicodePlane) | (combinedCodePoint & dart.notNull(src__services__keyboard_key.LogicalKeyboardKey.valueMask)) >>> 0) >>> 0;
        t16 = src__services__keyboard_key.LogicalKeyboardKey.findKeyByKeyId(keyId);
        return t16 == null ? new src__services__keyboard_key.LogicalKeyboardKey.new(keyId, {keyLabel: this.keyLabel, debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Key " + this.keyLabel[$toUpperCase]()}) : t16;
      }
      let newKey = src__services__keyboard_maps.kAndroidToLogicalKey[$_get](this.keyCode);
      if (newKey != null) {
        return newKey;
      }
      let androidKeyIdPlane = 8589934592;
      newKey == null ? newKey = new src__services__keyboard_key.LogicalKeyboardKey.new((androidKeyIdPlane | dart.notNull(this.keyCode) | dart.notNull(src__services__keyboard_key.LogicalKeyboardKey.autogeneratedMask)) >>> 0, {debugName: dart.test(src__foundation__constants.kReleaseMode) ? null : "Unknown Android key code " + dart.str(this.keyCode)}) : null;
      return newKey;
    }
    [_isLeftRightModifierPressed$0](side, anyMask, leftMask, rightMask) {
      if ((dart.notNull(this.metaState) & dart.notNull(anyMask)) === 0) {
        return false;
      }
      switch (side) {
        case src__services__raw_keyboard.KeyboardSide.any:
        {
          return true;
        }
        case src__services__raw_keyboard.KeyboardSide.all:
        {
          return (dart.notNull(this.metaState) & dart.notNull(leftMask)) !== 0 && (dart.notNull(this.metaState) & dart.notNull(rightMask)) !== 0;
        }
        case src__services__raw_keyboard.KeyboardSide.left:
        {
          return (dart.notNull(this.metaState) & dart.notNull(leftMask)) !== 0;
        }
        case src__services__raw_keyboard.KeyboardSide.right:
        {
          return (dart.notNull(this.metaState) & dart.notNull(rightMask)) !== 0;
        }
      }
      return false;
    }
    isModifierPressed(key, opts) {
      let side = opts && 'side' in opts ? opts.side : src__services__raw_keyboard.KeyboardSide.any;
      if (!(side != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/raw_keyboard_android.dart", 175, 12, "side != null");
      switch (key) {
        case src__services__raw_keyboard.ModifierKey.controlModifier:
        {
          return this[_isLeftRightModifierPressed$0](side, src__services__raw_keyboard_android.RawKeyEventDataAndroid.modifierControl, src__services__raw_keyboard_android.RawKeyEventDataAndroid.modifierLeftControl, src__services__raw_keyboard_android.RawKeyEventDataAndroid.modifierRightControl);
        }
        case src__services__raw_keyboard.ModifierKey.shiftModifier:
        {
          return this[_isLeftRightModifierPressed$0](side, src__services__raw_keyboard_android.RawKeyEventDataAndroid.modifierShift, src__services__raw_keyboard_android.RawKeyEventDataAndroid.modifierLeftShift, src__services__raw_keyboard_android.RawKeyEventDataAndroid.modifierRightShift);
        }
        case src__services__raw_keyboard.ModifierKey.altModifier:
        {
          return this[_isLeftRightModifierPressed$0](side, src__services__raw_keyboard_android.RawKeyEventDataAndroid.modifierAlt, src__services__raw_keyboard_android.RawKeyEventDataAndroid.modifierLeftAlt, src__services__raw_keyboard_android.RawKeyEventDataAndroid.modifierRightAlt);
        }
        case src__services__raw_keyboard.ModifierKey.metaModifier:
        {
          return this[_isLeftRightModifierPressed$0](side, src__services__raw_keyboard_android.RawKeyEventDataAndroid.modifierMeta, src__services__raw_keyboard_android.RawKeyEventDataAndroid.modifierLeftMeta, src__services__raw_keyboard_android.RawKeyEventDataAndroid.modifierRightMeta);
        }
        case src__services__raw_keyboard.ModifierKey.capsLockModifier:
        {
          return (dart.notNull(this.metaState) & dart.notNull(src__services__raw_keyboard_android.RawKeyEventDataAndroid.modifierCapsLock)) !== 0;
        }
        case src__services__raw_keyboard.ModifierKey.numLockModifier:
        {
          return (dart.notNull(this.metaState) & dart.notNull(src__services__raw_keyboard_android.RawKeyEventDataAndroid.modifierNumLock)) !== 0;
        }
        case src__services__raw_keyboard.ModifierKey.scrollLockModifier:
        {
          return (dart.notNull(this.metaState) & dart.notNull(src__services__raw_keyboard_android.RawKeyEventDataAndroid.modifierScrollLock)) !== 0;
        }
        case src__services__raw_keyboard.ModifierKey.functionModifier:
        {
          return (dart.notNull(this.metaState) & dart.notNull(src__services__raw_keyboard_android.RawKeyEventDataAndroid.modifierFunction)) !== 0;
        }
        case src__services__raw_keyboard.ModifierKey.symbolModifier:
        {
          return (dart.notNull(this.metaState) & dart.notNull(src__services__raw_keyboard_android.RawKeyEventDataAndroid.modifierSym)) !== 0;
        }
      }
      return false;
    }
    getModifierSide(key) {
      const findSide = (leftMask, rightMask) => {
        let combinedMask = (dart.notNull(leftMask) | dart.notNull(rightMask)) >>> 0;
        let combined = (dart.notNull(this.metaState) & combinedMask) >>> 0;
        if (combined === leftMask) {
          return src__services__raw_keyboard.KeyboardSide.left;
        } else if (combined === rightMask) {
          return src__services__raw_keyboard.KeyboardSide.right;
        } else if (combined === combinedMask) {
          return src__services__raw_keyboard.KeyboardSide.all;
        }
        return null;
      };
      dart.fn(findSide, intAndintToKeyboardSide());
      switch (key) {
        case src__services__raw_keyboard.ModifierKey.controlModifier:
        {
          return findSide(src__services__raw_keyboard_android.RawKeyEventDataAndroid.modifierLeftControl, src__services__raw_keyboard_android.RawKeyEventDataAndroid.modifierRightControl);
        }
        case src__services__raw_keyboard.ModifierKey.shiftModifier:
        {
          return findSide(src__services__raw_keyboard_android.RawKeyEventDataAndroid.modifierLeftShift, src__services__raw_keyboard_android.RawKeyEventDataAndroid.modifierRightShift);
        }
        case src__services__raw_keyboard.ModifierKey.altModifier:
        {
          return findSide(src__services__raw_keyboard_android.RawKeyEventDataAndroid.modifierLeftAlt, src__services__raw_keyboard_android.RawKeyEventDataAndroid.modifierRightAlt);
        }
        case src__services__raw_keyboard.ModifierKey.metaModifier:
        {
          return findSide(src__services__raw_keyboard_android.RawKeyEventDataAndroid.modifierLeftMeta, src__services__raw_keyboard_android.RawKeyEventDataAndroid.modifierRightMeta);
        }
        case src__services__raw_keyboard.ModifierKey.capsLockModifier:
        case src__services__raw_keyboard.ModifierKey.numLockModifier:
        case src__services__raw_keyboard.ModifierKey.scrollLockModifier:
        case src__services__raw_keyboard.ModifierKey.functionModifier:
        case src__services__raw_keyboard.ModifierKey.symbolModifier:
        {
          return src__services__raw_keyboard.KeyboardSide.all;
        }
      }
      if (!false) dart.assertFailed("Not handling " + dart.str(key) + " type properly.", "org-dartlang-app:///packages/flutter_web/src/services/raw_keyboard_android.dart", 231, 12, "false");
      return null;
    }
    toString() {
      return dart.str(this[$runtimeType]) + "(keyLabel: " + dart.str(this.keyLabel) + " flags: " + dart.str(this.flags) + ", codePoint: " + dart.str(this.codePoint) + ", " + "keyCode: " + dart.str(this.keyCode) + ", scanCode: " + dart.str(this.scanCode) + ", metaState: " + dart.str(this.metaState) + ", " + "modifiers down: " + dart.str(this.modifiersPressed) + ")";
    }
  };
  (src__services__raw_keyboard_android.RawKeyEventDataAndroid.new = function(opts) {
    let flags = opts && 'flags' in opts ? opts.flags : 0;
    let codePoint = opts && 'codePoint' in opts ? opts.codePoint : 0;
    let plainCodePoint = opts && 'plainCodePoint' in opts ? opts.plainCodePoint : 0;
    let keyCode = opts && 'keyCode' in opts ? opts.keyCode : 0;
    let scanCode = opts && 'scanCode' in opts ? opts.scanCode : 0;
    let metaState = opts && 'metaState' in opts ? opts.metaState : 0;
    this[flags$] = flags;
    this[codePoint$1] = codePoint;
    this[plainCodePoint$] = plainCodePoint;
    this[keyCode$1] = keyCode;
    this[scanCode$0] = scanCode;
    this[metaState$] = metaState;
    if (!(flags != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/raw_keyboard_android.dart", 37, 15, "flags != null");
    if (!(codePoint != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/raw_keyboard_android.dart", 38, 15, "codePoint != null");
    if (!(keyCode != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/raw_keyboard_android.dart", 39, 15, "keyCode != null");
    if (!(scanCode != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/raw_keyboard_android.dart", 40, 15, "scanCode != null");
    if (!(metaState != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/raw_keyboard_android.dart", 41, 15, "metaState != null");
    src__services__raw_keyboard_android.RawKeyEventDataAndroid.__proto__.new.call(this);
    ;
  }).prototype = src__services__raw_keyboard_android.RawKeyEventDataAndroid.prototype;
  dart.addTypeTests(src__services__raw_keyboard_android.RawKeyEventDataAndroid);
  const flags$ = Symbol("RawKeyEventDataAndroid.flags");
  const codePoint$1 = Symbol("RawKeyEventDataAndroid.codePoint");
  const plainCodePoint$ = Symbol("RawKeyEventDataAndroid.plainCodePoint");
  const keyCode$1 = Symbol("RawKeyEventDataAndroid.keyCode");
  const scanCode$0 = Symbol("RawKeyEventDataAndroid.scanCode");
  const metaState$ = Symbol("RawKeyEventDataAndroid.metaState");
  dart.setMethodSignature(src__services__raw_keyboard_android.RawKeyEventDataAndroid, () => ({
    __proto__: dart.getMethods(src__services__raw_keyboard_android.RawKeyEventDataAndroid.__proto__),
    [_isLeftRightModifierPressed$0]: dart.fnType(core.bool, [src__services__raw_keyboard.KeyboardSide, core.int, core.int, core.int]),
    isModifierPressed: dart.fnType(core.bool, [src__services__raw_keyboard.ModifierKey], {side: src__services__raw_keyboard.KeyboardSide}),
    getModifierSide: dart.fnType(src__services__raw_keyboard.KeyboardSide, [src__services__raw_keyboard.ModifierKey])
  }));
  dart.setGetterSignature(src__services__raw_keyboard_android.RawKeyEventDataAndroid, () => ({
    __proto__: dart.getGetters(src__services__raw_keyboard_android.RawKeyEventDataAndroid.__proto__),
    keyLabel: core.String,
    physicalKey: src__services__keyboard_key.PhysicalKeyboardKey,
    logicalKey: src__services__keyboard_key.LogicalKeyboardKey
  }));
  dart.setLibraryUri(src__services__raw_keyboard_android.RawKeyEventDataAndroid, "package:flutter_web/src/services/raw_keyboard_android.dart");
  dart.setFieldSignature(src__services__raw_keyboard_android.RawKeyEventDataAndroid, () => ({
    __proto__: dart.getFields(src__services__raw_keyboard_android.RawKeyEventDataAndroid.__proto__),
    flags: dart.finalFieldType(core.int),
    codePoint: dart.finalFieldType(core.int),
    plainCodePoint: dart.finalFieldType(core.int),
    keyCode: dart.finalFieldType(core.int),
    scanCode: dart.finalFieldType(core.int),
    metaState: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(src__services__raw_keyboard_android.RawKeyEventDataAndroid, ['toString']);
  dart.defineLazy(src__services__raw_keyboard_android.RawKeyEventDataAndroid, {
    /*src__services__raw_keyboard_android.RawKeyEventDataAndroid.modifierNone*/get modifierNone() {
      return 0;
    },
    /*src__services__raw_keyboard_android.RawKeyEventDataAndroid.modifierAlt*/get modifierAlt() {
      return 2;
    },
    /*src__services__raw_keyboard_android.RawKeyEventDataAndroid.modifierLeftAlt*/get modifierLeftAlt() {
      return 16;
    },
    /*src__services__raw_keyboard_android.RawKeyEventDataAndroid.modifierRightAlt*/get modifierRightAlt() {
      return 32;
    },
    /*src__services__raw_keyboard_android.RawKeyEventDataAndroid.modifierShift*/get modifierShift() {
      return 1;
    },
    /*src__services__raw_keyboard_android.RawKeyEventDataAndroid.modifierLeftShift*/get modifierLeftShift() {
      return 64;
    },
    /*src__services__raw_keyboard_android.RawKeyEventDataAndroid.modifierRightShift*/get modifierRightShift() {
      return 128;
    },
    /*src__services__raw_keyboard_android.RawKeyEventDataAndroid.modifierSym*/get modifierSym() {
      return 4;
    },
    /*src__services__raw_keyboard_android.RawKeyEventDataAndroid.modifierFunction*/get modifierFunction() {
      return 8;
    },
    /*src__services__raw_keyboard_android.RawKeyEventDataAndroid.modifierControl*/get modifierControl() {
      return 4096;
    },
    /*src__services__raw_keyboard_android.RawKeyEventDataAndroid.modifierLeftControl*/get modifierLeftControl() {
      return 8192;
    },
    /*src__services__raw_keyboard_android.RawKeyEventDataAndroid.modifierRightControl*/get modifierRightControl() {
      return 16384;
    },
    /*src__services__raw_keyboard_android.RawKeyEventDataAndroid.modifierMeta*/get modifierMeta() {
      return 65536;
    },
    /*src__services__raw_keyboard_android.RawKeyEventDataAndroid.modifierLeftMeta*/get modifierLeftMeta() {
      return 131072;
    },
    /*src__services__raw_keyboard_android.RawKeyEventDataAndroid.modifierRightMeta*/get modifierRightMeta() {
      return 262144;
    },
    /*src__services__raw_keyboard_android.RawKeyEventDataAndroid.modifierCapsLock*/get modifierCapsLock() {
      return 1048576;
    },
    /*src__services__raw_keyboard_android.RawKeyEventDataAndroid.modifierNumLock*/get modifierNumLock() {
      return 2097152;
    },
    /*src__services__raw_keyboard_android.RawKeyEventDataAndroid.modifierScrollLock*/get modifierScrollLock() {
      return 4194304;
    }
  });
  dart.defineLazy(src__services__raw_keyboard_android, {
    /*src__services__raw_keyboard_android._kCombiningCharacterMask*/get _kCombiningCharacterMask() {
      return 2147483647;
    }
  });
  src__gestures__drag.Drag = class Drag extends core.Object {
    update(details) {
    }
    end(details) {
    }
    cancel() {
    }
  };
  (src__gestures__drag.Drag.new = function() {
    ;
  }).prototype = src__gestures__drag.Drag.prototype;
  dart.addTypeTests(src__gestures__drag.Drag);
  dart.setMethodSignature(src__gestures__drag.Drag, () => ({
    __proto__: dart.getMethods(src__gestures__drag.Drag.__proto__),
    update: dart.fnType(dart.void, [src__gestures__drag_details.DragUpdateDetails]),
    end: dart.fnType(dart.void, [src__gestures__drag_details.DragEndDetails]),
    cancel: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(src__gestures__drag.Drag, "package:flutter_web/src/gestures/drag.dart");
  src__gestures__drag_details.DragDownDetails = class DragDownDetails extends core.Object {
    get globalPosition() {
      return this[globalPosition$];
    }
    set globalPosition(value) {
      super.globalPosition = value;
    }
    get localPosition() {
      return this[localPosition$0];
    }
    set localPosition(value) {
      super.localPosition = value;
    }
    toString() {
      return dart.str(this[$runtimeType]) + "(" + dart.str(this.globalPosition) + ")";
    }
  };
  (src__gestures__drag_details.DragDownDetails.new = function(opts) {
    let t16;
    let globalPosition = opts && 'globalPosition' in opts ? opts.globalPosition : ui$.Offset.zero;
    let localPosition = opts && 'localPosition' in opts ? opts.localPosition : null;
    this[globalPosition$] = globalPosition;
    if (!(globalPosition != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/drag_details.dart", 26, 15, "globalPosition != null");
    this[localPosition$0] = (t16 = localPosition, t16 == null ? globalPosition : t16);
    ;
  }).prototype = src__gestures__drag_details.DragDownDetails.prototype;
  dart.addTypeTests(src__gestures__drag_details.DragDownDetails);
  const globalPosition$ = Symbol("DragDownDetails.globalPosition");
  const localPosition$0 = Symbol("DragDownDetails.localPosition");
  dart.setLibraryUri(src__gestures__drag_details.DragDownDetails, "package:flutter_web/src/gestures/drag_details.dart");
  dart.setFieldSignature(src__gestures__drag_details.DragDownDetails, () => ({
    __proto__: dart.getFields(src__gestures__drag_details.DragDownDetails.__proto__),
    globalPosition: dart.finalFieldType(ui$.Offset),
    localPosition: dart.finalFieldType(ui$.Offset)
  }));
  dart.defineExtensionMethods(src__gestures__drag_details.DragDownDetails, ['toString']);
  src__gestures__drag_details.DragStartDetails = class DragStartDetails extends core.Object {
    get sourceTimeStamp() {
      return this[sourceTimeStamp$];
    }
    set sourceTimeStamp(value) {
      super.sourceTimeStamp = value;
    }
    get globalPosition() {
      return this[globalPosition$0];
    }
    set globalPosition(value) {
      super.globalPosition = value;
    }
    get localPosition() {
      return this[localPosition$1];
    }
    set localPosition(value) {
      super.localPosition = value;
    }
    toString() {
      return dart.str(this[$runtimeType]) + "(" + dart.str(this.globalPosition) + ")";
    }
  };
  (src__gestures__drag_details.DragStartDetails.new = function(opts) {
    let t16;
    let sourceTimeStamp = opts && 'sourceTimeStamp' in opts ? opts.sourceTimeStamp : null;
    let globalPosition = opts && 'globalPosition' in opts ? opts.globalPosition : ui$.Offset.zero;
    let localPosition = opts && 'localPosition' in opts ? opts.localPosition : null;
    this[sourceTimeStamp$] = sourceTimeStamp;
    this[globalPosition$0] = globalPosition;
    if (!(globalPosition != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/drag_details.dart", 73, 15, "globalPosition != null");
    this[localPosition$1] = (t16 = localPosition, t16 == null ? globalPosition : t16);
    ;
  }).prototype = src__gestures__drag_details.DragStartDetails.prototype;
  dart.addTypeTests(src__gestures__drag_details.DragStartDetails);
  const sourceTimeStamp$ = Symbol("DragStartDetails.sourceTimeStamp");
  const globalPosition$0 = Symbol("DragStartDetails.globalPosition");
  const localPosition$1 = Symbol("DragStartDetails.localPosition");
  dart.setLibraryUri(src__gestures__drag_details.DragStartDetails, "package:flutter_web/src/gestures/drag_details.dart");
  dart.setFieldSignature(src__gestures__drag_details.DragStartDetails, () => ({
    __proto__: dart.getFields(src__gestures__drag_details.DragStartDetails.__proto__),
    sourceTimeStamp: dart.finalFieldType(core.Duration),
    globalPosition: dart.finalFieldType(ui$.Offset),
    localPosition: dart.finalFieldType(ui$.Offset)
  }));
  dart.defineExtensionMethods(src__gestures__drag_details.DragStartDetails, ['toString']);
  src__gestures__drag_details.DragUpdateDetails = class DragUpdateDetails extends core.Object {
    get sourceTimeStamp() {
      return this[sourceTimeStamp$0];
    }
    set sourceTimeStamp(value) {
      super.sourceTimeStamp = value;
    }
    get delta() {
      return this[delta$0];
    }
    set delta(value) {
      super.delta = value;
    }
    get primaryDelta() {
      return this[primaryDelta$];
    }
    set primaryDelta(value) {
      super.primaryDelta = value;
    }
    get globalPosition() {
      return this[globalPosition$1];
    }
    set globalPosition(value) {
      super.globalPosition = value;
    }
    get localPosition() {
      return this[localPosition$2];
    }
    set localPosition(value) {
      super.localPosition = value;
    }
    toString() {
      return dart.str(this[$runtimeType]) + "(" + dart.str(this.delta) + ")";
    }
  };
  (src__gestures__drag_details.DragUpdateDetails.new = function(opts) {
    let t16;
    let sourceTimeStamp = opts && 'sourceTimeStamp' in opts ? opts.sourceTimeStamp : null;
    let delta = opts && 'delta' in opts ? opts.delta : ui$.Offset.zero;
    let primaryDelta = opts && 'primaryDelta' in opts ? opts.primaryDelta : null;
    let globalPosition = opts && 'globalPosition' in opts ? opts.globalPosition : null;
    let localPosition = opts && 'localPosition' in opts ? opts.localPosition : null;
    this[sourceTimeStamp$0] = sourceTimeStamp;
    this[delta$0] = delta;
    this[primaryDelta$] = primaryDelta;
    this[globalPosition$1] = globalPosition;
    if (!(delta != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/drag_details.dart", 137, 15, "delta != null");
    if (!(primaryDelta == null || primaryDelta == delta.dx && delta.dy === 0.0 || primaryDelta == delta.dy && delta.dx === 0.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/drag_details.dart", 138, 15, "primaryDelta == null\n           || (primaryDelta == delta.dx && delta.dy == 0.0)\n           || (primaryDelta == delta.dy && delta.dx == 0.0)");
    this[localPosition$2] = (t16 = localPosition, t16 == null ? globalPosition : t16);
    ;
  }).prototype = src__gestures__drag_details.DragUpdateDetails.prototype;
  dart.addTypeTests(src__gestures__drag_details.DragUpdateDetails);
  const sourceTimeStamp$0 = Symbol("DragUpdateDetails.sourceTimeStamp");
  const delta$0 = Symbol("DragUpdateDetails.delta");
  const primaryDelta$ = Symbol("DragUpdateDetails.primaryDelta");
  const globalPosition$1 = Symbol("DragUpdateDetails.globalPosition");
  const localPosition$2 = Symbol("DragUpdateDetails.localPosition");
  dart.setLibraryUri(src__gestures__drag_details.DragUpdateDetails, "package:flutter_web/src/gestures/drag_details.dart");
  dart.setFieldSignature(src__gestures__drag_details.DragUpdateDetails, () => ({
    __proto__: dart.getFields(src__gestures__drag_details.DragUpdateDetails.__proto__),
    sourceTimeStamp: dart.finalFieldType(core.Duration),
    delta: dart.finalFieldType(ui$.Offset),
    primaryDelta: dart.finalFieldType(core.double),
    globalPosition: dart.finalFieldType(ui$.Offset),
    localPosition: dart.finalFieldType(ui$.Offset)
  }));
  dart.defineExtensionMethods(src__gestures__drag_details.DragUpdateDetails, ['toString']);
  src__gestures__drag_details.DragEndDetails = class DragEndDetails extends core.Object {
    get velocity() {
      return this[velocity$];
    }
    set velocity(value) {
      super.velocity = value;
    }
    get primaryVelocity() {
      return this[primaryVelocity$];
    }
    set primaryVelocity(value) {
      super.primaryVelocity = value;
    }
    toString() {
      return dart.str(this[$runtimeType]) + "(" + dart.str(this.velocity) + ")";
    }
  };
  (src__gestures__drag_details.DragEndDetails.new = function(opts) {
    let velocity = opts && 'velocity' in opts ? opts.velocity : src__gestures__velocity_tracker.Velocity.zero;
    let primaryVelocity = opts && 'primaryVelocity' in opts ? opts.primaryVelocity : null;
    this[velocity$] = velocity;
    this[primaryVelocity$] = primaryVelocity;
    if (!(velocity != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/drag_details.dart", 214, 15, "velocity != null");
    if (!(primaryVelocity == null || primaryVelocity == velocity.pixelsPerSecond.dx || primaryVelocity == velocity.pixelsPerSecond.dy)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/drag_details.dart", 215, 15, "primaryVelocity == null\n           || primaryVelocity == velocity.pixelsPerSecond.dx\n           || primaryVelocity == velocity.pixelsPerSecond.dy");
    ;
  }).prototype = src__gestures__drag_details.DragEndDetails.prototype;
  dart.addTypeTests(src__gestures__drag_details.DragEndDetails);
  const velocity$ = Symbol("DragEndDetails.velocity");
  const primaryVelocity$ = Symbol("DragEndDetails.primaryVelocity");
  dart.setLibraryUri(src__gestures__drag_details.DragEndDetails, "package:flutter_web/src/gestures/drag_details.dart");
  dart.setFieldSignature(src__gestures__drag_details.DragEndDetails, () => ({
    __proto__: dart.getFields(src__gestures__drag_details.DragEndDetails.__proto__),
    velocity: dart.finalFieldType(src__gestures__velocity_tracker.Velocity),
    primaryVelocity: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(src__gestures__drag_details.DragEndDetails, ['toString']);
  src__gestures__velocity_tracker.Velocity = class Velocity extends core.Object {
    get pixelsPerSecond() {
      return this[pixelsPerSecond$];
    }
    set pixelsPerSecond(value) {
      super.pixelsPerSecond = value;
    }
    _negate() {
      return new src__gestures__velocity_tracker.Velocity.new({pixelsPerSecond: this.pixelsPerSecond._negate()});
    }
    ['-'](other) {
      return new src__gestures__velocity_tracker.Velocity.new({pixelsPerSecond: this.pixelsPerSecond['-'](other.pixelsPerSecond)});
    }
    ['+'](other) {
      return new src__gestures__velocity_tracker.Velocity.new({pixelsPerSecond: this.pixelsPerSecond['+'](other.pixelsPerSecond)});
    }
    clampMagnitude(minValue, maxValue) {
      if (!(minValue != null && dart.notNull(minValue) >= 0.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/velocity_tracker.dart", 55, 12, "minValue != null && minValue >= 0.0");
      if (!(maxValue != null && dart.notNull(maxValue) >= 0.0 && dart.notNull(maxValue) >= dart.notNull(minValue))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/velocity_tracker.dart", 56, 12, "maxValue != null && maxValue >= 0.0 && maxValue >= minValue");
      let valueSquared = this.pixelsPerSecond.distanceSquared;
      if (dart.notNull(valueSquared) > dart.notNull(maxValue) * dart.notNull(maxValue)) return new src__gestures__velocity_tracker.Velocity.new({pixelsPerSecond: this.pixelsPerSecond['/'](this.pixelsPerSecond.distance)['*'](maxValue)});
      if (dart.notNull(valueSquared) < dart.notNull(minValue) * dart.notNull(minValue)) return new src__gestures__velocity_tracker.Velocity.new({pixelsPerSecond: this.pixelsPerSecond['/'](this.pixelsPerSecond.distance)['*'](minValue)});
      return this;
    }
    _equals(other) {
      if (other == null) return false;
      if (!src__gestures__velocity_tracker.Velocity.is(other)) return false;
      let typedOther = src__gestures__velocity_tracker.Velocity._check(other);
      return dart.equals(this.pixelsPerSecond, typedOther.pixelsPerSecond);
    }
    get hashCode() {
      return dart.hashCode(this.pixelsPerSecond);
    }
    toString() {
      return "Velocity(" + this.pixelsPerSecond.dx[$toStringAsFixed](1) + ", " + this.pixelsPerSecond.dy[$toStringAsFixed](1) + ")";
    }
  };
  (src__gestures__velocity_tracker.Velocity.new = function(opts) {
    let pixelsPerSecond = opts && 'pixelsPerSecond' in opts ? opts.pixelsPerSecond : null;
    this[pixelsPerSecond$] = pixelsPerSecond;
    if (!(pixelsPerSecond != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/velocity_tracker.dart", 21, 15, "pixelsPerSecond != null");
    ;
  }).prototype = src__gestures__velocity_tracker.Velocity.prototype;
  dart.addTypeTests(src__gestures__velocity_tracker.Velocity);
  const pixelsPerSecond$ = Symbol("Velocity.pixelsPerSecond");
  dart.setMethodSignature(src__gestures__velocity_tracker.Velocity, () => ({
    __proto__: dart.getMethods(src__gestures__velocity_tracker.Velocity.__proto__),
    _negate: dart.fnType(src__gestures__velocity_tracker.Velocity, []),
    '-': dart.fnType(src__gestures__velocity_tracker.Velocity, [src__gestures__velocity_tracker.Velocity]),
    '+': dart.fnType(src__gestures__velocity_tracker.Velocity, [src__gestures__velocity_tracker.Velocity]),
    clampMagnitude: dart.fnType(src__gestures__velocity_tracker.Velocity, [core.double, core.double])
  }));
  dart.setLibraryUri(src__gestures__velocity_tracker.Velocity, "package:flutter_web/src/gestures/velocity_tracker.dart");
  dart.setFieldSignature(src__gestures__velocity_tracker.Velocity, () => ({
    __proto__: dart.getFields(src__gestures__velocity_tracker.Velocity.__proto__),
    pixelsPerSecond: dart.finalFieldType(ui$.Offset)
  }));
  dart.defineExtensionMethods(src__gestures__velocity_tracker.Velocity, ['_equals', 'toString']);
  dart.defineExtensionAccessors(src__gestures__velocity_tracker.Velocity, ['hashCode']);
  dart.defineLazy(src__gestures__velocity_tracker.Velocity, {
    /*src__gestures__velocity_tracker.Velocity.zero*/get zero() {
      return dart.const(new src__gestures__velocity_tracker.Velocity.new({pixelsPerSecond: ui$.Offset.zero}));
    }
  });
  src__gestures__velocity_tracker.VelocityEstimate = class VelocityEstimate extends core.Object {
    get pixelsPerSecond() {
      return this[pixelsPerSecond$0];
    }
    set pixelsPerSecond(value) {
      super.pixelsPerSecond = value;
    }
    get confidence() {
      return this[confidence$];
    }
    set confidence(value) {
      super.confidence = value;
    }
    get duration() {
      return this[duration$];
    }
    set duration(value) {
      super.duration = value;
    }
    get offset() {
      return this[offset$];
    }
    set offset(value) {
      super.offset = value;
    }
    toString() {
      return "VelocityEstimate(" + this.pixelsPerSecond.dx[$toStringAsFixed](1) + ", " + this.pixelsPerSecond.dy[$toStringAsFixed](1) + "; offset: " + dart.str(this.offset) + ", duration: " + dart.str(this.duration) + ", confidence: " + this.confidence[$toStringAsFixed](1) + ")";
    }
  };
  (src__gestures__velocity_tracker.VelocityEstimate.new = function(opts) {
    let pixelsPerSecond = opts && 'pixelsPerSecond' in opts ? opts.pixelsPerSecond : null;
    let confidence = opts && 'confidence' in opts ? opts.confidence : null;
    let duration = opts && 'duration' in opts ? opts.duration : null;
    let offset = opts && 'offset' in opts ? opts.offset : null;
    this[pixelsPerSecond$0] = pixelsPerSecond;
    this[confidence$] = confidence;
    this[duration$] = duration;
    this[offset$] = offset;
    if (!(pixelsPerSecond != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/velocity_tracker.dart", 102, 15, "pixelsPerSecond != null");
    if (!(confidence != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/velocity_tracker.dart", 103, 15, "confidence != null");
    if (!(duration != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/velocity_tracker.dart", 104, 15, "duration != null");
    if (!(offset != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/velocity_tracker.dart", 105, 15, "offset != null");
    ;
  }).prototype = src__gestures__velocity_tracker.VelocityEstimate.prototype;
  dart.addTypeTests(src__gestures__velocity_tracker.VelocityEstimate);
  const pixelsPerSecond$0 = Symbol("VelocityEstimate.pixelsPerSecond");
  const confidence$ = Symbol("VelocityEstimate.confidence");
  const duration$ = Symbol("VelocityEstimate.duration");
  const offset$ = Symbol("VelocityEstimate.offset");
  dart.setLibraryUri(src__gestures__velocity_tracker.VelocityEstimate, "package:flutter_web/src/gestures/velocity_tracker.dart");
  dart.setFieldSignature(src__gestures__velocity_tracker.VelocityEstimate, () => ({
    __proto__: dart.getFields(src__gestures__velocity_tracker.VelocityEstimate.__proto__),
    pixelsPerSecond: dart.finalFieldType(ui$.Offset),
    confidence: dart.finalFieldType(core.double),
    duration: dart.finalFieldType(core.Duration),
    offset: dart.finalFieldType(ui$.Offset)
  }));
  dart.defineExtensionMethods(src__gestures__velocity_tracker.VelocityEstimate, ['toString']);
  src__gestures__velocity_tracker._PointAtTime = class _PointAtTime extends core.Object {
    toString() {
      return "_PointAtTime(" + dart.str(this.point) + " at " + dart.str(this.time) + ")";
    }
  };
  (src__gestures__velocity_tracker._PointAtTime.new = function(point, time) {
    this.point = point;
    this.time = time;
    if (!(point != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/velocity_tracker.dart", 130, 14, "point != null");
    if (!(time != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/velocity_tracker.dart", 131, 14, "time != null");
    ;
  }).prototype = src__gestures__velocity_tracker._PointAtTime.prototype;
  dart.addTypeTests(src__gestures__velocity_tracker._PointAtTime);
  dart.setLibraryUri(src__gestures__velocity_tracker._PointAtTime, "package:flutter_web/src/gestures/velocity_tracker.dart");
  dart.setFieldSignature(src__gestures__velocity_tracker._PointAtTime, () => ({
    __proto__: dart.getFields(src__gestures__velocity_tracker._PointAtTime.__proto__),
    time: dart.finalFieldType(core.Duration),
    point: dart.finalFieldType(ui$.Offset)
  }));
  dart.defineExtensionMethods(src__gestures__velocity_tracker._PointAtTime, ['toString']);
  const _samples = dart.privateName(src__gestures__velocity_tracker, "_samples");
  const _index = dart.privateName(src__gestures__velocity_tracker, "_index");
  src__gestures__velocity_tracker.VelocityTracker = class VelocityTracker extends core.Object {
    addPosition(time, position) {
      this[_index] = dart.notNull(this[_index]) + 1;
      if (this[_index] == src__gestures__velocity_tracker.VelocityTracker._historySize) this[_index] = 0;
      this[_samples][$_set](this[_index], new src__gestures__velocity_tracker._PointAtTime.new(position, time));
    }
    getVelocityEstimate() {
      let x = JSArrayOfdouble().of([]);
      let y = JSArrayOfdouble().of([]);
      let w = JSArrayOfdouble().of([]);
      let time = JSArrayOfdouble().of([]);
      let sampleCount = 0;
      let index = this[_index];
      let newestSample = this[_samples][$_get](index);
      if (newestSample == null) return null;
      let previousSample = newestSample;
      let oldestSample = newestSample;
      do {
        let sample = this[_samples][$_get](index);
        if (sample == null) break;
        let age = newestSample.time['-'](sample.time).inMilliseconds[$toDouble]();
        let delta = sample.time['-'](previousSample.time).inMilliseconds[$abs]()[$toDouble]();
        previousSample = sample;
        if (age > dart.notNull(src__gestures__velocity_tracker.VelocityTracker._horizonMilliseconds) || delta > dart.notNull(src__gestures__velocity_tracker.VelocityTracker._assumePointerMoveStoppedMilliseconds)) break;
        oldestSample = sample;
        let position = sample.point;
        x[$add](position.dx);
        y[$add](position.dy);
        w[$add](1.0);
        time[$add](-age);
        index = dart.notNull(index === 0 ? src__gestures__velocity_tracker.VelocityTracker._historySize : index) - 1;
        sampleCount = sampleCount + 1;
      } while (sampleCount < dart.notNull(src__gestures__velocity_tracker.VelocityTracker._historySize));
      if (sampleCount >= dart.notNull(src__gestures__velocity_tracker.VelocityTracker._minSampleSize)) {
        let xSolver = new src__gestures__lsq_solver.LeastSquaresSolver.new(time, x, w);
        let xFit = xSolver.solve(2);
        if (xFit != null) {
          let ySolver = new src__gestures__lsq_solver.LeastSquaresSolver.new(time, y, w);
          let yFit = ySolver.solve(2);
          if (yFit != null) {
            return new src__gestures__velocity_tracker.VelocityEstimate.new({pixelsPerSecond: new ui$.Offset.new(dart.notNull(xFit.coefficients[$_get](1)) * 1000, dart.notNull(yFit.coefficients[$_get](1)) * 1000), confidence: dart.notNull(xFit.confidence) * dart.notNull(yFit.confidence), duration: newestSample.time['-'](oldestSample.time), offset: newestSample.point['-'](oldestSample.point)});
          }
        }
      }
      return new src__gestures__velocity_tracker.VelocityEstimate.new({pixelsPerSecond: ui$.Offset.zero, confidence: 1.0, duration: newestSample.time['-'](oldestSample.time), offset: newestSample.point['-'](oldestSample.point)});
    }
    getVelocity() {
      let estimate = this.getVelocityEstimate();
      if (estimate == null || dart.equals(estimate.pixelsPerSecond, ui$.Offset.zero)) return src__gestures__velocity_tracker.Velocity.zero;
      return new src__gestures__velocity_tracker.Velocity.new({pixelsPerSecond: estimate.pixelsPerSecond});
    }
  };
  (src__gestures__velocity_tracker.VelocityTracker.new = function() {
    this[_samples] = ListOf_PointAtTime().new(src__gestures__velocity_tracker.VelocityTracker._historySize);
    this[_index] = 0;
    ;
  }).prototype = src__gestures__velocity_tracker.VelocityTracker.prototype;
  dart.addTypeTests(src__gestures__velocity_tracker.VelocityTracker);
  dart.setMethodSignature(src__gestures__velocity_tracker.VelocityTracker, () => ({
    __proto__: dart.getMethods(src__gestures__velocity_tracker.VelocityTracker.__proto__),
    addPosition: dart.fnType(dart.void, [core.Duration, ui$.Offset]),
    getVelocityEstimate: dart.fnType(src__gestures__velocity_tracker.VelocityEstimate, []),
    getVelocity: dart.fnType(src__gestures__velocity_tracker.Velocity, [])
  }));
  dart.setLibraryUri(src__gestures__velocity_tracker.VelocityTracker, "package:flutter_web/src/gestures/velocity_tracker.dart");
  dart.setFieldSignature(src__gestures__velocity_tracker.VelocityTracker, () => ({
    __proto__: dart.getFields(src__gestures__velocity_tracker.VelocityTracker.__proto__),
    [_samples]: dart.finalFieldType(core.List$(src__gestures__velocity_tracker._PointAtTime)),
    [_index]: dart.fieldType(core.int)
  }));
  dart.defineLazy(src__gestures__velocity_tracker.VelocityTracker, {
    /*src__gestures__velocity_tracker.VelocityTracker._assumePointerMoveStoppedMilliseconds*/get _assumePointerMoveStoppedMilliseconds() {
      return 40;
    },
    /*src__gestures__velocity_tracker.VelocityTracker._historySize*/get _historySize() {
      return 20;
    },
    /*src__gestures__velocity_tracker.VelocityTracker._horizonMilliseconds*/get _horizonMilliseconds() {
      return 100;
    },
    /*src__gestures__velocity_tracker.VelocityTracker._minSampleSize*/get _minSampleSize() {
      return 3;
    }
  });
  const _offset = dart.privateName(src__gestures__lsq_solver, "_offset");
  const _length = dart.privateName(src__gestures__lsq_solver, "_length");
  const _elements = dart.privateName(src__gestures__lsq_solver, "_elements");
  src__gestures__lsq_solver._Vector = class _Vector extends core.Object {
    _get(i) {
      return this[_elements][$_get](dart.notNull(i) + dart.notNull(this[_offset]));
    }
    _set(i, value$) {
      let value = value$;
      this[_elements][$_set](dart.notNull(i) + dart.notNull(this[_offset]), value);
      return value$;
    }
    ['*'](a) {
      let result = 0.0;
      for (let i = 0; i < dart.notNull(this[_length]); i = i + 1)
        result = result + dart.notNull(this._get(i)) * dart.notNull(a._get(i));
      return result;
    }
    norm() {
      return math.sqrt(this['*'](this));
    }
  };
  (src__gestures__lsq_solver._Vector.new = function(size) {
    this[_offset] = 0;
    this[_length] = size;
    this[_elements] = _native_typed_data.NativeFloat64List.new(size);
    ;
  }).prototype = src__gestures__lsq_solver._Vector.prototype;
  (src__gestures__lsq_solver._Vector.fromVOL = function(values, offset, length) {
    this[_offset] = offset;
    this[_length] = length;
    this[_elements] = values;
    ;
  }).prototype = src__gestures__lsq_solver._Vector.prototype;
  dart.addTypeTests(src__gestures__lsq_solver._Vector);
  dart.setMethodSignature(src__gestures__lsq_solver._Vector, () => ({
    __proto__: dart.getMethods(src__gestures__lsq_solver._Vector.__proto__),
    _get: dart.fnType(core.double, [core.int]),
    _set: dart.fnType(dart.void, [core.int, core.double]),
    '*': dart.fnType(core.double, [src__gestures__lsq_solver._Vector]),
    norm: dart.fnType(core.double, [])
  }));
  dart.setLibraryUri(src__gestures__lsq_solver._Vector, "package:flutter_web/src/gestures/lsq_solver.dart");
  dart.setFieldSignature(src__gestures__lsq_solver._Vector, () => ({
    __proto__: dart.getFields(src__gestures__lsq_solver._Vector.__proto__),
    [_offset]: dart.finalFieldType(core.int),
    [_length]: dart.finalFieldType(core.int),
    [_elements]: dart.finalFieldType(core.List$(core.double))
  }));
  const _columns = dart.privateName(src__gestures__lsq_solver, "_columns");
  src__gestures__lsq_solver._Matrix = class _Matrix extends core.Object {
    get(row, col) {
      return this[_elements][$_get](dart.notNull(row) * dart.notNull(this[_columns]) + dart.notNull(col));
    }
    set(row, col, value) {
      this[_elements][$_set](dart.notNull(row) * dart.notNull(this[_columns]) + dart.notNull(col), value);
    }
    getRow(row) {
      return new src__gestures__lsq_solver._Vector.fromVOL(this[_elements], dart.notNull(row) * dart.notNull(this[_columns]), this[_columns]);
    }
  };
  (src__gestures__lsq_solver._Matrix.new = function(rows, cols) {
    this[_columns] = cols;
    this[_elements] = _native_typed_data.NativeFloat64List.new(dart.notNull(rows) * dart.notNull(cols));
    ;
  }).prototype = src__gestures__lsq_solver._Matrix.prototype;
  dart.addTypeTests(src__gestures__lsq_solver._Matrix);
  dart.setMethodSignature(src__gestures__lsq_solver._Matrix, () => ({
    __proto__: dart.getMethods(src__gestures__lsq_solver._Matrix.__proto__),
    get: dart.fnType(core.double, [core.int, core.int]),
    set: dart.fnType(dart.void, [core.int, core.int, core.double]),
    getRow: dart.fnType(src__gestures__lsq_solver._Vector, [core.int])
  }));
  dart.setLibraryUri(src__gestures__lsq_solver._Matrix, "package:flutter_web/src/gestures/lsq_solver.dart");
  dart.setFieldSignature(src__gestures__lsq_solver._Matrix, () => ({
    __proto__: dart.getFields(src__gestures__lsq_solver._Matrix.__proto__),
    [_columns]: dart.finalFieldType(core.int),
    [_elements]: dart.finalFieldType(core.List$(core.double))
  }));
  src__gestures__lsq_solver.PolynomialFit = class PolynomialFit extends core.Object {
    get coefficients() {
      return this[coefficients];
    }
    set coefficients(value) {
      super.coefficients = value;
    }
    get confidence() {
      return this[confidence];
    }
    set confidence(value) {
      this[confidence] = value;
    }
  };
  (src__gestures__lsq_solver.PolynomialFit.new = function(degree) {
    this[confidence] = null;
    this[coefficients] = _native_typed_data.NativeFloat64List.new(dart.notNull(degree) + 1);
    ;
  }).prototype = src__gestures__lsq_solver.PolynomialFit.prototype;
  dart.addTypeTests(src__gestures__lsq_solver.PolynomialFit);
  const coefficients = Symbol("PolynomialFit.coefficients");
  const confidence = Symbol("PolynomialFit.confidence");
  dart.setLibraryUri(src__gestures__lsq_solver.PolynomialFit, "package:flutter_web/src/gestures/lsq_solver.dart");
  dart.setFieldSignature(src__gestures__lsq_solver.PolynomialFit, () => ({
    __proto__: dart.getFields(src__gestures__lsq_solver.PolynomialFit.__proto__),
    coefficients: dart.finalFieldType(core.List$(core.double)),
    confidence: dart.fieldType(core.double)
  }));
  src__gestures__lsq_solver.LeastSquaresSolver = class LeastSquaresSolver extends core.Object {
    get x() {
      return this[x$0];
    }
    set x(value) {
      super.x = value;
    }
    get y() {
      return this[y$2];
    }
    set y(value) {
      super.y = value;
    }
    get w() {
      return this[w$];
    }
    set w(value) {
      super.w = value;
    }
    solve(degree) {
      let t17, t16, t17$, t16$;
      if (dart.notNull(degree) > dart.notNull(this.x[$length])) return null;
      let result = new src__gestures__lsq_solver.PolynomialFit.new(degree);
      let m = this.x[$length];
      let n = dart.notNull(degree) + 1;
      let a = new src__gestures__lsq_solver._Matrix.new(n, m);
      for (let h = 0; h < dart.notNull(m); h = h + 1) {
        a.set(0, h, this.w[$_get](h));
        for (let i = 1; i < n; i = i + 1)
          a.set(i, h, dart.notNull(a.get(i - 1, h)) * dart.notNull(this.x[$_get](h)));
      }
      let q = new src__gestures__lsq_solver._Matrix.new(n, m);
      let r = new src__gestures__lsq_solver._Matrix.new(n, n);
      for (let j = 0; j < n; j = j + 1) {
        for (let h = 0; h < dart.notNull(m); h = h + 1)
          q.set(j, h, a.get(j, h));
        for (let i = 0; i < j; i = i + 1) {
          let dot = q.getRow(j)['*'](q.getRow(i));
          for (let h = 0; h < dart.notNull(m); h = h + 1)
            q.set(j, h, dart.notNull(q.get(j, h)) - dart.notNull(dot) * dart.notNull(q.get(i, h)));
        }
        let norm = q.getRow(j).norm();
        if (dart.notNull(norm) < dart.notNull(src__foundation__constants.precisionErrorTolerance)) {
          return null;
        }
        let inverseNorm = 1.0 / dart.notNull(norm);
        for (let h = 0; h < dart.notNull(m); h = h + 1)
          q.set(j, h, dart.notNull(q.get(j, h)) * inverseNorm);
        for (let i = 0; i < n; i = i + 1)
          r.set(j, i, i < j ? 0.0 : q.getRow(j)['*'](a.getRow(i)));
      }
      let wy = new src__gestures__lsq_solver._Vector.new(m);
      for (let h = 0; h < dart.notNull(m); h = h + 1)
        wy._set(h, dart.notNull(this.y[$_get](h)) * dart.notNull(this.w[$_get](h)));
      for (let i = n - 1; i >= 0; i = i - 1) {
        result.coefficients[$_set](i, q.getRow(i)['*'](wy));
        for (let j = n - 1; j > i; j = j - 1) {
          t16 = result.coefficients;
          t17 = i;
          t16[$_set](t17, dart.notNull(t16[$_get](t17)) - dart.notNull(r.get(i, j)) * dart.notNull(result.coefficients[$_get](j)));
        }
        t16$ = result.coefficients;
        t17$ = i;
        t16$[$_set](t17$, dart.notNull(t16$[$_get](t17$)) / dart.notNull(r.get(i, i)));
      }
      let yMean = 0.0;
      for (let h = 0; h < dart.notNull(m); h = h + 1)
        yMean = yMean + dart.notNull(this.y[$_get](h));
      yMean = yMean / dart.notNull(m);
      let sumSquaredError = 0.0;
      let sumSquaredTotal = 0.0;
      for (let h = 0; h < dart.notNull(m); h = h + 1) {
        let term = 1.0;
        let err = dart.notNull(this.y[$_get](h)) - dart.notNull(result.coefficients[$_get](0));
        for (let i = 1; i < n; i = i + 1) {
          term = term * dart.notNull(this.x[$_get](h));
          err = err - term * dart.notNull(result.coefficients[$_get](i));
        }
        sumSquaredError = sumSquaredError + dart.notNull(this.w[$_get](h)) * dart.notNull(this.w[$_get](h)) * err * err;
        let v = dart.notNull(this.y[$_get](h)) - yMean;
        sumSquaredTotal = sumSquaredTotal + dart.notNull(this.w[$_get](h)) * dart.notNull(this.w[$_get](h)) * v * v;
      }
      result.confidence = sumSquaredTotal <= dart.notNull(src__foundation__constants.precisionErrorTolerance) ? 1.0 : 1.0 - sumSquaredError / sumSquaredTotal;
      return result;
    }
  };
  (src__gestures__lsq_solver.LeastSquaresSolver.new = function(x, y, w) {
    this[x$0] = x;
    this[y$2] = y;
    this[w$] = w;
    if (!(x[$length] == y[$length])) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/lsq_solver.dart", 87, 14, "x.length == y.length");
    if (!(y[$length] == w[$length])) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/lsq_solver.dart", 88, 14, "y.length == w.length");
    ;
  }).prototype = src__gestures__lsq_solver.LeastSquaresSolver.prototype;
  dart.addTypeTests(src__gestures__lsq_solver.LeastSquaresSolver);
  const x$0 = Symbol("LeastSquaresSolver.x");
  const y$2 = Symbol("LeastSquaresSolver.y");
  const w$ = Symbol("LeastSquaresSolver.w");
  dart.setMethodSignature(src__gestures__lsq_solver.LeastSquaresSolver, () => ({
    __proto__: dart.getMethods(src__gestures__lsq_solver.LeastSquaresSolver.__proto__),
    solve: dart.fnType(src__gestures__lsq_solver.PolynomialFit, [core.int])
  }));
  dart.setLibraryUri(src__gestures__lsq_solver.LeastSquaresSolver, "package:flutter_web/src/gestures/lsq_solver.dart");
  dart.setFieldSignature(src__gestures__lsq_solver.LeastSquaresSolver, () => ({
    __proto__: dart.getFields(src__gestures__lsq_solver.LeastSquaresSolver.__proto__),
    x: dart.finalFieldType(core.List$(core.double)),
    y: dart.finalFieldType(core.List$(core.double)),
    w: dart.finalFieldType(core.List$(core.double))
  }));
  src__painting__matrix_utils.MatrixUtils = class MatrixUtils extends core.Object {
    static getAsTranslation(transform) {
      if (!(transform != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/matrix_utils.dart", 23, 12, "transform != null");
      let values = transform.storage;
      if (values[$_get](0) === 1.0 && values[$_get](1) === 0.0 && values[$_get](2) === 0.0 && values[$_get](3) === 0.0 && values[$_get](4) === 0.0 && values[$_get](5) === 1.0 && values[$_get](6) === 0.0 && values[$_get](7) === 0.0 && values[$_get](8) === 0.0 && values[$_get](9) === 0.0 && values[$_get](10) === 1.0 && values[$_get](11) === 0.0 && values[$_get](14) === 0.0 && values[$_get](15) === 1.0) {
        return new ui$.Offset.new(values[$_get](12), values[$_get](13));
      }
      return null;
    }
    static getAsScale(transform) {
      if (!(transform != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/matrix_utils.dart", 50, 12, "transform != null");
      let values = transform.storage;
      if (values[$_get](1) === 0.0 && values[$_get](2) === 0.0 && values[$_get](3) === 0.0 && values[$_get](4) === 0.0 && values[$_get](6) === 0.0 && values[$_get](7) === 0.0 && values[$_get](8) === 0.0 && values[$_get](9) === 0.0 && values[$_get](10) === 1.0 && values[$_get](11) === 0.0 && values[$_get](12) === 0.0 && values[$_get](13) === 0.0 && values[$_get](14) === 0.0 && values[$_get](15) === 1.0 && values[$_get](0) == values[$_get](5)) {
        return values[$_get](0);
      }
      return null;
    }
    static matrixEquals(a, b) {
      if (a == b) return true;
      if (!(a != null || b != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/matrix_utils.dart", 78, 12, "a != null || b != null");
      if (a == null) return src__painting__matrix_utils.MatrixUtils.isIdentity(b);
      if (b == null) return src__painting__matrix_utils.MatrixUtils.isIdentity(a);
      if (!(a != null && b != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/matrix_utils.dart", 83, 12, "a != null && b != null");
      return a.storage[$_get](0) == b.storage[$_get](0) && a.storage[$_get](1) == b.storage[$_get](1) && a.storage[$_get](2) == b.storage[$_get](2) && a.storage[$_get](3) == b.storage[$_get](3) && a.storage[$_get](4) == b.storage[$_get](4) && a.storage[$_get](5) == b.storage[$_get](5) && a.storage[$_get](6) == b.storage[$_get](6) && a.storage[$_get](7) == b.storage[$_get](7) && a.storage[$_get](8) == b.storage[$_get](8) && a.storage[$_get](9) == b.storage[$_get](9) && a.storage[$_get](10) == b.storage[$_get](10) && a.storage[$_get](11) == b.storage[$_get](11) && a.storage[$_get](12) == b.storage[$_get](12) && a.storage[$_get](13) == b.storage[$_get](13) && a.storage[$_get](14) == b.storage[$_get](14) && a.storage[$_get](15) == b.storage[$_get](15);
    }
    static isIdentity(a) {
      if (!(a != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/matrix_utils.dart", 104, 12, "a != null");
      return a.storage[$_get](0) === 1.0 && a.storage[$_get](1) === 0.0 && a.storage[$_get](2) === 0.0 && a.storage[$_get](3) === 0.0 && a.storage[$_get](4) === 0.0 && a.storage[$_get](5) === 1.0 && a.storage[$_get](6) === 0.0 && a.storage[$_get](7) === 0.0 && a.storage[$_get](8) === 0.0 && a.storage[$_get](9) === 0.0 && a.storage[$_get](10) === 1.0 && a.storage[$_get](11) === 0.0 && a.storage[$_get](12) === 0.0 && a.storage[$_get](13) === 0.0 && a.storage[$_get](14) === 0.0 && a.storage[$_get](15) === 1.0;
    }
    static transformPoint(transform, point) {
      let position3 = vector_math_64$.Vector3.new(point.dx, point.dy, 0.0);
      let transformed3 = transform.perspectiveTransform(position3);
      return new ui$.Offset.new(transformed3.x, transformed3.y);
    }
    static transformRect(transform, rect) {
      let point1 = src__painting__matrix_utils.MatrixUtils.transformPoint(transform, rect.topLeft);
      let point2 = src__painting__matrix_utils.MatrixUtils.transformPoint(transform, rect.topRight);
      let point3 = src__painting__matrix_utils.MatrixUtils.transformPoint(transform, rect.bottomLeft);
      let point4 = src__painting__matrix_utils.MatrixUtils.transformPoint(transform, rect.bottomRight);
      return new ui$.Rect.fromLTRB(src__painting__matrix_utils.MatrixUtils._min4(point1.dx, point2.dx, point3.dx, point4.dx), src__painting__matrix_utils.MatrixUtils._min4(point1.dy, point2.dy, point3.dy, point4.dy), src__painting__matrix_utils.MatrixUtils._max4(point1.dx, point2.dx, point3.dx, point4.dx), src__painting__matrix_utils.MatrixUtils._max4(point1.dy, point2.dy, point3.dy, point4.dy));
    }
    static _min4(a, b, c, d) {
      return math.min(core.double, a, math.min(core.double, b, math.min(core.double, c, d)));
    }
    static _max4(a, b, c, d) {
      return math.max(core.double, a, math.max(core.double, b, math.max(core.double, c, d)));
    }
    static inverseTransformRect(transform, rect) {
      let t16;
      if (!(rect != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/matrix_utils.dart", 166, 12, "rect != null");
      if (dart.test(src__painting__matrix_utils.MatrixUtils.isIdentity(transform))) return rect;
      transform = (t16 = vector_math_64$.Matrix4.copy(transform), t16.invert(), t16);
      return src__painting__matrix_utils.MatrixUtils.transformRect(transform, rect);
    }
    static createCylindricalProjectionTransform(opts) {
      let t16;
      let radius = opts && 'radius' in opts ? opts.radius : null;
      let angle = opts && 'angle' in opts ? opts.angle : null;
      let perspective = opts && 'perspective' in opts ? opts.perspective : 0.001;
      let orientation = opts && 'orientation' in opts ? opts.orientation : src__painting__basic_types.Axis.vertical;
      if (!(radius != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/matrix_utils.dart", 215, 12, "rt(radius != n");
      if (!(angle != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/matrix_utils.dart", 216, 12, "rt(angle != n");
      if (!(dart.notNull(perspective) >= 0 && dart.notNull(perspective) <= 1.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/matrix_utils.dart", 217, 12, "rt(perspective >= 0 && perspective <= ");
      if (!(orientation != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/matrix_utils.dart", 218, 12, "rt(orientation != n");
      let result = (t16 = vector_math_64$.Matrix4.identity(), t16.setEntry(3, 2, -dart.notNull(perspective)), t16.setEntry(2, 3, -dart.notNull(radius)), t16.setEntry(3, 3, dart.notNull(perspective) * dart.notNull(radius) + 1.0), t16);
      result = vector_math_64$.Matrix4._check(result['*']((dart.equals(orientation, src__painting__basic_types.Axis.horizontal) ? vector_math_64$.Matrix4.rotationY(angle) : vector_math_64$.Matrix4.rotationX(angle))['*'](vector_math_64$.Matrix4.translationValues(0.0, 0.0, radius))));
      return result;
    }
    static forceToPoint(offset) {
      let t16;
      t16 = vector_math_64$.Matrix4.identity();
      t16.setRow(0, vector_math_64$.Vector4.new(0.0, 0.0, 0.0, offset.dx));
      t16.setRow(1, vector_math_64$.Vector4.new(0.0, 0.0, 0.0, offset.dy));
      return t16;
    }
  };
  (src__painting__matrix_utils.MatrixUtils.__ = function() {
    ;
  }).prototype = src__painting__matrix_utils.MatrixUtils.prototype;
  dart.addTypeTests(src__painting__matrix_utils.MatrixUtils);
  dart.setLibraryUri(src__painting__matrix_utils.MatrixUtils, "package:flutter_web/src/painting/matrix_utils.dart");
  src__painting__matrix_utils.TransformProperty = class TransformProperty extends src__foundation__diagnostics.DiagnosticsProperty$(vector_math_64$.Matrix4) {
    valueToString(opts) {
      let parentConfiguration = opts && 'parentConfiguration' in opts ? opts.parentConfiguration : null;
      if (parentConfiguration != null && !dart.test(parentConfiguration.lineBreakProperties)) {
        let values = JSArrayOfString().of([dart.str(src__foundation__debug.debugFormatDouble(this.value.entry(0, 0))) + "," + dart.str(src__foundation__debug.debugFormatDouble(this.value.entry(0, 1))) + "," + dart.str(src__foundation__debug.debugFormatDouble(this.value.entry(0, 2))) + "," + dart.str(src__foundation__debug.debugFormatDouble(this.value.entry(0, 3))), dart.str(src__foundation__debug.debugFormatDouble(this.value.entry(1, 0))) + "," + dart.str(src__foundation__debug.debugFormatDouble(this.value.entry(1, 1))) + "," + dart.str(src__foundation__debug.debugFormatDouble(this.value.entry(1, 2))) + "," + dart.str(src__foundation__debug.debugFormatDouble(this.value.entry(1, 3))), dart.str(src__foundation__debug.debugFormatDouble(this.value.entry(2, 0))) + "," + dart.str(src__foundation__debug.debugFormatDouble(this.value.entry(2, 1))) + "," + dart.str(src__foundation__debug.debugFormatDouble(this.value.entry(2, 2))) + "," + dart.str(src__foundation__debug.debugFormatDouble(this.value.entry(2, 3))), dart.str(src__foundation__debug.debugFormatDouble(this.value.entry(3, 0))) + "," + dart.str(src__foundation__debug.debugFormatDouble(this.value.entry(3, 1))) + "," + dart.str(src__foundation__debug.debugFormatDouble(this.value.entry(3, 2))) + "," + dart.str(src__foundation__debug.debugFormatDouble(this.value.entry(3, 3)))]);
        return "[" + dart.str(values[$join]("; ")) + "]";
      }
      return src__painting__matrix_utils.debugDescribeTransform(this.value)[$join]("\n");
    }
  };
  (src__painting__matrix_utils.TransformProperty.new = function(name, value, opts) {
    let showName = opts && 'showName' in opts ? opts.showName : true;
    let defaultValue = opts && 'defaultValue' in opts ? opts.defaultValue : src__foundation__diagnostics.kNoDefaultValue;
    let level = opts && 'level' in opts ? opts.level : src__foundation__diagnostics.DiagnosticLevel.info;
    if (!(showName != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/matrix_utils.dart", 288, 15, "rt(showName != n");
    if (!(level != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/matrix_utils.dart", 289, 15, "rt(level != n");
    src__painting__matrix_utils.TransformProperty.__proto__.new.call(this, name, value, {showName: showName, defaultValue: defaultValue, level: level});
    ;
  }).prototype = src__painting__matrix_utils.TransformProperty.prototype;
  dart.addTypeTests(src__painting__matrix_utils.TransformProperty);
  dart.setLibraryUri(src__painting__matrix_utils.TransformProperty, "package:flutter_web/src/painting/matrix_utils.dart");
  let const$19;
  src__painting__matrix_utils.debugDescribeTransform = function(transform) {
    if (transform == null) return const$19 || (const$19 = dart.constList(["null"], core.String));
    return JSArrayOfString().of(["[0] " + dart.str(src__foundation__debug.debugFormatDouble(transform.entry(0, 0))) + "," + dart.str(src__foundation__debug.debugFormatDouble(transform.entry(0, 1))) + "," + dart.str(src__foundation__debug.debugFormatDouble(transform.entry(0, 2))) + "," + dart.str(src__foundation__debug.debugFormatDouble(transform.entry(0, 3))), "[1] " + dart.str(src__foundation__debug.debugFormatDouble(transform.entry(1, 0))) + "," + dart.str(src__foundation__debug.debugFormatDouble(transform.entry(1, 1))) + "," + dart.str(src__foundation__debug.debugFormatDouble(transform.entry(1, 2))) + "," + dart.str(src__foundation__debug.debugFormatDouble(transform.entry(1, 3))), "[2] " + dart.str(src__foundation__debug.debugFormatDouble(transform.entry(2, 0))) + "," + dart.str(src__foundation__debug.debugFormatDouble(transform.entry(2, 1))) + "," + dart.str(src__foundation__debug.debugFormatDouble(transform.entry(2, 2))) + "," + dart.str(src__foundation__debug.debugFormatDouble(transform.entry(2, 3))), "[3] " + dart.str(src__foundation__debug.debugFormatDouble(transform.entry(3, 0))) + "," + dart.str(src__foundation__debug.debugFormatDouble(transform.entry(3, 1))) + "," + dart.str(src__foundation__debug.debugFormatDouble(transform.entry(3, 2))) + "," + dart.str(src__foundation__debug.debugFormatDouble(transform.entry(3, 3)))]);
  };
  src__services__clipboard.ClipboardData = class ClipboardData extends core.Object {
    get text() {
      return this[text$];
    }
    set text(value) {
      super.text = value;
    }
  };
  (src__services__clipboard.ClipboardData.new = function(opts) {
    let text = opts && 'text' in opts ? opts.text : null;
    this[text$] = text;
    ;
  }).prototype = src__services__clipboard.ClipboardData.prototype;
  dart.addTypeTests(src__services__clipboard.ClipboardData);
  const text$ = Symbol("ClipboardData.text");
  dart.setLibraryUri(src__services__clipboard.ClipboardData, "package:flutter_web/src/services/clipboard.dart");
  dart.setFieldSignature(src__services__clipboard.ClipboardData, () => ({
    __proto__: dart.getFields(src__services__clipboard.ClipboardData.__proto__),
    text: dart.finalFieldType(core.String)
  }));
  src__services__clipboard.Clipboard = class Clipboard extends core.Object {
    static setData(data) {
      return async.async(dart.void, function* setData() {
        yield src__services__system_channels.SystemChannels.platform.invokeMethod(dart.dynamic, "Clipboard.setData", new (IdentityMapOfString$dynamic()).from(["text", data.text]));
      });
    }
    static getData(format) {
      return async.async(src__services__clipboard.ClipboardData, function* getData() {
        let result = (yield src__services__system_channels.SystemChannels.platform.invokeMethod(MapOfString$dynamic(), "Clipboard.getData", format));
        if (result == null) return null;
        return new src__services__clipboard.ClipboardData.new({text: core.String._check(result[$_get]("text"))});
      });
    }
  };
  (src__services__clipboard.Clipboard.__ = function() {
    ;
  }).prototype = src__services__clipboard.Clipboard.prototype;
  dart.addTypeTests(src__services__clipboard.Clipboard);
  dart.setLibraryUri(src__services__clipboard.Clipboard, "package:flutter_web/src/services/clipboard.dart");
  dart.defineLazy(src__services__clipboard.Clipboard, {
    /*src__services__clipboard.Clipboard.kTextPlain*/get kTextPlain() {
      return "text/plain";
    }
  });
  src__services__system_navigator.SystemNavigator = class SystemNavigator extends core.Object {
    static pop() {
      return async.async(dart.void, function* pop() {
        yield src__services__system_channels.SystemChannels.platform.invokeMethod(dart.dynamic, "SystemNavigator.pop");
      });
    }
  };
  (src__services__system_navigator.SystemNavigator.__ = function() {
    ;
  }).prototype = src__services__system_navigator.SystemNavigator.prototype;
  dart.addTypeTests(src__services__system_navigator.SystemNavigator);
  dart.setLibraryUri(src__services__system_navigator.SystemNavigator, "package:flutter_web/src/services/system_navigator.dart");
  src__widgets__icon_data.IconData = class IconData extends core.Object {
    get codePoint() {
      return this[codePoint$2];
    }
    set codePoint(value) {
      super.codePoint = value;
    }
    get fontFamily() {
      return this[fontFamily$];
    }
    set fontFamily(value) {
      super.fontFamily = value;
    }
    get fontPackage() {
      return this[fontPackage$];
    }
    set fontPackage(value) {
      super.fontPackage = value;
    }
    get matchTextDirection() {
      return this[matchTextDirection$];
    }
    set matchTextDirection(value) {
      super.matchTextDirection = value;
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.equals(this[$runtimeType], dart.runtimeType(other))) return false;
      let typedOther = src__widgets__icon_data.IconData._check(other);
      return this.codePoint == typedOther.codePoint && this.fontFamily == typedOther.fontFamily && this.fontPackage == typedOther.fontPackage && dart.equals(this.matchTextDirection, typedOther.matchTextDirection);
    }
    get hashCode() {
      return ui$.hashValues(this.codePoint, this.fontFamily, this.fontPackage, this.matchTextDirection);
    }
    toString() {
      if (dart.test(src__util.assertionsEnabled)) {
        let data = this.codePoint[$toRadixString](16)[$toUpperCase]()[$padLeft](5, "0");
        return "IconData(U+" + data + ")";
      } else {
        return super[$toString]();
      }
    }
  };
  (src__widgets__icon_data.IconData.new = function(codePoint, opts) {
    let fontFamily = opts && 'fontFamily' in opts ? opts.fontFamily : null;
    let fontPackage = opts && 'fontPackage' in opts ? opts.fontPackage : null;
    let matchTextDirection = opts && 'matchTextDirection' in opts ? opts.matchTextDirection : false;
    this[codePoint$2] = codePoint;
    this[fontFamily$] = fontFamily;
    this[fontPackage$] = fontPackage;
    this[matchTextDirection$] = matchTextDirection;
    ;
  }).prototype = src__widgets__icon_data.IconData.prototype;
  dart.addTypeTests(src__widgets__icon_data.IconData);
  const codePoint$2 = Symbol("IconData.codePoint");
  const fontFamily$ = Symbol("IconData.fontFamily");
  const fontPackage$ = Symbol("IconData.fontPackage");
  const matchTextDirection$ = Symbol("IconData.matchTextDirection");
  dart.setLibraryUri(src__widgets__icon_data.IconData, "package:flutter_web/src/widgets/icon_data.dart");
  dart.setFieldSignature(src__widgets__icon_data.IconData, () => ({
    __proto__: dart.getFields(src__widgets__icon_data.IconData.__proto__),
    codePoint: dart.finalFieldType(core.int),
    fontFamily: dart.finalFieldType(core.String),
    fontPackage: dart.finalFieldType(core.String),
    matchTextDirection: dart.finalFieldType(core.bool)
  }));
  dart.defineExtensionMethods(src__widgets__icon_data.IconData, ['_equals', 'toString']);
  dart.defineExtensionAccessors(src__widgets__icon_data.IconData, ['hashCode']);
  const _velocityTracker = dart.privateName(src__gestures__multidrag, "_velocityTracker");
  const _client = dart.privateName(src__gestures__multidrag, "_client");
  const _pendingDelta = dart.privateName(src__gestures__multidrag, "_pendingDelta");
  const _lastPendingEventTimestamp = dart.privateName(src__gestures__multidrag, "_lastPendingEventTimestamp");
  const _arenaEntry = dart.privateName(src__gestures__multidrag, "_arenaEntry");
  const _setArenaEntry = dart.privateName(src__gestures__multidrag, "_setArenaEntry");
  const _move = dart.privateName(src__gestures__multidrag, "_move");
  const _startDrag = dart.privateName(src__gestures__multidrag, "_startDrag");
  const _up = dart.privateName(src__gestures__multidrag, "_up");
  const _cancel = dart.privateName(src__gestures__multidrag, "_cancel");
  src__gestures__multidrag.MultiDragPointerState = class MultiDragPointerState extends core.Object {
    get initialPosition() {
      return this[initialPosition$];
    }
    set initialPosition(value) {
      super.initialPosition = value;
    }
    get pendingDelta() {
      return this[_pendingDelta];
    }
    [_setArenaEntry](entry) {
      if (!(this[_arenaEntry] == null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 52, 12, "_arenaEntry == null");
      if (!(this.pendingDelta != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 53, 12, "pendingDelta != null");
      if (!(this[_client] == null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 54, 12, "_client == null");
      this[_arenaEntry] = entry;
    }
    resolve(disposition) {
      this[_arenaEntry].resolve(disposition);
    }
    [_move](event) {
      if (!(this[_arenaEntry] != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 66, 12, "_arenaEntry != null");
      if (!dart.test(event.synthesized)) this[_velocityTracker].addPosition(event.timeStamp, event.position);
      if (this[_client] != null) {
        if (!(this.pendingDelta == null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 70, 14, "pendingDelta == null");
        this[_client].update(new src__gestures__drag_details.DragUpdateDetails.new({sourceTimeStamp: event.timeStamp, delta: event.delta, globalPosition: event.position}));
      } else {
        if (!(this.pendingDelta != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 78, 14, "pendingDelta != null");
        this[_pendingDelta] = this[_pendingDelta]['+'](event.delta);
        this[_lastPendingEventTimestamp] = event.timeStamp;
        this.checkForResolutionAfterMove();
      }
    }
    checkForResolutionAfterMove() {
    }
    rejected() {
      if (!(this[_arenaEntry] != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 104, 12, "_arenaEntry != null");
      if (!(this[_client] == null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 105, 12, "_client == null");
      if (!(this.pendingDelta != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 106, 12, "pendingDelta != null");
      this[_pendingDelta] = null;
      this[_lastPendingEventTimestamp] = null;
      this[_arenaEntry] = null;
    }
    [_startDrag](client) {
      if (!(this[_arenaEntry] != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 113, 12, "_arenaEntry != null");
      if (!(this[_client] == null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 114, 12, "_client == null");
      if (!(client != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 115, 12, "client != null");
      if (!(this.pendingDelta != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 116, 12, "pendingDelta != null");
      this[_client] = client;
      let details = new src__gestures__drag_details.DragUpdateDetails.new({sourceTimeStamp: this[_lastPendingEventTimestamp], delta: this.pendingDelta, globalPosition: this.initialPosition});
      this[_pendingDelta] = null;
      this[_lastPendingEventTimestamp] = null;
      this[_client].update(details);
    }
    [_up]() {
      if (!(this[_arenaEntry] != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 130, 12, "_arenaEntry != null");
      if (this[_client] != null) {
        if (!(this.pendingDelta == null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 132, 14, "pendingDelta == null");
        let details = new src__gestures__drag_details.DragEndDetails.new({velocity: this[_velocityTracker].getVelocity()});
        let client = this[_client];
        this[_client] = null;
        client.end(details);
      } else {
        if (!(this.pendingDelta != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 139, 14, "pendingDelta != null");
        this[_pendingDelta] = null;
        this[_lastPendingEventTimestamp] = null;
      }
    }
    [_cancel]() {
      if (!(this[_arenaEntry] != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 146, 12, "_arenaEntry != null");
      if (this[_client] != null) {
        if (!(this.pendingDelta == null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 148, 14, "pendingDelta == null");
        let client = this[_client];
        this[_client] = null;
        client.cancel();
      } else {
        if (!(this.pendingDelta != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 154, 14, "pendingDelta != null");
        this[_pendingDelta] = null;
        this[_lastPendingEventTimestamp] = null;
      }
    }
    dispose() {
      let t16;
      t16 = this[_arenaEntry];
      t16 == null ? null : t16.resolve(src__gestures__arena.GestureDisposition.rejected);
      this[_arenaEntry] = null;
      if (!dart.test(dart.fn(() => {
        this[_pendingDelta] = null;
        return true;
      }, VoidTobool())())) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 166, 12, "() { _pendingDelta = null; return true; }()");
    }
  };
  (src__gestures__multidrag.MultiDragPointerState.new = function(initialPosition) {
    this[_velocityTracker] = new src__gestures__velocity_tracker.VelocityTracker.new();
    this[_client] = null;
    this[_pendingDelta] = ui$.Offset.zero;
    this[_lastPendingEventTimestamp] = null;
    this[_arenaEntry] = null;
    this[initialPosition$] = initialPosition;
    if (!(initialPosition != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 31, 14, "initialPosition != null");
    ;
  }).prototype = src__gestures__multidrag.MultiDragPointerState.prototype;
  dart.addTypeTests(src__gestures__multidrag.MultiDragPointerState);
  const initialPosition$ = Symbol("MultiDragPointerState.initialPosition");
  dart.setMethodSignature(src__gestures__multidrag.MultiDragPointerState, () => ({
    __proto__: dart.getMethods(src__gestures__multidrag.MultiDragPointerState.__proto__),
    [_setArenaEntry]: dart.fnType(dart.void, [src__gestures__arena.GestureArenaEntry]),
    resolve: dart.fnType(dart.void, [src__gestures__arena.GestureDisposition]),
    [_move]: dart.fnType(dart.void, [src__gestures__events.PointerMoveEvent]),
    checkForResolutionAfterMove: dart.fnType(dart.void, []),
    rejected: dart.fnType(dart.void, []),
    [_startDrag]: dart.fnType(dart.void, [src__gestures__drag.Drag]),
    [_up]: dart.fnType(dart.void, []),
    [_cancel]: dart.fnType(dart.void, []),
    dispose: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(src__gestures__multidrag.MultiDragPointerState, () => ({
    __proto__: dart.getGetters(src__gestures__multidrag.MultiDragPointerState.__proto__),
    pendingDelta: ui$.Offset
  }));
  dart.setLibraryUri(src__gestures__multidrag.MultiDragPointerState, "package:flutter_web/src/gestures/multidrag.dart");
  dart.setFieldSignature(src__gestures__multidrag.MultiDragPointerState, () => ({
    __proto__: dart.getFields(src__gestures__multidrag.MultiDragPointerState.__proto__),
    initialPosition: dart.finalFieldType(ui$.Offset),
    [_velocityTracker]: dart.finalFieldType(src__gestures__velocity_tracker.VelocityTracker),
    [_client]: dart.fieldType(src__gestures__drag.Drag),
    [_pendingDelta]: dart.fieldType(ui$.Offset),
    [_lastPendingEventTimestamp]: dart.fieldType(core.Duration),
    [_arenaEntry]: dart.fieldType(src__gestures__arena.GestureArenaEntry)
  }));
  const _pointers = dart.privateName(src__gestures__multidrag, "_pointers");
  const _handleEvent = dart.privateName(src__gestures__multidrag, "_handleEvent");
  const _removeState = dart.privateName(src__gestures__multidrag, "_removeState");
  const _is_MultiDragGestureRecognizer_default = Symbol('_is_MultiDragGestureRecognizer_default');
  src__gestures__multidrag.MultiDragGestureRecognizer$ = dart.generic(T => {
    let IdentityMapOfint$T = () => (IdentityMapOfint$T = dart.constFn(_js_helper.IdentityMap$(core.int, T)))();
    class MultiDragGestureRecognizer extends src__gestures__recognizer.GestureRecognizer {
      get onStart() {
        return this[onStart];
      }
      set onStart(value) {
        this[onStart] = value;
      }
      addAllowedPointer(event) {
        if (!(this[_pointers] != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 207, 12, "_pointers != null");
        if (!(event.pointer != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 208, 12, "event.pointer != null");
        if (!(event.position != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 209, 12, "event.position != null");
        if (!!dart.test(this[_pointers][$containsKey](event.pointer))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 210, 12, "!_pointers.containsKey(event.pointer)");
        let state = this.createNewPointerState(event);
        this[_pointers][$_set](event.pointer, state);
        src__gestures__binding.GestureBinding.instance.pointerRouter.addRoute(event.pointer, dart.bind(this, _handleEvent));
        state[_setArenaEntry](src__gestures__binding.GestureBinding.instance.gestureArena.add(event.pointer, this));
      }
      [_handleEvent](event) {
        if (!(this[_pointers] != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 223, 12, "_pointers != null");
        if (!(event.pointer != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 224, 12, "event.pointer != null");
        if (!(event.timeStamp != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 225, 12, "event.timeStamp != null");
        if (!(event.position != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 226, 12, "event.position != null");
        if (!dart.test(this[_pointers][$containsKey](event.pointer))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 227, 12, "_pointers.containsKey(event.pointer)");
        let state = this[_pointers][$_get](event.pointer);
        if (src__gestures__events.PointerMoveEvent.is(event)) {
          state[_move](event);
        } else if (src__gestures__events.PointerUpEvent.is(event)) {
          if (!dart.equals(event.delta, ui$.Offset.zero)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 233, 14, "event.delta == Offset.zero");
          state[_up]();
          this[_removeState](event.pointer);
        } else if (src__gestures__events.PointerCancelEvent.is(event)) {
          if (!dart.equals(event.delta, ui$.Offset.zero)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 238, 14, "event.delta == Offset.zero");
          state[_cancel]();
          this[_removeState](event.pointer);
        } else if (!src__gestures__events.PointerDownEvent.is(event)) {
          if (!false) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 246, 14, "false");
        }
      }
      acceptGesture(pointer) {
        if (!(this[_pointers] != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 252, 12, "_pointers != null");
        let state = this[_pointers][$_get](pointer);
        if (state == null) return;
        state.accepted(dart.fn(initialPosition => this[_startDrag](initialPosition, pointer), OffsetToDrag()));
      }
      [_startDrag](initialPosition, pointer) {
        if (!(this[_pointers] != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 260, 12, "_pointers != null");
        let state = this[_pointers][$_get](pointer);
        if (!(state != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 262, 12, "state != null");
        if (!(state[_pendingDelta] != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 263, 12, "state._pendingDelta != null");
        let drag = null;
        if (this.onStart != null) drag = this.invokeCallback(src__gestures__drag.Drag, "onStart", dart.fn(() => this.onStart(initialPosition), VoidToDrag()));
        if (drag != null) {
          state[_startDrag](drag);
        } else {
          this[_removeState](pointer);
        }
        return drag;
      }
      rejectGesture(pointer) {
        if (!(this[_pointers] != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 277, 12, "_pointers != null");
        if (dart.test(this[_pointers][$containsKey](pointer))) {
          let state = this[_pointers][$_get](pointer);
          if (!(state != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 280, 14, "state != null");
          state.rejected();
          this[_removeState](pointer);
        }
      }
      [_removeState](pointer) {
        if (this[_pointers] == null) {
          return;
        }
        if (!dart.test(this[_pointers][$containsKey](pointer))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 292, 12, "_pointers.containsKey(pointer)");
        src__gestures__binding.GestureBinding.instance.pointerRouter.removeRoute(pointer, dart.bind(this, _handleEvent));
        this[_pointers][$remove](pointer).dispose();
      }
      dispose() {
        this[_pointers][$keys][$toList]()[$forEach](dart.bind(this, _removeState));
        if (!dart.test(this[_pointers][$isEmpty])) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 300, 12, "_pointers.isEmpty");
        this[_pointers] = null;
        super.dispose();
      }
    }
    (MultiDragGestureRecognizer.new = function(opts) {
      let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
      let kind = opts && 'kind' in opts ? opts.kind : null;
      this[onStart] = null;
      this[_pointers] = new (IdentityMapOfint$T()).new();
      MultiDragGestureRecognizer.__proto__.new.call(this, {debugOwner: debugOwner, kind: kind});
      ;
    }).prototype = MultiDragGestureRecognizer.prototype;
    dart.addTypeTests(MultiDragGestureRecognizer);
    MultiDragGestureRecognizer.prototype[_is_MultiDragGestureRecognizer_default] = true;
    const onStart = Symbol("MultiDragGestureRecognizer.onStart");
    dart.setMethodSignature(MultiDragGestureRecognizer, () => ({
      __proto__: dart.getMethods(MultiDragGestureRecognizer.__proto__),
      [_handleEvent]: dart.fnType(dart.void, [src__gestures__events.PointerEvent]),
      acceptGesture: dart.fnType(dart.void, [core.int]),
      [_startDrag]: dart.fnType(src__gestures__drag.Drag, [ui$.Offset, core.int]),
      rejectGesture: dart.fnType(dart.void, [core.int]),
      [_removeState]: dart.fnType(dart.void, [core.int])
    }));
    dart.setLibraryUri(MultiDragGestureRecognizer, "package:flutter_web/src/gestures/multidrag.dart");
    dart.setFieldSignature(MultiDragGestureRecognizer, () => ({
      __proto__: dart.getFields(MultiDragGestureRecognizer.__proto__),
      onStart: dart.fieldType(dart.fnType(src__gestures__drag.Drag, [ui$.Offset])),
      [_pointers]: dart.fieldType(core.Map$(core.int, T))
    }));
    return MultiDragGestureRecognizer;
  });
  src__gestures__multidrag.MultiDragGestureRecognizer = src__gestures__multidrag.MultiDragGestureRecognizer$();
  dart.addTypeTests(src__gestures__multidrag.MultiDragGestureRecognizer, _is_MultiDragGestureRecognizer_default);
  src__gestures__multidrag._ImmediatePointerState = class _ImmediatePointerState extends src__gestures__multidrag.MultiDragPointerState {
    checkForResolutionAfterMove() {
      if (!(this.pendingDelta != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 311, 12, "pendingDelta != null");
      if (dart.notNull(this.pendingDelta.distance) > dart.notNull(src__gestures__constants.kTouchSlop)) this.resolve(src__gestures__arena.GestureDisposition.accepted);
    }
    accepted(starter) {
      starter(this.initialPosition);
    }
  };
  (src__gestures__multidrag._ImmediatePointerState.new = function(initialPosition) {
    src__gestures__multidrag._ImmediatePointerState.__proto__.new.call(this, initialPosition);
    ;
  }).prototype = src__gestures__multidrag._ImmediatePointerState.prototype;
  dart.addTypeTests(src__gestures__multidrag._ImmediatePointerState);
  dart.setMethodSignature(src__gestures__multidrag._ImmediatePointerState, () => ({
    __proto__: dart.getMethods(src__gestures__multidrag._ImmediatePointerState.__proto__),
    accepted: dart.fnType(dart.void, [dart.fnType(src__gestures__drag.Drag, [ui$.Offset])])
  }));
  dart.setLibraryUri(src__gestures__multidrag._ImmediatePointerState, "package:flutter_web/src/gestures/multidrag.dart");
  src__gestures__multidrag.ImmediateMultiDragGestureRecognizer = class ImmediateMultiDragGestureRecognizer extends src__gestures__multidrag.MultiDragGestureRecognizer$(src__gestures__multidrag._ImmediatePointerState) {
    createNewPointerState(event) {
      return new src__gestures__multidrag._ImmediatePointerState.new(event.position);
    }
    get debugDescription() {
      return "multidrag";
    }
  };
  (src__gestures__multidrag.ImmediateMultiDragGestureRecognizer.new = function(opts) {
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    let kind = opts && 'kind' in opts ? opts.kind : null;
    src__gestures__multidrag.ImmediateMultiDragGestureRecognizer.__proto__.new.call(this, {debugOwner: debugOwner, kind: kind});
    ;
  }).prototype = src__gestures__multidrag.ImmediateMultiDragGestureRecognizer.prototype;
  dart.addTypeTests(src__gestures__multidrag.ImmediateMultiDragGestureRecognizer);
  dart.setMethodSignature(src__gestures__multidrag.ImmediateMultiDragGestureRecognizer, () => ({
    __proto__: dart.getMethods(src__gestures__multidrag.ImmediateMultiDragGestureRecognizer.__proto__),
    createNewPointerState: dart.fnType(src__gestures__multidrag._ImmediatePointerState, [src__gestures__events.PointerDownEvent])
  }));
  dart.setGetterSignature(src__gestures__multidrag.ImmediateMultiDragGestureRecognizer, () => ({
    __proto__: dart.getGetters(src__gestures__multidrag.ImmediateMultiDragGestureRecognizer.__proto__),
    debugDescription: core.String
  }));
  dart.setLibraryUri(src__gestures__multidrag.ImmediateMultiDragGestureRecognizer, "package:flutter_web/src/gestures/multidrag.dart");
  src__gestures__multidrag._HorizontalPointerState = class _HorizontalPointerState extends src__gestures__multidrag.MultiDragPointerState {
    checkForResolutionAfterMove() {
      if (!(this.pendingDelta != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 360, 12, "pendingDelta != null");
      if (this.pendingDelta.dx[$abs]() > dart.notNull(src__gestures__constants.kTouchSlop)) this.resolve(src__gestures__arena.GestureDisposition.accepted);
    }
    accepted(starter) {
      starter(this.initialPosition);
    }
  };
  (src__gestures__multidrag._HorizontalPointerState.new = function(initialPosition) {
    src__gestures__multidrag._HorizontalPointerState.__proto__.new.call(this, initialPosition);
    ;
  }).prototype = src__gestures__multidrag._HorizontalPointerState.prototype;
  dart.addTypeTests(src__gestures__multidrag._HorizontalPointerState);
  dart.setMethodSignature(src__gestures__multidrag._HorizontalPointerState, () => ({
    __proto__: dart.getMethods(src__gestures__multidrag._HorizontalPointerState.__proto__),
    accepted: dart.fnType(dart.void, [dart.fnType(src__gestures__drag.Drag, [ui$.Offset])])
  }));
  dart.setLibraryUri(src__gestures__multidrag._HorizontalPointerState, "package:flutter_web/src/gestures/multidrag.dart");
  src__gestures__multidrag.HorizontalMultiDragGestureRecognizer = class HorizontalMultiDragGestureRecognizer extends src__gestures__multidrag.MultiDragGestureRecognizer$(src__gestures__multidrag._HorizontalPointerState) {
    createNewPointerState(event) {
      return new src__gestures__multidrag._HorizontalPointerState.new(event.position);
    }
    get debugDescription() {
      return "horizontal multidrag";
    }
  };
  (src__gestures__multidrag.HorizontalMultiDragGestureRecognizer.new = function(opts) {
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    let kind = opts && 'kind' in opts ? opts.kind : null;
    src__gestures__multidrag.HorizontalMultiDragGestureRecognizer.__proto__.new.call(this, {debugOwner: debugOwner, kind: kind});
    ;
  }).prototype = src__gestures__multidrag.HorizontalMultiDragGestureRecognizer.prototype;
  dart.addTypeTests(src__gestures__multidrag.HorizontalMultiDragGestureRecognizer);
  dart.setMethodSignature(src__gestures__multidrag.HorizontalMultiDragGestureRecognizer, () => ({
    __proto__: dart.getMethods(src__gestures__multidrag.HorizontalMultiDragGestureRecognizer.__proto__),
    createNewPointerState: dart.fnType(src__gestures__multidrag._HorizontalPointerState, [src__gestures__events.PointerDownEvent])
  }));
  dart.setGetterSignature(src__gestures__multidrag.HorizontalMultiDragGestureRecognizer, () => ({
    __proto__: dart.getGetters(src__gestures__multidrag.HorizontalMultiDragGestureRecognizer.__proto__),
    debugDescription: core.String
  }));
  dart.setLibraryUri(src__gestures__multidrag.HorizontalMultiDragGestureRecognizer, "package:flutter_web/src/gestures/multidrag.dart");
  src__gestures__multidrag._VerticalPointerState = class _VerticalPointerState extends src__gestures__multidrag.MultiDragPointerState {
    checkForResolutionAfterMove() {
      if (!(this.pendingDelta != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 409, 12, "pendingDelta != null");
      if (this.pendingDelta.dy[$abs]() > dart.notNull(src__gestures__constants.kTouchSlop)) this.resolve(src__gestures__arena.GestureDisposition.accepted);
    }
    accepted(starter) {
      starter(this.initialPosition);
    }
  };
  (src__gestures__multidrag._VerticalPointerState.new = function(initialPosition) {
    src__gestures__multidrag._VerticalPointerState.__proto__.new.call(this, initialPosition);
    ;
  }).prototype = src__gestures__multidrag._VerticalPointerState.prototype;
  dart.addTypeTests(src__gestures__multidrag._VerticalPointerState);
  dart.setMethodSignature(src__gestures__multidrag._VerticalPointerState, () => ({
    __proto__: dart.getMethods(src__gestures__multidrag._VerticalPointerState.__proto__),
    accepted: dart.fnType(dart.void, [dart.fnType(src__gestures__drag.Drag, [ui$.Offset])])
  }));
  dart.setLibraryUri(src__gestures__multidrag._VerticalPointerState, "package:flutter_web/src/gestures/multidrag.dart");
  src__gestures__multidrag.VerticalMultiDragGestureRecognizer = class VerticalMultiDragGestureRecognizer extends src__gestures__multidrag.MultiDragGestureRecognizer$(src__gestures__multidrag._VerticalPointerState) {
    createNewPointerState(event) {
      return new src__gestures__multidrag._VerticalPointerState.new(event.position);
    }
    get debugDescription() {
      return "vertical multidrag";
    }
  };
  (src__gestures__multidrag.VerticalMultiDragGestureRecognizer.new = function(opts) {
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    let kind = opts && 'kind' in opts ? opts.kind : null;
    src__gestures__multidrag.VerticalMultiDragGestureRecognizer.__proto__.new.call(this, {debugOwner: debugOwner, kind: kind});
    ;
  }).prototype = src__gestures__multidrag.VerticalMultiDragGestureRecognizer.prototype;
  dart.addTypeTests(src__gestures__multidrag.VerticalMultiDragGestureRecognizer);
  dart.setMethodSignature(src__gestures__multidrag.VerticalMultiDragGestureRecognizer, () => ({
    __proto__: dart.getMethods(src__gestures__multidrag.VerticalMultiDragGestureRecognizer.__proto__),
    createNewPointerState: dart.fnType(src__gestures__multidrag._VerticalPointerState, [src__gestures__events.PointerDownEvent])
  }));
  dart.setGetterSignature(src__gestures__multidrag.VerticalMultiDragGestureRecognizer, () => ({
    __proto__: dart.getGetters(src__gestures__multidrag.VerticalMultiDragGestureRecognizer.__proto__),
    debugDescription: core.String
  }));
  dart.setLibraryUri(src__gestures__multidrag.VerticalMultiDragGestureRecognizer, "package:flutter_web/src/gestures/multidrag.dart");
  const _timer$ = dart.privateName(src__gestures__multidrag, "_timer");
  const _starter = dart.privateName(src__gestures__multidrag, "_starter");
  const _delayPassed = dart.privateName(src__gestures__multidrag, "_delayPassed");
  const _ensureTimerStopped = dart.privateName(src__gestures__multidrag, "_ensureTimerStopped");
  src__gestures__multidrag._DelayedPointerState = class _DelayedPointerState extends src__gestures__multidrag.MultiDragPointerState {
    [_delayPassed]() {
      if (!(this[_timer$] != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 463, 12, "_timer != null");
      if (!(this.pendingDelta != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 464, 12, "pendingDelta != null");
      if (!(dart.notNull(this.pendingDelta.distance) <= dart.notNull(src__gestures__constants.kTouchSlop))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 465, 12, "pendingDelta.distance <= kTouchSlop");
      this[_timer$] = null;
      if (this[_starter] != null) {
        this[_starter](this.initialPosition);
        this[_starter] = null;
      } else {
        this.resolve(src__gestures__arena.GestureDisposition.accepted);
      }
      if (!(this[_starter] == null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 473, 12, "_starter == null");
    }
    [_ensureTimerStopped]() {
      let t16;
      t16 = this[_timer$];
      t16 == null ? null : t16.cancel();
      this[_timer$] = null;
    }
    accepted(starter) {
      if (!(this[_starter] == null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 483, 12, "_starter == null");
      if (this[_timer$] == null)
        starter(this.initialPosition);
      else
        this[_starter] = starter;
    }
    checkForResolutionAfterMove() {
      if (this[_timer$] == null) {
        if (!(this[_starter] != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 498, 14, "_starter != null");
        return;
      }
      if (!(this.pendingDelta != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 501, 12, "pendingDelta != null");
      if (dart.notNull(this.pendingDelta.distance) > dart.notNull(src__gestures__constants.kTouchSlop)) {
        this.resolve(src__gestures__arena.GestureDisposition.rejected);
        this[_ensureTimerStopped]();
      }
    }
    dispose() {
      this[_ensureTimerStopped]();
      super.dispose();
    }
  };
  (src__gestures__multidrag._DelayedPointerState.new = function(initialPosition, delay) {
    this[_timer$] = null;
    this[_starter] = null;
    if (!(delay != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 454, 16, "delay != null");
    src__gestures__multidrag._DelayedPointerState.__proto__.new.call(this, initialPosition);
    this[_timer$] = async.Timer.new(delay, dart.bind(this, _delayPassed));
  }).prototype = src__gestures__multidrag._DelayedPointerState.prototype;
  dart.addTypeTests(src__gestures__multidrag._DelayedPointerState);
  dart.setMethodSignature(src__gestures__multidrag._DelayedPointerState, () => ({
    __proto__: dart.getMethods(src__gestures__multidrag._DelayedPointerState.__proto__),
    [_delayPassed]: dart.fnType(dart.void, []),
    [_ensureTimerStopped]: dart.fnType(dart.void, []),
    accepted: dart.fnType(dart.void, [dart.fnType(src__gestures__drag.Drag, [ui$.Offset])])
  }));
  dart.setLibraryUri(src__gestures__multidrag._DelayedPointerState, "package:flutter_web/src/gestures/multidrag.dart");
  dart.setFieldSignature(src__gestures__multidrag._DelayedPointerState, () => ({
    __proto__: dart.getFields(src__gestures__multidrag._DelayedPointerState.__proto__),
    [_timer$]: dart.fieldType(async.Timer),
    [_starter]: dart.fieldType(dart.fnType(src__gestures__drag.Drag, [ui$.Offset]))
  }));
  src__gestures__multidrag.DelayedMultiDragGestureRecognizer = class DelayedMultiDragGestureRecognizer extends src__gestures__multidrag.MultiDragGestureRecognizer$(src__gestures__multidrag._DelayedPointerState) {
    get delay() {
      return this[delay$];
    }
    set delay(value) {
      super.delay = value;
    }
    createNewPointerState(event) {
      return new src__gestures__multidrag._DelayedPointerState.new(event.position, this.delay);
    }
    get debugDescription() {
      return "long multidrag";
    }
  };
  (src__gestures__multidrag.DelayedMultiDragGestureRecognizer.new = function(opts) {
    let delay = opts && 'delay' in opts ? opts.delay : src__gestures__constants.kLongPressTimeout;
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    let kind = opts && 'kind' in opts ? opts.kind : null;
    this[delay$] = delay;
    if (!(delay != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart", 544, 15, "delay != null");
    src__gestures__multidrag.DelayedMultiDragGestureRecognizer.__proto__.new.call(this, {debugOwner: debugOwner, kind: kind});
    ;
  }).prototype = src__gestures__multidrag.DelayedMultiDragGestureRecognizer.prototype;
  dart.addTypeTests(src__gestures__multidrag.DelayedMultiDragGestureRecognizer);
  const delay$ = Symbol("DelayedMultiDragGestureRecognizer.delay");
  dart.setMethodSignature(src__gestures__multidrag.DelayedMultiDragGestureRecognizer, () => ({
    __proto__: dart.getMethods(src__gestures__multidrag.DelayedMultiDragGestureRecognizer.__proto__),
    createNewPointerState: dart.fnType(src__gestures__multidrag._DelayedPointerState, [src__gestures__events.PointerDownEvent])
  }));
  dart.setGetterSignature(src__gestures__multidrag.DelayedMultiDragGestureRecognizer, () => ({
    __proto__: dart.getGetters(src__gestures__multidrag.DelayedMultiDragGestureRecognizer.__proto__),
    debugDescription: core.String
  }));
  dart.setLibraryUri(src__gestures__multidrag.DelayedMultiDragGestureRecognizer, "package:flutter_web/src/gestures/multidrag.dart");
  dart.setFieldSignature(src__gestures__multidrag.DelayedMultiDragGestureRecognizer, () => ({
    __proto__: dart.getFields(src__gestures__multidrag.DelayedMultiDragGestureRecognizer.__proto__),
    delay: dart.finalFieldType(core.Duration)
  }));
  const _scaleAlpha = dart.privateName(src__painting__colors, "_scaleAlpha");
  src__painting__colors.HSVColor = class HSVColor extends core.Object {
    get alpha() {
      return this[alpha$];
    }
    set alpha(value) {
      super.alpha = value;
    }
    get hue() {
      return this[hue$];
    }
    set hue(value) {
      super.hue = value;
    }
    get saturation() {
      return this[saturation$];
    }
    set saturation(value) {
      super.saturation = value;
    }
    get value() {
      return this[value$];
    }
    set value(value) {
      super.value = value;
    }
    static fromColor(color) {
      let red = dart.notNull(color.red) / 255;
      let green = dart.notNull(color.green) / 255;
      let blue = dart.notNull(color.blue) / 255;
      let max = math.max(core.double, red, math.max(core.double, green, blue));
      let min = math.min(core.double, red, math.min(core.double, green, blue));
      let delta = max - min;
      let alpha = dart.notNull(color.alpha) / 255;
      let hue = src__painting__colors._getHue(red, green, blue, max, delta);
      let saturation = max === 0.0 ? 0.0 : delta / max;
      return new src__painting__colors.HSVColor.fromAHSV(alpha, hue, saturation, max);
    }
    withAlpha(alpha) {
      return new src__painting__colors.HSVColor.fromAHSV(alpha, this.hue, this.saturation, this.value);
    }
    withHue(hue) {
      return new src__painting__colors.HSVColor.fromAHSV(this.alpha, hue, this.saturation, this.value);
    }
    withSaturation(saturation) {
      return new src__painting__colors.HSVColor.fromAHSV(this.alpha, this.hue, saturation, this.value);
    }
    withValue(value) {
      return new src__painting__colors.HSVColor.fromAHSV(this.alpha, this.hue, this.saturation, value);
    }
    toColor() {
      let chroma = dart.notNull(this.saturation) * dart.notNull(this.value);
      let secondary = chroma * (1.0 - ((dart.notNull(this.hue) / 60.0)[$modulo](2.0) - 1.0)[$abs]());
      let match = dart.notNull(this.value) - chroma;
      return src__painting__colors._colorFromHue(this.alpha, this.hue, chroma, secondary, match);
    }
    [_scaleAlpha](factor) {
      return this.withAlpha(dart.notNull(this.alpha) * dart.notNull(factor));
    }
    static lerp(a, b, t) {
      if (!(t != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/colors.dart", 202, 12, "t != null");
      if (a == null && b == null) return null;
      if (a == null) return b[_scaleAlpha](t);
      if (b == null) return a[_scaleAlpha](1.0 - dart.notNull(t));
      return new src__painting__colors.HSVColor.fromAHSV(ui$.lerpDouble(a.alpha, b.alpha, t)[$clamp](0.0, 1.0), ui$.lerpDouble(a.hue, b.hue, t)[$modulo](360.0), ui$.lerpDouble(a.saturation, b.saturation, t)[$clamp](0.0, 1.0), ui$.lerpDouble(a.value, b.value, t)[$clamp](0.0, 1.0));
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!src__painting__colors.HSVColor.is(other)) return false;
      let typedOther = src__painting__colors.HSVColor._check(other);
      return typedOther.alpha == this.alpha && typedOther.hue == this.hue && typedOther.saturation == this.saturation && typedOther.value == this.value;
    }
    get hashCode() {
      return ui$.hashValues(this.alpha, this.hue, this.saturation, this.value);
    }
    toString() {
      return dart.str(this[$runtimeType]) + "(" + dart.str(this.alpha) + ", " + dart.str(this.hue) + ", " + dart.str(this.saturation) + ", " + dart.str(this.value) + ")";
    }
  };
  (src__painting__colors.HSVColor.fromAHSV = function(alpha, hue, saturation, value) {
    this[alpha$] = alpha;
    this[hue$] = hue;
    this[saturation$] = saturation;
    this[value$] = value;
    if (!(alpha != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/colors.dart", 93, 14, "alpha != null");
    if (!(hue != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/colors.dart", 94, 14, "hue != null");
    if (!(saturation != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/colors.dart", 95, 14, "saturation != null");
    if (!(value != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/colors.dart", 96, 14, "value != null");
    if (!(dart.notNull(alpha) >= 0.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/colors.dart", 97, 14, "alpha >= 0.0");
    if (!(dart.notNull(alpha) <= 1.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/colors.dart", 98, 14, "alpha <= 1.0");
    if (!(dart.notNull(hue) >= 0.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/colors.dart", 99, 14, "hue >= 0.0");
    if (!(dart.notNull(hue) <= 360.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/colors.dart", 100, 14, "hue <= 360.0");
    if (!(dart.notNull(saturation) >= 0.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/colors.dart", 101, 14, "saturation >= 0.0");
    if (!(dart.notNull(saturation) <= 1.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/colors.dart", 102, 14, "saturation <= 1.0");
    if (!(dart.notNull(value) >= 0.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/colors.dart", 103, 14, "value >= 0.0");
    if (!(dart.notNull(value) <= 1.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/colors.dart", 104, 14, "value <= 1.0");
    ;
  }).prototype = src__painting__colors.HSVColor.prototype;
  dart.addTypeTests(src__painting__colors.HSVColor);
  const alpha$ = Symbol("HSVColor.alpha");
  const hue$ = Symbol("HSVColor.hue");
  const saturation$ = Symbol("HSVColor.saturation");
  const value$ = Symbol("HSVColor.value");
  dart.setMethodSignature(src__painting__colors.HSVColor, () => ({
    __proto__: dart.getMethods(src__painting__colors.HSVColor.__proto__),
    withAlpha: dart.fnType(src__painting__colors.HSVColor, [core.double]),
    withHue: dart.fnType(src__painting__colors.HSVColor, [core.double]),
    withSaturation: dart.fnType(src__painting__colors.HSVColor, [core.double]),
    withValue: dart.fnType(src__painting__colors.HSVColor, [core.double]),
    toColor: dart.fnType(ui$.Color, []),
    [_scaleAlpha]: dart.fnType(src__painting__colors.HSVColor, [core.double])
  }));
  dart.setLibraryUri(src__painting__colors.HSVColor, "package:flutter_web/src/painting/colors.dart");
  dart.setFieldSignature(src__painting__colors.HSVColor, () => ({
    __proto__: dart.getFields(src__painting__colors.HSVColor.__proto__),
    alpha: dart.finalFieldType(core.double),
    hue: dart.finalFieldType(core.double),
    saturation: dart.finalFieldType(core.double),
    value: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(src__painting__colors.HSVColor, ['_equals', 'toString']);
  dart.defineExtensionAccessors(src__painting__colors.HSVColor, ['hashCode']);
  src__painting__colors.HSLColor = class HSLColor extends core.Object {
    get alpha() {
      return this[alpha$0];
    }
    set alpha(value) {
      super.alpha = value;
    }
    get hue() {
      return this[hue$0];
    }
    set hue(value) {
      super.hue = value;
    }
    get saturation() {
      return this[saturation$0];
    }
    set saturation(value) {
      super.saturation = value;
    }
    get lightness() {
      return this[lightness$];
    }
    set lightness(value) {
      super.lightness = value;
    }
    static fromColor(color) {
      let red = dart.notNull(color.red) / 255;
      let green = dart.notNull(color.green) / 255;
      let blue = dart.notNull(color.blue) / 255;
      let max = math.max(core.double, red, math.max(core.double, green, blue));
      let min = math.min(core.double, red, math.min(core.double, green, blue));
      let delta = max - min;
      let alpha = dart.notNull(color.alpha) / 255;
      let hue = src__painting__colors._getHue(red, green, blue, max, delta);
      let lightness = (max + min) / 2.0;
      let saturation = lightness === 1.0 ? 0.0 : (delta / (1.0 - (2.0 * lightness - 1.0)[$abs]()))[$clamp](0.0, 1.0);
      return new src__painting__colors.HSLColor.fromAHSL(alpha, hue, saturation, lightness);
    }
    withAlpha(alpha) {
      return new src__painting__colors.HSLColor.fromAHSL(alpha, this.hue, this.saturation, this.lightness);
    }
    withHue(hue) {
      return new src__painting__colors.HSLColor.fromAHSL(this.alpha, hue, this.saturation, this.lightness);
    }
    withSaturation(saturation) {
      return new src__painting__colors.HSLColor.fromAHSL(this.alpha, this.hue, saturation, this.lightness);
    }
    withLightness(lightness) {
      return new src__painting__colors.HSLColor.fromAHSL(this.alpha, this.hue, this.saturation, lightness);
    }
    toColor() {
      let chroma = (1.0 - (2.0 * dart.notNull(this.lightness) - 1.0)[$abs]()) * dart.notNull(this.saturation);
      let secondary = chroma * (1.0 - ((dart.notNull(this.hue) / 60.0)[$modulo](2.0) - 1.0)[$abs]());
      let match = dart.notNull(this.lightness) - chroma / 2.0;
      return src__painting__colors._colorFromHue(this.alpha, this.hue, chroma, secondary, match);
    }
    [_scaleAlpha](factor) {
      return this.withAlpha(dart.notNull(this.alpha) * dart.notNull(factor));
    }
    static lerp(a, b, t) {
      if (!(t != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/colors.dart", 388, 12, "t(t != nu");
      if (a == null && b == null) return null;
      if (a == null) return b[_scaleAlpha](t);
      if (b == null) return a[_scaleAlpha](1.0 - dart.notNull(t));
      return new src__painting__colors.HSLColor.fromAHSL(ui$.lerpDouble(a.alpha, b.alpha, t)[$clamp](0.0, 1.0), ui$.lerpDouble(a.hue, b.hue, t)[$modulo](360.0), ui$.lerpDouble(a.saturation, b.saturation, t)[$clamp](0.0, 1.0), ui$.lerpDouble(a.lightness, b.lightness, t)[$clamp](0.0, 1.0));
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!src__painting__colors.HSLColor.is(other)) return false;
      let typedOther = src__painting__colors.HSLColor._check(other);
      return typedOther.alpha == this.alpha && typedOther.hue == this.hue && typedOther.saturation == this.saturation && typedOther.lightness == this.lightness;
    }
    get hashCode() {
      return ui$.hashValues(this.alpha, this.hue, this.saturation, this.lightness);
    }
    toString() {
      return dart.str(this[$runtimeType]) + "(" + dart.str(this.alpha) + ", " + dart.str(this.hue) + ", " + dart.str(this.saturation) + ", " + dart.str(this.lightness) + ")";
    }
  };
  (src__painting__colors.HSLColor.fromAHSL = function(alpha, hue, saturation, lightness) {
    this[alpha$0] = alpha;
    this[hue$0] = hue;
    this[saturation$0] = saturation;
    this[lightness$] = lightness;
    if (!(alpha != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/colors.dart", 264, 14, "t(alpha != nu");
    if (!(hue != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/colors.dart", 265, 14, "t(hue != nu");
    if (!(saturation != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/colors.dart", 266, 14, "t(saturation != nu");
    if (!(lightness != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/colors.dart", 267, 14, "t(lightness != nu");
    if (!(dart.notNull(alpha) >= 0.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/colors.dart", 268, 14, "t(alpha >= 0");
    if (!(dart.notNull(alpha) <= 1.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/colors.dart", 269, 14, "t(alpha <= 1");
    if (!(dart.notNull(hue) >= 0.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/colors.dart", 270, 14, "t(hue >= 0");
    if (!(dart.notNull(hue) <= 360.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/colors.dart", 271, 14, "t(hue <= 360");
    if (!(dart.notNull(saturation) >= 0.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/colors.dart", 272, 14, "t(saturation >= 0");
    if (!(dart.notNull(saturation) <= 1.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/colors.dart", 273, 14, "t(saturation <= 1");
    if (!(dart.notNull(lightness) >= 0.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/colors.dart", 274, 14, "t(lightness >= 0");
    if (!(dart.notNull(lightness) <= 1.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/colors.dart", 275, 14, "t(lightness <= 1");
    ;
  }).prototype = src__painting__colors.HSLColor.prototype;
  dart.addTypeTests(src__painting__colors.HSLColor);
  const alpha$0 = Symbol("HSLColor.alpha");
  const hue$0 = Symbol("HSLColor.hue");
  const saturation$0 = Symbol("HSLColor.saturation");
  const lightness$ = Symbol("HSLColor.lightness");
  dart.setMethodSignature(src__painting__colors.HSLColor, () => ({
    __proto__: dart.getMethods(src__painting__colors.HSLColor.__proto__),
    withAlpha: dart.fnType(src__painting__colors.HSLColor, [core.double]),
    withHue: dart.fnType(src__painting__colors.HSLColor, [core.double]),
    withSaturation: dart.fnType(src__painting__colors.HSLColor, [core.double]),
    withLightness: dart.fnType(src__painting__colors.HSLColor, [core.double]),
    toColor: dart.fnType(ui$.Color, []),
    [_scaleAlpha]: dart.fnType(src__painting__colors.HSLColor, [core.double])
  }));
  dart.setLibraryUri(src__painting__colors.HSLColor, "package:flutter_web/src/painting/colors.dart");
  dart.setFieldSignature(src__painting__colors.HSLColor, () => ({
    __proto__: dart.getFields(src__painting__colors.HSLColor.__proto__),
    alpha: dart.finalFieldType(core.double),
    hue: dart.finalFieldType(core.double),
    saturation: dart.finalFieldType(core.double),
    lightness: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(src__painting__colors.HSLColor, ['_equals', 'toString']);
  dart.defineExtensionAccessors(src__painting__colors.HSLColor, ['hashCode']);
  const _swatch$ = dart.privateName(src__painting__colors, "_swatch");
  const _is_ColorSwatch_default = Symbol('_is_ColorSwatch_default');
  src__painting__colors.ColorSwatch$ = dart.generic(T => {
    let ColorSwatchOfT = () => (ColorSwatchOfT = dart.constFn(src__painting__colors.ColorSwatch$(T)))();
    class ColorSwatch extends ui$.Color {
      _get(index) {
        T._check(index);
        return this[_swatch$][$_get](index);
      }
      _equals(other) {
        if (other == null) return false;
        if (this === other) return true;
        if (!dart.equals(dart.runtimeType(other), this[$runtimeType])) return false;
        let typedOther = ColorSwatchOfT()._check(other);
        return super._equals(other) && dart.equals(this[_swatch$], typedOther[_swatch$]);
      }
      get hashCode() {
        return ui$.hashValues(this[$runtimeType], this.value, this[_swatch$]);
      }
      toString() {
        return dart.str(this[$runtimeType]) + "(primary value: " + dart.str(super.toString()) + ")";
      }
    }
    (ColorSwatch.new = function(primary, _swatch) {
      this[_swatch$] = _swatch;
      ColorSwatch.__proto__.new.call(this, primary);
      ;
    }).prototype = ColorSwatch.prototype;
    dart.addTypeTests(ColorSwatch);
    ColorSwatch.prototype[_is_ColorSwatch_default] = true;
    dart.setMethodSignature(ColorSwatch, () => ({
      __proto__: dart.getMethods(ColorSwatch.__proto__),
      _get: dart.fnType(ui$.Color, [core.Object])
    }));
    dart.setLibraryUri(ColorSwatch, "package:flutter_web/src/painting/colors.dart");
    dart.setFieldSignature(ColorSwatch, () => ({
      __proto__: dart.getFields(ColorSwatch.__proto__),
      [_swatch$]: dart.finalFieldType(core.Map$(T, ui$.Color))
    }));
    dart.defineExtensionMethods(ColorSwatch, ['_equals', 'toString']);
    dart.defineExtensionAccessors(ColorSwatch, ['hashCode']);
    return ColorSwatch;
  });
  src__painting__colors.ColorSwatch = src__painting__colors.ColorSwatch$();
  dart.addTypeTests(src__painting__colors.ColorSwatch, _is_ColorSwatch_default);
  src__painting__colors.ColorProperty = class ColorProperty extends src__foundation__diagnostics.DiagnosticsProperty$(ui$.Color) {
    toJsonMap(delegate) {
      let json = super.toJsonMap(delegate);
      if (this.value != null) {
        json[$_set]("valueProperties", new (IdentityMapOfString$Object()).from(["red", this.value.red, "green", this.value.green, "blue", this.value.blue, "alpha", this.value.alpha]));
      }
      return json;
    }
  };
  (src__painting__colors.ColorProperty.new = function(name, value, opts) {
    let showName = opts && 'showName' in opts ? opts.showName : true;
    let defaultValue = opts && 'defaultValue' in opts ? opts.defaultValue : src__foundation__diagnostics.kNoDefaultValue;
    let style = opts && 'style' in opts ? opts.style : src__foundation__diagnostics.DiagnosticsTreeStyle.singleLine;
    let level = opts && 'level' in opts ? opts.level : src__foundation__diagnostics.DiagnosticLevel.info;
    if (!(showName != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/colors.dart", 477, 15, "t(showName != nu");
    if (!(style != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/colors.dart", 478, 15, "t(style != nu");
    if (!(level != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/colors.dart", 479, 15, "t(level != nu");
    src__painting__colors.ColorProperty.__proto__.new.call(this, name, value, {defaultValue: defaultValue, showName: showName, style: style, level: level});
    ;
  }).prototype = src__painting__colors.ColorProperty.prototype;
  dart.addTypeTests(src__painting__colors.ColorProperty);
  dart.setLibraryUri(src__painting__colors.ColorProperty, "package:flutter_web/src/painting/colors.dart");
  src__painting__colors._getHue = function(red, green, blue, max, delta) {
    let hue = null;
    if (max === 0.0) {
      hue = 0.0;
    } else if (max == red) {
      hue = 60.0 * ((dart.notNull(green) - dart.notNull(blue)) / dart.notNull(delta))[$modulo](6);
    } else if (max == green) {
      hue = 60.0 * ((dart.notNull(blue) - dart.notNull(red)) / dart.notNull(delta) + 2);
    } else if (max == blue) {
      hue = 60.0 * ((dart.notNull(red) - dart.notNull(green)) / dart.notNull(delta) + 4);
    }
    hue = hue[$isNaN] ? 0.0 : hue;
    return hue;
  };
  src__painting__colors._colorFromHue = function(alpha, hue, chroma, secondary, match) {
    let red = null;
    let green = null;
    let blue = null;
    if (dart.notNull(hue) < 60.0) {
      red = chroma;
      green = secondary;
      blue = 0.0;
    } else if (dart.notNull(hue) < 120.0) {
      red = secondary;
      green = chroma;
      blue = 0.0;
    } else if (dart.notNull(hue) < 180.0) {
      red = 0.0;
      green = chroma;
      blue = secondary;
    } else if (dart.notNull(hue) < 240.0) {
      red = 0.0;
      green = secondary;
      blue = chroma;
    } else if (dart.notNull(hue) < 300.0) {
      red = secondary;
      green = 0.0;
      blue = chroma;
    } else {
      red = chroma;
      green = 0.0;
      blue = secondary;
    }
    return new ui$.Color.fromARGB((dart.notNull(alpha) * 255)[$round](), ((dart.notNull(red) + dart.notNull(match)) * 255)[$round](), ((dart.notNull(green) + dart.notNull(match)) * 255)[$round](), ((dart.notNull(blue) + dart.notNull(match)) * 255)[$round]());
  };
  const _clipAndPaint = dart.privateName(src__painting__clip, "_clipAndPaint");
  src__painting__clip.ClipContext = class ClipContext extends core.Object {
    [_clipAndPaint](canvasClipCall, clipBehavior, bounds, painter) {
      if (!(canvasClipCall != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/clip.dart", 14, 12, "canvasClipCall != null");
      this.canvas.save();
      switch (clipBehavior) {
        case ui$.Clip.none:
        {
          break;
        }
        case ui$.Clip.hardEdge:
        {
          canvasClipCall(false);
          break;
        }
        case ui$.Clip.antiAlias:
        {
          canvasClipCall(true);
          break;
        }
        case ui$.Clip.antiAliasWithSaveLayer:
        {
          canvasClipCall(true);
          this.canvas.saveLayer(bounds, new ui$.Paint.new());
          break;
        }
      }
      painter();
      if (dart.equals(clipBehavior, ui$.Clip.antiAliasWithSaveLayer)) {
        this.canvas.restore();
      }
      this.canvas.restore();
    }
    clipPathAndPaint(path, clipBehavior, bounds, painter) {
      this[_clipAndPaint](dart.fn(doAntiAias => this.canvas.clipPath(path, {doAntiAlias: doAntiAias}), boolTovoid()), clipBehavior, bounds, painter);
    }
    clipRRectAndPaint(rrect, clipBehavior, bounds, painter) {
      this[_clipAndPaint](dart.fn(doAntiAias => this.canvas.clipRRect(rrect, {doAntiAlias: doAntiAias}), boolTovoid()), clipBehavior, bounds, painter);
    }
    clipRectAndPaint(rect, clipBehavior, bounds, painter) {
      this[_clipAndPaint](dart.fn(doAntiAias => this.canvas.clipRect(rect, {doAntiAlias: doAntiAias}), boolTovoid()), clipBehavior, bounds, painter);
    }
  };
  (src__painting__clip.ClipContext.new = function() {
    ;
  }).prototype = src__painting__clip.ClipContext.prototype;
  dart.addTypeTests(src__painting__clip.ClipContext);
  dart.setMethodSignature(src__painting__clip.ClipContext, () => ({
    __proto__: dart.getMethods(src__painting__clip.ClipContext.__proto__),
    [_clipAndPaint]: dart.fnType(dart.void, [dart.fnType(dart.void, [core.bool]), ui$.Clip, ui$.Rect, dart.fnType(dart.void, [])]),
    clipPathAndPaint: dart.fnType(dart.void, [ui$.Path, ui$.Clip, ui$.Rect, dart.fnType(dart.void, [])]),
    clipRRectAndPaint: dart.fnType(dart.void, [ui$.RRect, ui$.Clip, ui$.Rect, dart.fnType(dart.void, [])]),
    clipRectAndPaint: dart.fnType(dart.void, [ui$.Rect, ui$.Clip, ui$.Rect, dart.fnType(dart.void, [])])
  }));
  dart.setLibraryUri(src__painting__clip.ClipContext, "package:flutter_web/src/painting/clip.dart");
  const _frictionSimulation = dart.privateName(src__widgets__scroll_simulation, "_frictionSimulation");
  const _springSimulation = dart.privateName(src__widgets__scroll_simulation, "_springSimulation");
  const _springTime = dart.privateName(src__widgets__scroll_simulation, "_springTime");
  const _timeOffset = dart.privateName(src__widgets__scroll_simulation, "_timeOffset");
  const _underscrollSimulation = dart.privateName(src__widgets__scroll_simulation, "_underscrollSimulation");
  const _overscrollSimulation = dart.privateName(src__widgets__scroll_simulation, "_overscrollSimulation");
  const _simulation = dart.privateName(src__widgets__scroll_simulation, "_simulation");
  src__widgets__scroll_simulation.BouncingScrollSimulation = class BouncingScrollSimulation extends src__physics__simulation.Simulation {
    get leadingExtent() {
      return this[leadingExtent$];
    }
    set leadingExtent(value) {
      super.leadingExtent = value;
    }
    get trailingExtent() {
      return this[trailingExtent$];
    }
    set trailingExtent(value) {
      super.trailingExtent = value;
    }
    get spring() {
      return this[spring$];
    }
    set spring(value) {
      super.spring = value;
    }
    [_underscrollSimulation](x, dx) {
      return new src__physics__spring_simulation.ScrollSpringSimulation.new(this.spring, x, this.leadingExtent, dx);
    }
    [_overscrollSimulation](x, dx) {
      return new src__physics__spring_simulation.ScrollSpringSimulation.new(this.spring, x, this.trailingExtent, dx);
    }
    [_simulation](time) {
      let t16;
      let simulation = null;
      if (dart.notNull(time) > dart.notNull(this[_springTime])) {
        this[_timeOffset] = this[_springTime][$isFinite] ? this[_springTime] : 0.0;
        simulation = this[_springSimulation];
      } else {
        this[_timeOffset] = 0.0;
        simulation = this[_frictionSimulation];
      }
      t16 = simulation;
      t16.tolerance = this.tolerance;
      return t16;
    }
    x(time) {
      return this[_simulation](time).x(dart.notNull(time) - dart.notNull(this[_timeOffset]));
    }
    dx(time) {
      return this[_simulation](time).dx(dart.notNull(time) - dart.notNull(this[_timeOffset]));
    }
    isDone(time) {
      return this[_simulation](time).isDone(dart.notNull(time) - dart.notNull(this[_timeOffset]));
    }
    toString() {
      if (dart.test(src__util.assertionsEnabled)) {
        return dart.str(this[$runtimeType]) + "(leadingExtent: " + dart.str(this.leadingExtent) + ", " + "trailingExtent: " + dart.str(this.trailingExtent) + ")";
      } else {
        return super.toString();
      }
    }
  };
  (src__widgets__scroll_simulation.BouncingScrollSimulation.new = function(opts) {
    let position = opts && 'position' in opts ? opts.position : null;
    let velocity = opts && 'velocity' in opts ? opts.velocity : null;
    let leadingExtent = opts && 'leadingExtent' in opts ? opts.leadingExtent : null;
    let trailingExtent = opts && 'trailingExtent' in opts ? opts.trailingExtent : null;
    let spring = opts && 'spring' in opts ? opts.spring : null;
    let tolerance = opts && 'tolerance' in opts ? opts.tolerance : src__physics__tolerance.Tolerance.defaultTolerance;
    this[_frictionSimulation] = null;
    this[_springSimulation] = null;
    this[_springTime] = null;
    this[_timeOffset] = 0.0;
    this[leadingExtent$] = leadingExtent;
    this[trailingExtent$] = trailingExtent;
    this[spring$] = spring;
    if (!(position != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/widgets/scroll_simulation.dart", 40, 16, "position != null");
    if (!(velocity != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/widgets/scroll_simulation.dart", 41, 16, "velocity != null");
    if (!(leadingExtent != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/widgets/scroll_simulation.dart", 42, 16, "leadingExtent != null");
    if (!(trailingExtent != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/widgets/scroll_simulation.dart", 43, 16, "trailingExtent != null");
    if (!(dart.notNull(leadingExtent) <= dart.notNull(trailingExtent))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/widgets/scroll_simulation.dart", 44, 16, "leadingExtent <= trailingExtent");
    if (!(spring != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/widgets/scroll_simulation.dart", 45, 16, "spring != null");
    src__widgets__scroll_simulation.BouncingScrollSimulation.__proto__.new.call(this, {tolerance: tolerance});
    if (dart.notNull(position) < dart.notNull(this.leadingExtent)) {
      this[_springSimulation] = this[_underscrollSimulation](position, velocity);
      this[_springTime] = core.double.negativeInfinity;
    } else if (dart.notNull(position) > dart.notNull(this.trailingExtent)) {
      this[_springSimulation] = this[_overscrollSimulation](position, velocity);
      this[_springTime] = core.double.negativeInfinity;
    } else {
      this[_frictionSimulation] = new src__physics__friction_simulation.FrictionSimulation.new(0.135, position, velocity);
      let finalX = this[_frictionSimulation].finalX;
      if (dart.notNull(velocity) > 0.0 && dart.notNull(finalX) > dart.notNull(this.trailingExtent)) {
        this[_springTime] = this[_frictionSimulation].timeAtX(this.trailingExtent);
        this[_springSimulation] = this[_overscrollSimulation](this.trailingExtent, math.min(core.double, this[_frictionSimulation].dx(this[_springTime]), src__widgets__scroll_simulation.BouncingScrollSimulation.maxSpringTransferVelocity));
        if (!this[_springTime][$isFinite]) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/widgets/scroll_simulation.dart", 63, 16, "_springTime.isFinite");
      } else if (dart.notNull(velocity) < 0.0 && dart.notNull(finalX) < dart.notNull(this.leadingExtent)) {
        this[_springTime] = this[_frictionSimulation].timeAtX(this.leadingExtent);
        this[_springSimulation] = this[_underscrollSimulation](this.leadingExtent, math.min(core.double, this[_frictionSimulation].dx(this[_springTime]), src__widgets__scroll_simulation.BouncingScrollSimulation.maxSpringTransferVelocity));
        if (!this[_springTime][$isFinite]) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/widgets/scroll_simulation.dart", 71, 16, "_springTime.isFinite");
      } else {
        this[_springTime] = core.double.infinity;
      }
    }
    if (!(this[_springTime] != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/widgets/scroll_simulation.dart", 76, 12, "_springTime != null");
  }).prototype = src__widgets__scroll_simulation.BouncingScrollSimulation.prototype;
  dart.addTypeTests(src__widgets__scroll_simulation.BouncingScrollSimulation);
  const leadingExtent$ = Symbol("BouncingScrollSimulation.leadingExtent");
  const trailingExtent$ = Symbol("BouncingScrollSimulation.trailingExtent");
  const spring$ = Symbol("BouncingScrollSimulation.spring");
  dart.setMethodSignature(src__widgets__scroll_simulation.BouncingScrollSimulation, () => ({
    __proto__: dart.getMethods(src__widgets__scroll_simulation.BouncingScrollSimulation.__proto__),
    [_underscrollSimulation]: dart.fnType(src__physics__simulation.Simulation, [core.double, core.double]),
    [_overscrollSimulation]: dart.fnType(src__physics__simulation.Simulation, [core.double, core.double]),
    [_simulation]: dart.fnType(src__physics__simulation.Simulation, [core.double]),
    x: dart.fnType(core.double, [core.double]),
    dx: dart.fnType(core.double, [core.double]),
    isDone: dart.fnType(core.bool, [core.double])
  }));
  dart.setLibraryUri(src__widgets__scroll_simulation.BouncingScrollSimulation, "package:flutter_web/src/widgets/scroll_simulation.dart");
  dart.setFieldSignature(src__widgets__scroll_simulation.BouncingScrollSimulation, () => ({
    __proto__: dart.getFields(src__widgets__scroll_simulation.BouncingScrollSimulation.__proto__),
    leadingExtent: dart.finalFieldType(core.double),
    trailingExtent: dart.finalFieldType(core.double),
    spring: dart.finalFieldType(src__physics__spring_simulation.SpringDescription),
    [_frictionSimulation]: dart.fieldType(src__physics__friction_simulation.FrictionSimulation),
    [_springSimulation]: dart.fieldType(src__physics__simulation.Simulation),
    [_springTime]: dart.fieldType(core.double),
    [_timeOffset]: dart.fieldType(core.double)
  }));
  dart.defineExtensionMethods(src__widgets__scroll_simulation.BouncingScrollSimulation, ['toString']);
  dart.defineLazy(src__widgets__scroll_simulation.BouncingScrollSimulation, {
    /*src__widgets__scroll_simulation.BouncingScrollSimulation.maxSpringTransferVelocity*/get maxSpringTransferVelocity() {
      return 5000.0;
    }
  });
  const _duration = dart.privateName(src__widgets__scroll_simulation, "_duration");
  const _distance = dart.privateName(src__widgets__scroll_simulation, "_distance");
  const _flingDuration = dart.privateName(src__widgets__scroll_simulation, "_flingDuration");
  src__widgets__scroll_simulation.ClampingScrollSimulation = class ClampingScrollSimulation extends src__physics__simulation.Simulation {
    get position() {
      return this[position$0];
    }
    set position(value) {
      super.position = value;
    }
    get velocity() {
      return this[velocity$0];
    }
    set velocity(value) {
      super.velocity = value;
    }
    get friction() {
      return this[friction$];
    }
    set friction(value) {
      super.friction = value;
    }
    static _decelerationForFriction(friction) {
      return dart.notNull(friction) * 61774.04968;
    }
    [_flingDuration](velocity) {
      let scaledFriction = dart.notNull(this.friction) * dart.notNull(src__widgets__scroll_simulation.ClampingScrollSimulation._decelerationForFriction(0.84));
      let deceleration = math.log(0.35 * velocity[$abs]() / scaledFriction);
      return math.exp(deceleration / (dart.notNull(src__widgets__scroll_simulation.ClampingScrollSimulation._kDecelerationRate) - 1.0));
    }
    static _flingDistancePenetration(t) {
      return 1.2 * dart.notNull(t) * dart.notNull(t) * dart.notNull(t) - 3.27 * dart.notNull(t) * dart.notNull(t) + dart.notNull(src__widgets__scroll_simulation.ClampingScrollSimulation._initialVelocityPenetration) * dart.notNull(t);
    }
    static _flingVelocityPenetration(t) {
      return 3.6 * dart.notNull(t) * dart.notNull(t) - 6.54 * dart.notNull(t) + dart.notNull(src__widgets__scroll_simulation.ClampingScrollSimulation._initialVelocityPenetration);
    }
    x(time) {
      let t = (dart.notNull(time) / dart.notNull(this[_duration]))[$clamp](0.0, 1.0);
      return dart.notNull(this.position) + dart.notNull(this[_distance]) * dart.notNull(src__widgets__scroll_simulation.ClampingScrollSimulation._flingDistancePenetration(t)) * this.velocity[$sign];
    }
    dx(time) {
      let t = (dart.notNull(time) / dart.notNull(this[_duration]))[$clamp](0.0, 1.0);
      return dart.notNull(this[_distance]) * dart.notNull(src__widgets__scroll_simulation.ClampingScrollSimulation._flingVelocityPenetration(t)) * this.velocity[$sign] / dart.notNull(this[_duration]);
    }
    isDone(time) {
      return dart.notNull(time) >= dart.notNull(this[_duration]);
    }
  };
  (src__widgets__scroll_simulation.ClampingScrollSimulation.new = function(opts) {
    let position = opts && 'position' in opts ? opts.position : null;
    let velocity = opts && 'velocity' in opts ? opts.velocity : null;
    let friction = opts && 'friction' in opts ? opts.friction : 0.015;
    let tolerance = opts && 'tolerance' in opts ? opts.tolerance : src__physics__tolerance.Tolerance.defaultTolerance;
    this[_duration] = null;
    this[_distance] = null;
    this[position$0] = position;
    this[velocity$0] = velocity;
    this[friction$] = friction;
    if (!(src__widgets__scroll_simulation.ClampingScrollSimulation._flingVelocityPenetration(0.0) == src__widgets__scroll_simulation.ClampingScrollSimulation._initialVelocityPenetration)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/widgets/scroll_simulation.dart", 160, 16, "_flingVelocityPenetration(0.0) == _initialVelocityPenetration");
    src__widgets__scroll_simulation.ClampingScrollSimulation.__proto__.new.call(this, {tolerance: tolerance});
    this[_duration] = this[_flingDuration](this.velocity);
    this[_distance] = (dart.notNull(this.velocity) * dart.notNull(this[_duration]) / dart.notNull(src__widgets__scroll_simulation.ClampingScrollSimulation._initialVelocityPenetration))[$abs]();
  }).prototype = src__widgets__scroll_simulation.ClampingScrollSimulation.prototype;
  dart.addTypeTests(src__widgets__scroll_simulation.ClampingScrollSimulation);
  const position$0 = Symbol("ClampingScrollSimulation.position");
  const velocity$0 = Symbol("ClampingScrollSimulation.velocity");
  const friction$ = Symbol("ClampingScrollSimulation.friction");
  dart.setMethodSignature(src__widgets__scroll_simulation.ClampingScrollSimulation, () => ({
    __proto__: dart.getMethods(src__widgets__scroll_simulation.ClampingScrollSimulation.__proto__),
    [_flingDuration]: dart.fnType(core.double, [core.double]),
    x: dart.fnType(core.double, [core.double]),
    dx: dart.fnType(core.double, [core.double]),
    isDone: dart.fnType(core.bool, [core.double])
  }));
  dart.setLibraryUri(src__widgets__scroll_simulation.ClampingScrollSimulation, "package:flutter_web/src/widgets/scroll_simulation.dart");
  dart.setFieldSignature(src__widgets__scroll_simulation.ClampingScrollSimulation, () => ({
    __proto__: dart.getFields(src__widgets__scroll_simulation.ClampingScrollSimulation.__proto__),
    position: dart.finalFieldType(core.double),
    velocity: dart.finalFieldType(core.double),
    friction: dart.finalFieldType(core.double),
    [_duration]: dart.fieldType(core.double),
    [_distance]: dart.fieldType(core.double)
  }));
  dart.defineLazy(src__widgets__scroll_simulation.ClampingScrollSimulation, {
    /*src__widgets__scroll_simulation.ClampingScrollSimulation._kDecelerationRate*/get _kDecelerationRate() {
      return math.log(0.78) / math.log(0.9);
    },
    /*src__widgets__scroll_simulation.ClampingScrollSimulation._initialVelocityPenetration*/get _initialVelocityPenetration() {
      return 3.065;
    }
  });
  const _items = dart.privateName(src__animation__tween_sequence, "_items");
  const _intervals = dart.privateName(src__animation__tween_sequence, "_intervals");
  const _evaluateAt = dart.privateName(src__animation__tween_sequence, "_evaluateAt");
  const _is_TweenSequence_default = Symbol('_is_TweenSequence_default');
  src__animation__tween_sequence.TweenSequence$ = dart.generic(T => {
    let TweenSequenceItemOfT = () => (TweenSequenceItemOfT = dart.constFn(src__animation__tween_sequence.TweenSequenceItem$(T)))();
    let JSArrayOfTweenSequenceItemOfT = () => (JSArrayOfTweenSequenceItemOfT = dart.constFn(_interceptors.JSArray$(TweenSequenceItemOfT())))();
    class TweenSequence extends src__animation__tween.Animatable$(T) {
      [_evaluateAt](t, index) {
        let element = this[_items][$_get](index);
        let tInterval = this[_intervals][$_get](index).value(t);
        return element.tween.transform(tInterval);
      }
      transform(t) {
        if (!(dart.notNull(t) >= 0.0 && dart.notNull(t) <= 1.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/tween_sequence.dart", 79, 12, "t >= 0.0 && t <= 1.0");
        if (t === 1.0) return this[_evaluateAt](t, dart.notNull(this[_items][$length]) - 1);
        for (let index = 0; index < dart.notNull(this[_items][$length]); index = index + 1) {
          if (dart.test(this[_intervals][$_get](index).contains(t))) return this[_evaluateAt](t, index);
        }
        if (!false) dart.assertFailed("TweenSequence.evaluate() could not find a interval for " + dart.str(t), "org-dartlang-app:///packages/flutter_web/src/animation/tween_sequence.dart", 87, 12, "false");
        return null;
      }
      toString() {
        return "TweenSequence(" + dart.str(this[_items][$length]) + " items)";
      }
    }
    (TweenSequence.new = function(items) {
      this[_items] = JSArrayOfTweenSequenceItemOfT().of([]);
      this[_intervals] = JSArrayOf_Interval().of([]);
      if (!(items != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/tween_sequence.dart", 51, 16, "items != null");
      if (!dart.test(items[$isNotEmpty])) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/tween_sequence.dart", 52, 16, "items.isNotEmpty");
      TweenSequence.__proto__.new.call(this);
      this[_items][$addAll](items);
      let totalWeight = 0.0;
      for (let item of this[_items])
        totalWeight = totalWeight + dart.notNull(item.weight);
      if (!(totalWeight > 0.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/tween_sequence.dart", 58, 12, "totalWeight > 0.0");
      let start = 0.0;
      for (let i = 0; i < dart.notNull(this[_items][$length]); i = i + 1) {
        let end = i === dart.notNull(this[_items][$length]) - 1 ? 1.0 : start + dart.notNull(this[_items][$_get](i).weight) / totalWeight;
        this[_intervals][$add](new src__animation__tween_sequence._Interval.new(start, end));
        start = end;
      }
    }).prototype = TweenSequence.prototype;
    dart.addTypeTests(TweenSequence);
    TweenSequence.prototype[_is_TweenSequence_default] = true;
    dart.setMethodSignature(TweenSequence, () => ({
      __proto__: dart.getMethods(TweenSequence.__proto__),
      [_evaluateAt]: dart.fnType(T, [core.double, core.int]),
      transform: dart.fnType(T, [core.double])
    }));
    dart.setLibraryUri(TweenSequence, "package:flutter_web/src/animation/tween_sequence.dart");
    dart.setFieldSignature(TweenSequence, () => ({
      __proto__: dart.getFields(TweenSequence.__proto__),
      [_items]: dart.finalFieldType(core.List$(src__animation__tween_sequence.TweenSequenceItem$(T))),
      [_intervals]: dart.finalFieldType(core.List$(src__animation__tween_sequence._Interval))
    }));
    dart.defineExtensionMethods(TweenSequence, ['toString']);
    return TweenSequence;
  });
  src__animation__tween_sequence.TweenSequence = src__animation__tween_sequence.TweenSequence$();
  dart.addTypeTests(src__animation__tween_sequence.TweenSequence, _is_TweenSequence_default);
  const _is_TweenSequenceItem_default = Symbol('_is_TweenSequenceItem_default');
  src__animation__tween_sequence.TweenSequenceItem$ = dart.generic(T => {
    class TweenSequenceItem extends core.Object {
      get tween() {
        return this[tween$];
      }
      set tween(value) {
        super.tween = value;
      }
      get weight() {
        return this[weight$];
      }
      set weight(value) {
        super.weight = value;
      }
    }
    (TweenSequenceItem.new = function(opts) {
      let tween = opts && 'tween' in opts ? opts.tween : null;
      let weight = opts && 'weight' in opts ? opts.weight : null;
      this[tween$] = tween;
      this[weight$] = weight;
      if (!(tween != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/tween_sequence.dart", 103, 15, "tween != null");
      if (!(weight != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/tween_sequence.dart", 104, 15, "weight != null");
      if (!(dart.notNull(weight) > 0.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/tween_sequence.dart", 105, 15, "weight > 0.0");
      ;
    }).prototype = TweenSequenceItem.prototype;
    dart.addTypeTests(TweenSequenceItem);
    TweenSequenceItem.prototype[_is_TweenSequenceItem_default] = true;
    const tween$ = Symbol("TweenSequenceItem.tween");
    const weight$ = Symbol("TweenSequenceItem.weight");
    dart.setLibraryUri(TweenSequenceItem, "package:flutter_web/src/animation/tween_sequence.dart");
    dart.setFieldSignature(TweenSequenceItem, () => ({
      __proto__: dart.getFields(TweenSequenceItem.__proto__),
      tween: dart.finalFieldType(src__animation__tween.Animatable$(T)),
      weight: dart.finalFieldType(core.double)
    }));
    return TweenSequenceItem;
  });
  src__animation__tween_sequence.TweenSequenceItem = src__animation__tween_sequence.TweenSequenceItem$();
  dart.addTypeTests(src__animation__tween_sequence.TweenSequenceItem, _is_TweenSequenceItem_default);
  src__animation__tween_sequence._Interval = class _Interval extends core.Object {
    contains(t) {
      return dart.notNull(t) >= dart.notNull(this.start) && dart.notNull(t) < dart.notNull(this.end);
    }
    value(t) {
      return (dart.notNull(t) - dart.notNull(this.start)) / (dart.notNull(this.end) - dart.notNull(this.start));
    }
    toString() {
      return "<" + dart.str(this.start) + ", " + dart.str(this.end) + ">";
    }
  };
  (src__animation__tween_sequence._Interval.new = function(start, end) {
    this.start = start;
    this.end = end;
    if (!(dart.notNull(end) > dart.notNull(start))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/animation/tween_sequence.dart", 132, 50, "end > start");
    ;
  }).prototype = src__animation__tween_sequence._Interval.prototype;
  dart.addTypeTests(src__animation__tween_sequence._Interval);
  dart.setMethodSignature(src__animation__tween_sequence._Interval, () => ({
    __proto__: dart.getMethods(src__animation__tween_sequence._Interval.__proto__),
    contains: dart.fnType(core.bool, [core.double]),
    value: dart.fnType(core.double, [core.double])
  }));
  dart.setLibraryUri(src__animation__tween_sequence._Interval, "package:flutter_web/src/animation/tween_sequence.dart");
  dart.setFieldSignature(src__animation__tween_sequence._Interval, () => ({
    __proto__: dart.getFields(src__animation__tween_sequence._Interval.__proto__),
    start: dart.finalFieldType(core.double),
    end: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(src__animation__tween_sequence._Interval, ['toString']);
  const _name$7 = dart.privateName(src__gestures__scale, "_name");
  src__gestures__scale._ScaleState = class _ScaleState extends core.Object {
    toString() {
      return this[_name$7];
    }
  };
  (src__gestures__scale._ScaleState.new = function(index, _name) {
    this.index = index;
    this[_name$7] = _name;
    ;
  }).prototype = src__gestures__scale._ScaleState.prototype;
  dart.addTypeTests(src__gestures__scale._ScaleState);
  dart.setLibraryUri(src__gestures__scale._ScaleState, "package:flutter_web/src/gestures/scale.dart");
  dart.setFieldSignature(src__gestures__scale._ScaleState, () => ({
    __proto__: dart.getFields(src__gestures__scale._ScaleState.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$7]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(src__gestures__scale._ScaleState, ['toString']);
  src__gestures__scale._ScaleState.ready = dart.const(new src__gestures__scale._ScaleState.new(0, "_ScaleState.ready"));
  src__gestures__scale._ScaleState.possible = dart.const(new src__gestures__scale._ScaleState.new(1, "_ScaleState.possible"));
  src__gestures__scale._ScaleState.accepted = dart.const(new src__gestures__scale._ScaleState.new(2, "_ScaleState.accepted"));
  src__gestures__scale._ScaleState.started = dart.const(new src__gestures__scale._ScaleState.new(3, "_ScaleState.started"));
  src__gestures__scale._ScaleState.values = dart.constList([src__gestures__scale._ScaleState.ready, src__gestures__scale._ScaleState.possible, src__gestures__scale._ScaleState.accepted, src__gestures__scale._ScaleState.started], src__gestures__scale._ScaleState);
  src__gestures__scale.ScaleStartDetails = class ScaleStartDetails extends core.Object {
    get focalPoint() {
      return this[focalPoint$];
    }
    set focalPoint(value) {
      super.focalPoint = value;
    }
    toString() {
      return "ScaleStartDetails(focalPoint: " + dart.str(this.focalPoint) + ")";
    }
  };
  (src__gestures__scale.ScaleStartDetails.new = function(opts) {
    let focalPoint = opts && 'focalPoint' in opts ? opts.focalPoint : ui$.Offset.zero;
    this[focalPoint$] = focalPoint;
    if (!(focalPoint != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/scale.dart", 38, 14, "focalPoint != null");
    ;
  }).prototype = src__gestures__scale.ScaleStartDetails.prototype;
  dart.addTypeTests(src__gestures__scale.ScaleStartDetails);
  const focalPoint$ = Symbol("ScaleStartDetails.focalPoint");
  dart.setLibraryUri(src__gestures__scale.ScaleStartDetails, "package:flutter_web/src/gestures/scale.dart");
  dart.setFieldSignature(src__gestures__scale.ScaleStartDetails, () => ({
    __proto__: dart.getFields(src__gestures__scale.ScaleStartDetails.__proto__),
    focalPoint: dart.finalFieldType(ui$.Offset)
  }));
  dart.defineExtensionMethods(src__gestures__scale.ScaleStartDetails, ['toString']);
  src__gestures__scale.ScaleUpdateDetails = class ScaleUpdateDetails extends core.Object {
    get focalPoint() {
      return this[focalPoint$0];
    }
    set focalPoint(value) {
      super.focalPoint = value;
    }
    get scale() {
      return this[scale$];
    }
    set scale(value) {
      super.scale = value;
    }
    get horizontalScale() {
      return this[horizontalScale$];
    }
    set horizontalScale(value) {
      super.horizontalScale = value;
    }
    get verticalScale() {
      return this[verticalScale$];
    }
    set verticalScale(value) {
      super.verticalScale = value;
    }
    get rotation() {
      return this[rotation$];
    }
    set rotation(value) {
      super.rotation = value;
    }
    toString() {
      return "ScaleUpdateDetails(focalPoint: " + dart.str(this.focalPoint) + ", scale: " + dart.str(this.scale) + ", horizontalScale: " + dart.str(this.horizontalScale) + ", verticalScale: " + dart.str(this.verticalScale) + ", rotation: " + dart.str(this.rotation) + ")";
    }
  };
  (src__gestures__scale.ScaleUpdateDetails.new = function(opts) {
    let focalPoint = opts && 'focalPoint' in opts ? opts.focalPoint : ui$.Offset.zero;
    let scale = opts && 'scale' in opts ? opts.scale : 1.0;
    let horizontalScale = opts && 'horizontalScale' in opts ? opts.horizontalScale : 1.0;
    let verticalScale = opts && 'verticalScale' in opts ? opts.verticalScale : 1.0;
    let rotation = opts && 'rotation' in opts ? opts.rotation : 0.0;
    this[focalPoint$0] = focalPoint;
    this[scale$] = scale;
    this[horizontalScale$] = horizontalScale;
    this[verticalScale$] = verticalScale;
    this[rotation$] = rotation;
    if (!(focalPoint != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/scale.dart", 61, 15, "focalPoint != null");
    if (!(scale != null && dart.notNull(scale) >= 0.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/scale.dart", 62, 15, "scale != null && scale >= 0.0");
    if (!(horizontalScale != null && dart.notNull(horizontalScale) >= 0.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/scale.dart", 63, 15, "horizontalScale != null && horizontalScale >= 0.0");
    if (!(verticalScale != null && dart.notNull(verticalScale) >= 0.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/scale.dart", 64, 15, "verticalScale != null && verticalScale >= 0.0");
    if (!(rotation != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/scale.dart", 65, 15, "rotation != null");
    ;
  }).prototype = src__gestures__scale.ScaleUpdateDetails.prototype;
  dart.addTypeTests(src__gestures__scale.ScaleUpdateDetails);
  const focalPoint$0 = Symbol("ScaleUpdateDetails.focalPoint");
  const scale$ = Symbol("ScaleUpdateDetails.scale");
  const horizontalScale$ = Symbol("ScaleUpdateDetails.horizontalScale");
  const verticalScale$ = Symbol("ScaleUpdateDetails.verticalScale");
  const rotation$ = Symbol("ScaleUpdateDetails.rotation");
  dart.setLibraryUri(src__gestures__scale.ScaleUpdateDetails, "package:flutter_web/src/gestures/scale.dart");
  dart.setFieldSignature(src__gestures__scale.ScaleUpdateDetails, () => ({
    __proto__: dart.getFields(src__gestures__scale.ScaleUpdateDetails.__proto__),
    focalPoint: dart.finalFieldType(ui$.Offset),
    scale: dart.finalFieldType(core.double),
    horizontalScale: dart.finalFieldType(core.double),
    verticalScale: dart.finalFieldType(core.double),
    rotation: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(src__gestures__scale.ScaleUpdateDetails, ['toString']);
  src__gestures__scale.ScaleEndDetails = class ScaleEndDetails extends core.Object {
    get velocity() {
      return this[velocity$1];
    }
    set velocity(value) {
      super.velocity = value;
    }
    toString() {
      return "ScaleEndDetails(velocity: " + dart.str(this.velocity) + ")";
    }
  };
  (src__gestures__scale.ScaleEndDetails.new = function(opts) {
    let velocity = opts && 'velocity' in opts ? opts.velocity : src__gestures__velocity_tracker.Velocity.zero;
    this[velocity$1] = velocity;
    if (!(velocity != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/scale.dart", 121, 14, "velocity != null");
    ;
  }).prototype = src__gestures__scale.ScaleEndDetails.prototype;
  dart.addTypeTests(src__gestures__scale.ScaleEndDetails);
  const velocity$1 = Symbol("ScaleEndDetails.velocity");
  dart.setLibraryUri(src__gestures__scale.ScaleEndDetails, "package:flutter_web/src/gestures/scale.dart");
  dart.setFieldSignature(src__gestures__scale.ScaleEndDetails, () => ({
    __proto__: dart.getFields(src__gestures__scale.ScaleEndDetails.__proto__),
    velocity: dart.finalFieldType(src__gestures__velocity_tracker.Velocity)
  }));
  dart.defineExtensionMethods(src__gestures__scale.ScaleEndDetails, ['toString']);
  src__gestures__scale._LineBetweenPointers = class _LineBetweenPointers extends core.Object {};
  (src__gestures__scale._LineBetweenPointers.new = function(opts) {
    let pointerStartLocation = opts && 'pointerStartLocation' in opts ? opts.pointerStartLocation : ui$.Offset.zero;
    let pointerStartId = opts && 'pointerStartId' in opts ? opts.pointerStartId : 0;
    let pointerEndLocation = opts && 'pointerEndLocation' in opts ? opts.pointerEndLocation : ui$.Offset.zero;
    let pointerEndId = opts && 'pointerEndId' in opts ? opts.pointerEndId : 1;
    this.pointerStartLocation = pointerStartLocation;
    this.pointerStartId = pointerStartId;
    this.pointerEndLocation = pointerEndLocation;
    this.pointerEndId = pointerEndId;
    if (!(pointerStartLocation != null && pointerEndLocation != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/scale.dart", 162, 15, "pointerStartLocation != null && pointerEndLocation != null");
    if (!(pointerStartId != null && pointerEndId != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/scale.dart", 163, 15, "pointerStartId != null && pointerEndId != null");
    if (!(pointerStartId != pointerEndId)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/scale.dart", 164, 15, "pointerStartId != pointerEndId");
    ;
  }).prototype = src__gestures__scale._LineBetweenPointers.prototype;
  dart.addTypeTests(src__gestures__scale._LineBetweenPointers);
  dart.setLibraryUri(src__gestures__scale._LineBetweenPointers, "package:flutter_web/src/gestures/scale.dart");
  dart.setFieldSignature(src__gestures__scale._LineBetweenPointers, () => ({
    __proto__: dart.getFields(src__gestures__scale._LineBetweenPointers.__proto__),
    pointerStartLocation: dart.finalFieldType(ui$.Offset),
    pointerStartId: dart.finalFieldType(core.int),
    pointerEndLocation: dart.finalFieldType(ui$.Offset),
    pointerEndId: dart.finalFieldType(core.int)
  }));
  const _state = dart.privateName(src__gestures__scale, "_state");
  const _initialFocalPoint = dart.privateName(src__gestures__scale, "_initialFocalPoint");
  const _currentFocalPoint = dart.privateName(src__gestures__scale, "_currentFocalPoint");
  const _initialSpan = dart.privateName(src__gestures__scale, "_initialSpan");
  const _currentSpan = dart.privateName(src__gestures__scale, "_currentSpan");
  const _initialHorizontalSpan = dart.privateName(src__gestures__scale, "_initialHorizontalSpan");
  const _currentHorizontalSpan = dart.privateName(src__gestures__scale, "_currentHorizontalSpan");
  const _initialVerticalSpan = dart.privateName(src__gestures__scale, "_initialVerticalSpan");
  const _currentVerticalSpan = dart.privateName(src__gestures__scale, "_currentVerticalSpan");
  const _initialLine = dart.privateName(src__gestures__scale, "_initialLine");
  const _currentLine = dart.privateName(src__gestures__scale, "_currentLine");
  const _pointerLocations = dart.privateName(src__gestures__scale, "_pointerLocations");
  const _pointerQueue = dart.privateName(src__gestures__scale, "_pointerQueue");
  const _velocityTrackers = dart.privateName(src__gestures__scale, "_velocityTrackers");
  const _scaleFactor = dart.privateName(src__gestures__scale, "_scaleFactor");
  const _horizontalScaleFactor = dart.privateName(src__gestures__scale, "_horizontalScaleFactor");
  const _verticalScaleFactor = dart.privateName(src__gestures__scale, "_verticalScaleFactor");
  const _computeRotationFactor = dart.privateName(src__gestures__scale, "_computeRotationFactor");
  const _updateLines = dart.privateName(src__gestures__scale, "_updateLines");
  const _update = dart.privateName(src__gestures__scale, "_update");
  const _reconfigure = dart.privateName(src__gestures__scale, "_reconfigure");
  const _advanceStateMachine = dart.privateName(src__gestures__scale, "_advanceStateMachine");
  const _dispatchOnStartCallbackIfNeeded = dart.privateName(src__gestures__scale, "_dispatchOnStartCallbackIfNeeded");
  src__gestures__scale.ScaleGestureRecognizer = class ScaleGestureRecognizer extends src__gestures__recognizer.OneSequenceGestureRecognizer {
    get onStart() {
      return this[onStart];
    }
    set onStart(value) {
      this[onStart] = value;
    }
    get onUpdate() {
      return this[onUpdate];
    }
    set onUpdate(value) {
      this[onUpdate] = value;
    }
    get onEnd() {
      return this[onEnd];
    }
    set onEnd(value) {
      this[onEnd] = value;
    }
    get [_scaleFactor]() {
      return dart.notNull(this[_initialSpan]) > 0.0 ? dart.notNull(this[_currentSpan]) / dart.notNull(this[_initialSpan]) : 1.0;
    }
    get [_horizontalScaleFactor]() {
      return dart.notNull(this[_initialHorizontalSpan]) > 0.0 ? dart.notNull(this[_currentHorizontalSpan]) / dart.notNull(this[_initialHorizontalSpan]) : 1.0;
    }
    get [_verticalScaleFactor]() {
      return dart.notNull(this[_initialVerticalSpan]) > 0.0 ? dart.notNull(this[_currentVerticalSpan]) / dart.notNull(this[_initialVerticalSpan]) : 1.0;
    }
    [_computeRotationFactor]() {
      if (this[_initialLine] == null || this[_currentLine] == null) {
        return 0.0;
      }
      let fx = this[_initialLine].pointerStartLocation.dx;
      let fy = this[_initialLine].pointerStartLocation.dy;
      let sx = this[_initialLine].pointerEndLocation.dx;
      let sy = this[_initialLine].pointerEndLocation.dy;
      let nfx = this[_currentLine].pointerStartLocation.dx;
      let nfy = this[_currentLine].pointerStartLocation.dy;
      let nsx = this[_currentLine].pointerEndLocation.dx;
      let nsy = this[_currentLine].pointerEndLocation.dy;
      let angle1 = math.atan2(dart.notNull(fy) - dart.notNull(sy), dart.notNull(fx) - dart.notNull(sx));
      let angle2 = math.atan2(dart.notNull(nfy) - dart.notNull(nsy), dart.notNull(nfx) - dart.notNull(nsx));
      return angle2 - angle1;
    }
    addAllowedPointer(event) {
      this.startTrackingPointer(event.pointer);
      this[_velocityTrackers][$_set](event.pointer, new src__gestures__velocity_tracker.VelocityTracker.new());
      if (dart.equals(this[_state], src__gestures__scale._ScaleState.ready)) {
        this[_state] = src__gestures__scale._ScaleState.possible;
        this[_initialSpan] = 0.0;
        this[_currentSpan] = 0.0;
        this[_initialHorizontalSpan] = 0.0;
        this[_currentHorizontalSpan] = 0.0;
        this[_initialVerticalSpan] = 0.0;
        this[_currentVerticalSpan] = 0.0;
        this[_pointerLocations] = new (IdentityMapOfint$Offset()).new();
        this[_pointerQueue] = JSArrayOfint().of([]);
      }
    }
    handleEvent(event) {
      if (!!dart.equals(this[_state], src__gestures__scale._ScaleState.ready)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/scale.dart", 265, 12, "_state != _ScaleState.ready");
      let didChangeConfiguration = false;
      let shouldStartIfAccepted = false;
      if (src__gestures__events.PointerMoveEvent.is(event)) {
        let tracker = this[_velocityTrackers][$_get](event.pointer);
        if (!(tracker != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/scale.dart", 270, 14, "tracker != null");
        if (!dart.test(event.synthesized)) tracker.addPosition(event.timeStamp, event.position);
        this[_pointerLocations][$_set](event.pointer, event.position);
        shouldStartIfAccepted = true;
      } else if (src__gestures__events.PointerDownEvent.is(event)) {
        this[_pointerLocations][$_set](event.pointer, event.position);
        this[_pointerQueue][$add](event.pointer);
        didChangeConfiguration = true;
        shouldStartIfAccepted = true;
      } else if (src__gestures__events.PointerUpEvent.is(event) || src__gestures__events.PointerCancelEvent.is(event)) {
        this[_pointerLocations][$remove](event.pointer);
        this[_pointerQueue][$remove](event.pointer);
        didChangeConfiguration = true;
      }
      this[_updateLines]();
      this[_update]();
      if (!didChangeConfiguration || dart.test(this[_reconfigure](event.pointer))) this[_advanceStateMachine](shouldStartIfAccepted);
      this.stopTrackingIfPointerNoLongerDown(event);
    }
    [_update]() {
      let count = this[_pointerLocations][$keys][$length];
      let focalPoint = ui$.Offset.zero;
      for (let pointer of this[_pointerLocations][$keys])
        focalPoint = focalPoint['+'](this[_pointerLocations][$_get](pointer));
      this[_currentFocalPoint] = dart.notNull(count) > 0 ? focalPoint['/'](count[$toDouble]()) : ui$.Offset.zero;
      let totalDeviation = 0.0;
      let totalHorizontalDeviation = 0.0;
      let totalVerticalDeviation = 0.0;
      for (let pointer of this[_pointerLocations][$keys]) {
        totalDeviation = totalDeviation + dart.notNull(this[_currentFocalPoint]['-'](this[_pointerLocations][$_get](pointer)).distance);
        totalHorizontalDeviation = totalHorizontalDeviation + (dart.notNull(this[_currentFocalPoint].dx) - dart.notNull(this[_pointerLocations][$_get](pointer).dx))[$abs]();
        totalVerticalDeviation = totalVerticalDeviation + (dart.notNull(this[_currentFocalPoint].dy) - dart.notNull(this[_pointerLocations][$_get](pointer).dy))[$abs]();
      }
      this[_currentSpan] = dart.notNull(count) > 0 ? totalDeviation / dart.notNull(count) : 0.0;
      this[_currentHorizontalSpan] = dart.notNull(count) > 0 ? totalHorizontalDeviation / dart.notNull(count) : 0.0;
      this[_currentVerticalSpan] = dart.notNull(count) > 0 ? totalVerticalDeviation / dart.notNull(count) : 0.0;
    }
    [_updateLines]() {
      let count = this[_pointerLocations][$keys][$length];
      if (!(dart.notNull(this[_pointerQueue][$length]) >= dart.notNull(count))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/scale.dart", 323, 12, "_pointerQueue.length >= count");
      if (dart.notNull(count) < 2) {
        this[_initialLine] = this[_currentLine];
      } else if (this[_initialLine] != null && this[_initialLine].pointerStartId == this[_pointerQueue][$_get](0) && this[_initialLine].pointerEndId == this[_pointerQueue][$_get](1)) {
        this[_currentLine] = new src__gestures__scale._LineBetweenPointers.new({pointerStartId: this[_pointerQueue][$_get](0), pointerStartLocation: this[_pointerLocations][$_get](this[_pointerQueue][$_get](0)), pointerEndId: this[_pointerQueue][$_get](1), pointerEndLocation: this[_pointerLocations][$_get](this[_pointerQueue][$_get](1))});
      } else {
        this[_initialLine] = new src__gestures__scale._LineBetweenPointers.new({pointerStartId: this[_pointerQueue][$_get](0), pointerStartLocation: this[_pointerLocations][$_get](this[_pointerQueue][$_get](0)), pointerEndId: this[_pointerQueue][$_get](1), pointerEndLocation: this[_pointerLocations][$_get](this[_pointerQueue][$_get](1))});
        this[_currentLine] = null;
      }
    }
    [_reconfigure](pointer) {
      this[_initialFocalPoint] = this[_currentFocalPoint];
      this[_initialSpan] = this[_currentSpan];
      this[_initialLine] = this[_currentLine];
      this[_initialHorizontalSpan] = this[_currentHorizontalSpan];
      this[_initialVerticalSpan] = this[_currentVerticalSpan];
      if (dart.equals(this[_state], src__gestures__scale._ScaleState.started)) {
        if (this.onEnd != null) {
          let tracker = this[_velocityTrackers][$_get](pointer);
          if (!(tracker != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/scale.dart", 358, 16, "tracker != null");
          let velocity = tracker.getVelocity();
          if (dart.test(src__gestures__scale._isFlingGesture(velocity))) {
            let pixelsPerSecond = velocity.pixelsPerSecond;
            if (dart.notNull(pixelsPerSecond.distanceSquared) > dart.notNull(src__gestures__constants.kMaxFlingVelocity) * dart.notNull(src__gestures__constants.kMaxFlingVelocity)) velocity = new src__gestures__velocity_tracker.Velocity.new({pixelsPerSecond: pixelsPerSecond['/'](pixelsPerSecond.distance)['*'](src__gestures__constants.kMaxFlingVelocity)});
            this.invokeCallback(dart.void, "onEnd", dart.fn(() => this.onEnd(new src__gestures__scale.ScaleEndDetails.new({velocity: velocity})), VoidTovoid()));
          } else {
            this.invokeCallback(dart.void, "onEnd", dart.fn(() => this.onEnd(new src__gestures__scale.ScaleEndDetails.new({velocity: src__gestures__velocity_tracker.Velocity.zero})), VoidTovoid()));
          }
        }
        this[_state] = src__gestures__scale._ScaleState.accepted;
        return false;
      }
      return true;
    }
    [_advanceStateMachine](shouldStartIfAccepted) {
      if (dart.equals(this[_state], src__gestures__scale._ScaleState.ready)) this[_state] = src__gestures__scale._ScaleState.possible;
      if (dart.equals(this[_state], src__gestures__scale._ScaleState.possible)) {
        let spanDelta = (dart.notNull(this[_currentSpan]) - dart.notNull(this[_initialSpan]))[$abs]();
        let focalPointDelta = this[_currentFocalPoint]['-'](this[_initialFocalPoint]).distance;
        if (spanDelta > dart.notNull(src__gestures__constants.kScaleSlop) || dart.notNull(focalPointDelta) > dart.notNull(src__gestures__constants.kPanSlop)) this.resolve(src__gestures__arena.GestureDisposition.accepted);
      } else if (dart.notNull(this[_state].index) >= dart.notNull(src__gestures__scale._ScaleState.accepted.index)) {
        this.resolve(src__gestures__arena.GestureDisposition.accepted);
      }
      if (dart.equals(this[_state], src__gestures__scale._ScaleState.accepted) && dart.test(shouldStartIfAccepted)) {
        this[_state] = src__gestures__scale._ScaleState.started;
        this[_dispatchOnStartCallbackIfNeeded]();
      }
      if (dart.equals(this[_state], src__gestures__scale._ScaleState.started) && this.onUpdate != null) this.invokeCallback(dart.void, "onUpdate", dart.fn(() => {
        this.onUpdate(new src__gestures__scale.ScaleUpdateDetails.new({scale: this[_scaleFactor], horizontalScale: this[_horizontalScaleFactor], verticalScale: this[_verticalScaleFactor], focalPoint: this[_currentFocalPoint], rotation: this[_computeRotationFactor]()}));
      }, VoidToNull()));
    }
    [_dispatchOnStartCallbackIfNeeded]() {
      if (!dart.equals(this[_state], src__gestures__scale._ScaleState.started)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/scale.dart", 407, 12, "_state == _ScaleState.started");
      if (this.onStart != null) this.invokeCallback(dart.void, "onStart", dart.fn(() => this.onStart(new src__gestures__scale.ScaleStartDetails.new({focalPoint: this[_currentFocalPoint]})), VoidTovoid()));
    }
    acceptGesture(pointer) {
      if (dart.equals(this[_state], src__gestures__scale._ScaleState.possible)) {
        this[_state] = src__gestures__scale._ScaleState.started;
        this[_dispatchOnStartCallbackIfNeeded]();
      }
    }
    rejectGesture(pointer) {
      this.stopTrackingPointer(pointer);
    }
    didStopTrackingLastPointer(pointer) {
      switch (this[_state]) {
        case src__gestures__scale._ScaleState.possible:
        {
          this.resolve(src__gestures__arena.GestureDisposition.rejected);
          break;
        }
        case src__gestures__scale._ScaleState.ready:
        {
          if (!false) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/scale.dart", 432, 16, "false");
          break;
        }
        case src__gestures__scale._ScaleState.accepted:
        {
          break;
        }
        case src__gestures__scale._ScaleState.started:
        {
          if (!false) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/scale.dart", 437, 16, "false");
          break;
        }
      }
      this[_state] = src__gestures__scale._ScaleState.ready;
    }
    dispose() {
      this[_velocityTrackers][$clear]();
      super.dispose();
    }
    get debugDescription() {
      return "scale";
    }
  };
  (src__gestures__scale.ScaleGestureRecognizer.new = function(opts) {
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    let kind = opts && 'kind' in opts ? opts.kind : null;
    this[onStart] = null;
    this[onUpdate] = null;
    this[onEnd] = null;
    this[_state] = src__gestures__scale._ScaleState.ready;
    this[_initialFocalPoint] = null;
    this[_currentFocalPoint] = null;
    this[_initialSpan] = null;
    this[_currentSpan] = null;
    this[_initialHorizontalSpan] = null;
    this[_currentHorizontalSpan] = null;
    this[_initialVerticalSpan] = null;
    this[_currentVerticalSpan] = null;
    this[_initialLine] = null;
    this[_currentLine] = null;
    this[_pointerLocations] = null;
    this[_pointerQueue] = null;
    this[_velocityTrackers] = new (IdentityMapOfint$VelocityTracker()).new();
    src__gestures__scale.ScaleGestureRecognizer.__proto__.new.call(this, {debugOwner: debugOwner, kind: kind});
    ;
  }).prototype = src__gestures__scale.ScaleGestureRecognizer.prototype;
  dart.addTypeTests(src__gestures__scale.ScaleGestureRecognizer);
  const onStart = Symbol("ScaleGestureRecognizer.onStart");
  const onUpdate = Symbol("ScaleGestureRecognizer.onUpdate");
  const onEnd = Symbol("ScaleGestureRecognizer.onEnd");
  dart.setMethodSignature(src__gestures__scale.ScaleGestureRecognizer, () => ({
    __proto__: dart.getMethods(src__gestures__scale.ScaleGestureRecognizer.__proto__),
    [_computeRotationFactor]: dart.fnType(core.double, []),
    addAllowedPointer: dart.fnType(dart.void, [src__gestures__events.PointerEvent]),
    handleEvent: dart.fnType(dart.void, [src__gestures__events.PointerEvent]),
    [_update]: dart.fnType(dart.void, []),
    [_updateLines]: dart.fnType(dart.void, []),
    [_reconfigure]: dart.fnType(core.bool, [core.int]),
    [_advanceStateMachine]: dart.fnType(dart.void, [core.bool]),
    [_dispatchOnStartCallbackIfNeeded]: dart.fnType(dart.void, []),
    didStopTrackingLastPointer: dart.fnType(dart.void, [core.int])
  }));
  dart.setGetterSignature(src__gestures__scale.ScaleGestureRecognizer, () => ({
    __proto__: dart.getGetters(src__gestures__scale.ScaleGestureRecognizer.__proto__),
    [_scaleFactor]: core.double,
    [_horizontalScaleFactor]: core.double,
    [_verticalScaleFactor]: core.double,
    debugDescription: core.String
  }));
  dart.setLibraryUri(src__gestures__scale.ScaleGestureRecognizer, "package:flutter_web/src/gestures/scale.dart");
  dart.setFieldSignature(src__gestures__scale.ScaleGestureRecognizer, () => ({
    __proto__: dart.getFields(src__gestures__scale.ScaleGestureRecognizer.__proto__),
    onStart: dart.fieldType(dart.fnType(dart.void, [src__gestures__scale.ScaleStartDetails])),
    onUpdate: dart.fieldType(dart.fnType(dart.void, [src__gestures__scale.ScaleUpdateDetails])),
    onEnd: dart.fieldType(dart.fnType(dart.void, [src__gestures__scale.ScaleEndDetails])),
    [_state]: dart.fieldType(src__gestures__scale._ScaleState),
    [_initialFocalPoint]: dart.fieldType(ui$.Offset),
    [_currentFocalPoint]: dart.fieldType(ui$.Offset),
    [_initialSpan]: dart.fieldType(core.double),
    [_currentSpan]: dart.fieldType(core.double),
    [_initialHorizontalSpan]: dart.fieldType(core.double),
    [_currentHorizontalSpan]: dart.fieldType(core.double),
    [_initialVerticalSpan]: dart.fieldType(core.double),
    [_currentVerticalSpan]: dart.fieldType(core.double),
    [_initialLine]: dart.fieldType(src__gestures__scale._LineBetweenPointers),
    [_currentLine]: dart.fieldType(src__gestures__scale._LineBetweenPointers),
    [_pointerLocations]: dart.fieldType(core.Map$(core.int, ui$.Offset)),
    [_pointerQueue]: dart.fieldType(core.List$(core.int)),
    [_velocityTrackers]: dart.finalFieldType(core.Map$(core.int, src__gestures__velocity_tracker.VelocityTracker))
  }));
  src__gestures__scale._isFlingGesture = function(velocity) {
    if (!(velocity != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/scale.dart", 142, 10, "velocity != null");
    let speedSquared = velocity.pixelsPerSecond.distanceSquared;
    return dart.notNull(speedSquared) > dart.notNull(src__gestures__constants.kMinFlingVelocity) * dart.notNull(src__gestures__constants.kMinFlingVelocity);
  };
  const _topLeft = dart.privateName(src__painting__border_radius, "_topLeft");
  const _topRight = dart.privateName(src__painting__border_radius, "_topRight");
  const _bottomLeft = dart.privateName(src__painting__border_radius, "_bottomLeft");
  const _bottomRight = dart.privateName(src__painting__border_radius, "_bottomRight");
  const _topStart = dart.privateName(src__painting__border_radius, "_topStart");
  const _topEnd = dart.privateName(src__painting__border_radius, "_topEnd");
  const _bottomStart = dart.privateName(src__painting__border_radius, "_bottomStart");
  const _bottomEnd = dart.privateName(src__painting__border_radius, "_bottomEnd");
  src__painting__border_radius.BorderRadiusGeometry = class BorderRadiusGeometry extends core.Object {
    subtract(other) {
      return new src__painting__border_radius._MixedBorderRadius.new(this[_topLeft]['-'](other[_topLeft]), this[_topRight]['-'](other[_topRight]), this[_bottomLeft]['-'](other[_bottomLeft]), this[_bottomRight]['-'](other[_bottomRight]), this[_topStart]['-'](other[_topStart]), this[_topEnd]['-'](other[_topEnd]), this[_bottomStart]['-'](other[_bottomStart]), this[_bottomEnd]['-'](other[_bottomEnd]));
    }
    add(other) {
      return new src__painting__border_radius._MixedBorderRadius.new(this[_topLeft]['+'](other[_topLeft]), this[_topRight]['+'](other[_topRight]), this[_bottomLeft]['+'](other[_bottomLeft]), this[_bottomRight]['+'](other[_bottomRight]), this[_topStart]['+'](other[_topStart]), this[_topEnd]['+'](other[_topEnd]), this[_bottomStart]['+'](other[_bottomStart]), this[_bottomEnd]['+'](other[_bottomEnd]));
    }
    static lerp(a, b, t) {
      if (!(t != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/border_radius.dart", 148, 12, "t != null");
      if (a == null && b == null) return null;
      a == null ? a = src__painting__border_radius.BorderRadius.zero : null;
      b == null ? b = src__painting__border_radius.BorderRadius.zero : null;
      return a.add(b.subtract(a)['*'](t));
    }
    toString() {
      if (dart.test(src__util.assertionsEnabled)) {
        let visual = null;
        let logical = null;
        if (dart.equals(this[_topLeft], this[_topRight]) && dart.equals(this[_topRight], this[_bottomLeft]) && dart.equals(this[_bottomLeft], this[_bottomRight])) {
          if (!dart.equals(this[_topLeft], ui$.Radius.zero)) {
            if (this[_topLeft].x == this[_topLeft].y) {
              visual = "BorderRadius.circular(" + this[_topLeft].x[$toStringAsFixed](1) + ")";
            } else {
              visual = "BorderRadius.all(" + dart.str(this[_topLeft]) + ")";
            }
          }
        } else {
          let result = new core.StringBuffer.new();
          result.write("BorderRadius.only(");
          let comma = false;
          if (!dart.equals(this[_topLeft], ui$.Radius.zero)) {
            result.write("topLeft: " + dart.str(this[_topLeft]));
            comma = true;
          }
          if (!dart.equals(this[_topRight], ui$.Radius.zero)) {
            if (comma) result.write(", ");
            result.write("topRight: " + dart.str(this[_topRight]));
            comma = true;
          }
          if (!dart.equals(this[_bottomLeft], ui$.Radius.zero)) {
            if (comma) result.write(", ");
            result.write("bottomLeft: " + dart.str(this[_bottomLeft]));
            comma = true;
          }
          if (!dart.equals(this[_bottomRight], ui$.Radius.zero)) {
            if (comma) result.write(", ");
            result.write("bottomRight: " + dart.str(this[_bottomRight]));
          }
          result.write(")");
          visual = result.toString();
        }
        if (dart.equals(this[_topStart], this[_topEnd]) && dart.equals(this[_topEnd], this[_bottomEnd]) && dart.equals(this[_bottomEnd], this[_bottomStart])) {
          if (!dart.equals(this[_topStart], ui$.Radius.zero)) {
            if (this[_topStart].x == this[_topStart].y) {
              logical = "BorderRadiusDirectional.circular" + "(" + this[_topStart].x[$toStringAsFixed](1) + ")";
            } else {
              logical = "BorderRadiusDirectional.all(" + dart.str(this[_topStart]) + ")";
            }
          }
        } else {
          let result = new core.StringBuffer.new();
          result.write("BorderRadiusDirectional.only(");
          let comma = false;
          if (!dart.equals(this[_topStart], ui$.Radius.zero)) {
            result.write("topStart: " + dart.str(this[_topStart]));
            comma = true;
          }
          if (!dart.equals(this[_topEnd], ui$.Radius.zero)) {
            if (comma) result.write(", ");
            result.write("topEnd: " + dart.str(this[_topEnd]));
            comma = true;
          }
          if (!dart.equals(this[_bottomStart], ui$.Radius.zero)) {
            if (comma) result.write(", ");
            result.write("bottomStart: " + dart.str(this[_bottomStart]));
            comma = true;
          }
          if (!dart.equals(this[_bottomEnd], ui$.Radius.zero)) {
            if (comma) result.write(", ");
            result.write("bottomEnd: " + dart.str(this[_bottomEnd]));
          }
          result.write(")");
          logical = result.toString();
        }
        if (visual != null && logical != null) return dart.str(visual) + " + " + dart.str(logical);
        if (visual != null) return visual;
        if (logical != null) return logical;
        return "BorderRadius.zero";
      } else {
        return super[$toString]();
      }
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!dart.equals(this[$runtimeType], dart.runtimeType(other))) return false;
      let typedOther = src__painting__border_radius.BorderRadiusGeometry._check(other);
      return dart.equals(this[_topLeft], typedOther[_topLeft]) && dart.equals(this[_topRight], typedOther[_topRight]) && dart.equals(this[_bottomLeft], typedOther[_bottomLeft]) && dart.equals(this[_bottomRight], typedOther[_bottomRight]) && dart.equals(this[_topStart], typedOther[_topStart]) && dart.equals(this[_topEnd], typedOther[_topEnd]) && dart.equals(this[_bottomStart], typedOther[_bottomStart]) && dart.equals(this[_bottomEnd], typedOther[_bottomEnd]);
    }
    get hashCode() {
      return ui$.hashValues(this[_topLeft], this[_topRight], this[_bottomLeft], this[_bottomRight], this[_topStart], this[_topEnd], this[_bottomStart], this[_bottomEnd]);
    }
  };
  (src__painting__border_radius.BorderRadiusGeometry.new = function() {
    ;
  }).prototype = src__painting__border_radius.BorderRadiusGeometry.prototype;
  dart.addTypeTests(src__painting__border_radius.BorderRadiusGeometry);
  dart.setMethodSignature(src__painting__border_radius.BorderRadiusGeometry, () => ({
    __proto__: dart.getMethods(src__painting__border_radius.BorderRadiusGeometry.__proto__),
    subtract: dart.fnType(src__painting__border_radius.BorderRadiusGeometry, [src__painting__border_radius.BorderRadiusGeometry]),
    add: dart.fnType(src__painting__border_radius.BorderRadiusGeometry, [src__painting__border_radius.BorderRadiusGeometry])
  }));
  dart.setLibraryUri(src__painting__border_radius.BorderRadiusGeometry, "package:flutter_web/src/painting/border_radius.dart");
  dart.defineExtensionMethods(src__painting__border_radius.BorderRadiusGeometry, ['toString', '_equals']);
  dart.defineExtensionAccessors(src__painting__border_radius.BorderRadiusGeometry, ['hashCode']);
  src__painting__border_radius.BorderRadius = class BorderRadius extends src__painting__border_radius.BorderRadiusGeometry {
    get topLeft() {
      return this[topLeft$];
    }
    set topLeft(value) {
      super.topLeft = value;
    }
    get topRight() {
      return this[topRight$];
    }
    set topRight(value) {
      super.topRight = value;
    }
    get bottomLeft() {
      return this[bottomLeft$];
    }
    set bottomLeft(value) {
      super.bottomLeft = value;
    }
    get bottomRight() {
      return this[bottomRight$];
    }
    set bottomRight(value) {
      super.bottomRight = value;
    }
    get [_topLeft]() {
      return this.topLeft;
    }
    get [_topRight]() {
      return this.topRight;
    }
    get [_bottomLeft]() {
      return this.bottomLeft;
    }
    get [_bottomRight]() {
      return this.bottomRight;
    }
    get [_topStart]() {
      return ui$.Radius.zero;
    }
    get [_topEnd]() {
      return ui$.Radius.zero;
    }
    get [_bottomStart]() {
      return ui$.Radius.zero;
    }
    get [_bottomEnd]() {
      return ui$.Radius.zero;
    }
    toRRect(rect) {
      return new ui$.RRect.fromRectAndCorners(rect, {topLeft: this.topLeft, topRight: this.topRight, bottomLeft: this.bottomLeft, bottomRight: this.bottomRight});
    }
    subtract(other) {
      if (src__painting__border_radius.BorderRadius.is(other)) return this['-'](other);
      return super.subtract(other);
    }
    add(other) {
      if (src__painting__border_radius.BorderRadius.is(other)) return this['+'](other);
      return super.add(other);
    }
    ['-'](other) {
      return new src__painting__border_radius.BorderRadius.only({topLeft: this.topLeft['-'](other.topLeft), topRight: this.topRight['-'](other.topRight), bottomLeft: this.bottomLeft['-'](other.bottomLeft), bottomRight: this.bottomRight['-'](other.bottomRight)});
    }
    ['+'](other) {
      return new src__painting__border_radius.BorderRadius.only({topLeft: this.topLeft['+'](other.topLeft), topRight: this.topRight['+'](other.topRight), bottomLeft: this.bottomLeft['+'](other.bottomLeft), bottomRight: this.bottomRight['+'](other.bottomRight)});
    }
    _negate() {
      return new src__painting__border_radius.BorderRadius.only({topLeft: this.topLeft._negate(), topRight: this.topRight._negate(), bottomLeft: this.bottomLeft._negate(), bottomRight: this.bottomRight._negate()});
    }
    ['*'](other) {
      return new src__painting__border_radius.BorderRadius.only({topLeft: this.topLeft['*'](other), topRight: this.topRight['*'](other), bottomLeft: this.bottomLeft['*'](other), bottomRight: this.bottomRight['*'](other)});
    }
    ['/'](other) {
      return new src__painting__border_radius.BorderRadius.only({topLeft: this.topLeft['/'](other), topRight: this.topRight['/'](other), bottomLeft: this.bottomLeft['/'](other), bottomRight: this.bottomRight['/'](other)});
    }
    ['~/'](other) {
      return new src__painting__border_radius.BorderRadius.only({topLeft: this.topLeft['~/'](other), topRight: this.topRight['~/'](other), bottomLeft: this.bottomLeft['~/'](other), bottomRight: this.bottomRight['~/'](other)});
    }
    ['%'](other) {
      return new src__painting__border_radius.BorderRadius.only({topLeft: this.topLeft['%'](other), topRight: this.topRight['%'](other), bottomLeft: this.bottomLeft['%'](other), bottomRight: this.bottomRight['%'](other)});
    }
    static lerp(a, b, t) {
      if (!(t != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/border_radius.dart", 495, 12, "t != null");
      if (a == null && b == null) return null;
      if (a == null) return b['*'](t);
      if (b == null) return a['*'](1.0 - dart.notNull(t));
      return new src__painting__border_radius.BorderRadius.only({topLeft: ui$.Radius.lerp(a.topLeft, b.topLeft, t), topRight: ui$.Radius.lerp(a.topRight, b.topRight, t), bottomLeft: ui$.Radius.lerp(a.bottomLeft, b.bottomLeft, t), bottomRight: ui$.Radius.lerp(a.bottomRight, b.bottomRight, t)});
    }
    resolve(direction) {
      return this;
    }
  };
  (src__painting__border_radius.BorderRadius.all = function(radius) {
    src__painting__border_radius.BorderRadius.only.call(this, {topLeft: radius, topRight: radius, bottomLeft: radius, bottomRight: radius});
  }).prototype = src__painting__border_radius.BorderRadius.prototype;
  (src__painting__border_radius.BorderRadius.circular = function(radius) {
    src__painting__border_radius.BorderRadius.all.call(this, new ui$.Radius.circular(radius));
  }).prototype = src__painting__border_radius.BorderRadius.prototype;
  (src__painting__border_radius.BorderRadius.vertical = function(opts) {
    let top = opts && 'top' in opts ? opts.top : ui$.Radius.zero;
    let bottom = opts && 'bottom' in opts ? opts.bottom : ui$.Radius.zero;
    src__painting__border_radius.BorderRadius.only.call(this, {topLeft: top, topRight: top, bottomLeft: bottom, bottomRight: bottom});
  }).prototype = src__painting__border_radius.BorderRadius.prototype;
  (src__painting__border_radius.BorderRadius.horizontal = function(opts) {
    let left = opts && 'left' in opts ? opts.left : ui$.Radius.zero;
    let right = opts && 'right' in opts ? opts.right : ui$.Radius.zero;
    src__painting__border_radius.BorderRadius.only.call(this, {topLeft: left, topRight: right, bottomLeft: left, bottomRight: right});
  }).prototype = src__painting__border_radius.BorderRadius.prototype;
  (src__painting__border_radius.BorderRadius.only = function(opts) {
    let topLeft = opts && 'topLeft' in opts ? opts.topLeft : ui$.Radius.zero;
    let topRight = opts && 'topRight' in opts ? opts.topRight : ui$.Radius.zero;
    let bottomLeft = opts && 'bottomLeft' in opts ? opts.bottomLeft : ui$.Radius.zero;
    let bottomRight = opts && 'bottomRight' in opts ? opts.bottomRight : ui$.Radius.zero;
    this[topLeft$] = topLeft;
    this[topRight$] = topRight;
    this[bottomLeft$] = bottomLeft;
    this[bottomRight$] = bottomRight;
    src__painting__border_radius.BorderRadius.__proto__.new.call(this);
    ;
  }).prototype = src__painting__border_radius.BorderRadius.prototype;
  dart.addTypeTests(src__painting__border_radius.BorderRadius);
  const topLeft$ = Symbol("BorderRadius.topLeft");
  const topRight$ = Symbol("BorderRadius.topRight");
  const bottomLeft$ = Symbol("BorderRadius.bottomLeft");
  const bottomRight$ = Symbol("BorderRadius.bottomRight");
  dart.setMethodSignature(src__painting__border_radius.BorderRadius, () => ({
    __proto__: dart.getMethods(src__painting__border_radius.BorderRadius.__proto__),
    toRRect: dart.fnType(ui$.RRect, [ui$.Rect]),
    '-': dart.fnType(src__painting__border_radius.BorderRadius, [src__painting__border_radius.BorderRadius]),
    '+': dart.fnType(src__painting__border_radius.BorderRadius, [src__painting__border_radius.BorderRadius]),
    _negate: dart.fnType(src__painting__border_radius.BorderRadius, []),
    '*': dart.fnType(src__painting__border_radius.BorderRadius, [core.double]),
    '/': dart.fnType(src__painting__border_radius.BorderRadius, [core.double]),
    '~/': dart.fnType(src__painting__border_radius.BorderRadius, [core.double]),
    '%': dart.fnType(src__painting__border_radius.BorderRadius, [core.double]),
    resolve: dart.fnType(src__painting__border_radius.BorderRadius, [ui$.TextDirection])
  }));
  dart.setGetterSignature(src__painting__border_radius.BorderRadius, () => ({
    __proto__: dart.getGetters(src__painting__border_radius.BorderRadius.__proto__),
    [_topLeft]: ui$.Radius,
    [_topRight]: ui$.Radius,
    [_bottomLeft]: ui$.Radius,
    [_bottomRight]: ui$.Radius,
    [_topStart]: ui$.Radius,
    [_topEnd]: ui$.Radius,
    [_bottomStart]: ui$.Radius,
    [_bottomEnd]: ui$.Radius
  }));
  dart.setLibraryUri(src__painting__border_radius.BorderRadius, "package:flutter_web/src/painting/border_radius.dart");
  dart.setFieldSignature(src__painting__border_radius.BorderRadius, () => ({
    __proto__: dart.getFields(src__painting__border_radius.BorderRadius.__proto__),
    topLeft: dart.finalFieldType(ui$.Radius),
    topRight: dart.finalFieldType(ui$.Radius),
    bottomLeft: dart.finalFieldType(ui$.Radius),
    bottomRight: dart.finalFieldType(ui$.Radius)
  }));
  dart.defineLazy(src__painting__border_radius.BorderRadius, {
    /*src__painting__border_radius.BorderRadius.zero*/get zero() {
      return dart.const(new src__painting__border_radius.BorderRadius.all(ui$.Radius.zero));
    }
  });
  src__painting__border_radius.BorderRadiusDirectional = class BorderRadiusDirectional extends src__painting__border_radius.BorderRadiusGeometry {
    get topStart() {
      return this[topStart$];
    }
    set topStart(value) {
      super.topStart = value;
    }
    get topEnd() {
      return this[topEnd$];
    }
    set topEnd(value) {
      super.topEnd = value;
    }
    get bottomStart() {
      return this[bottomStart$];
    }
    set bottomStart(value) {
      super.bottomStart = value;
    }
    get bottomEnd() {
      return this[bottomEnd$];
    }
    set bottomEnd(value) {
      super.bottomEnd = value;
    }
    get [_topStart]() {
      return this.topStart;
    }
    get [_topEnd]() {
      return this.topEnd;
    }
    get [_bottomStart]() {
      return this.bottomStart;
    }
    get [_bottomEnd]() {
      return this.bottomEnd;
    }
    get [_topLeft]() {
      return ui$.Radius.zero;
    }
    get [_topRight]() {
      return ui$.Radius.zero;
    }
    get [_bottomLeft]() {
      return ui$.Radius.zero;
    }
    get [_bottomRight]() {
      return ui$.Radius.zero;
    }
    subtract(other) {
      if (src__painting__border_radius.BorderRadiusDirectional.is(other)) return this['-'](other);
      return super.subtract(other);
    }
    add(other) {
      if (src__painting__border_radius.BorderRadiusDirectional.is(other)) return this['+'](other);
      return super.add(other);
    }
    ['-'](other) {
      return new src__painting__border_radius.BorderRadiusDirectional.only({topStart: this.topStart['-'](other.topStart), topEnd: this.topEnd['-'](other.topEnd), bottomStart: this.bottomStart['-'](other.bottomStart), bottomEnd: this.bottomEnd['-'](other.bottomEnd)});
    }
    ['+'](other) {
      return new src__painting__border_radius.BorderRadiusDirectional.only({topStart: this.topStart['+'](other.topStart), topEnd: this.topEnd['+'](other.topEnd), bottomStart: this.bottomStart['+'](other.bottomStart), bottomEnd: this.bottomEnd['+'](other.bottomEnd)});
    }
    _negate() {
      return new src__painting__border_radius.BorderRadiusDirectional.only({topStart: this.topStart._negate(), topEnd: this.topEnd._negate(), bottomStart: this.bottomStart._negate(), bottomEnd: this.bottomEnd._negate()});
    }
    ['*'](other) {
      return new src__painting__border_radius.BorderRadiusDirectional.only({topStart: this.topStart['*'](other), topEnd: this.topEnd['*'](other), bottomStart: this.bottomStart['*'](other), bottomEnd: this.bottomEnd['*'](other)});
    }
    ['/'](other) {
      return new src__painting__border_radius.BorderRadiusDirectional.only({topStart: this.topStart['/'](other), topEnd: this.topEnd['/'](other), bottomStart: this.bottomStart['/'](other), bottomEnd: this.bottomEnd['/'](other)});
    }
    ['~/'](other) {
      return new src__painting__border_radius.BorderRadiusDirectional.only({topStart: this.topStart['~/'](other), topEnd: this.topEnd['~/'](other), bottomStart: this.bottomStart['~/'](other), bottomEnd: this.bottomEnd['~/'](other)});
    }
    ['%'](other) {
      return new src__painting__border_radius.BorderRadiusDirectional.only({topStart: this.topStart['%'](other), topEnd: this.topEnd['%'](other), bottomStart: this.bottomStart['%'](other), bottomEnd: this.bottomEnd['%'](other)});
    }
    static lerp(a, b, t) {
      if (!(t != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/border_radius.dart", 721, 12, "t != null");
      if (a == null && b == null) return null;
      if (a == null) return b['*'](t);
      if (b == null) return a['*'](1.0 - dart.notNull(t));
      return new src__painting__border_radius.BorderRadiusDirectional.only({topStart: ui$.Radius.lerp(a.topStart, b.topStart, t), topEnd: ui$.Radius.lerp(a.topEnd, b.topEnd, t), bottomStart: ui$.Radius.lerp(a.bottomStart, b.bottomStart, t), bottomEnd: ui$.Radius.lerp(a.bottomEnd, b.bottomEnd, t)});
    }
    resolve(direction) {
      if (!(direction != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/border_radius.dart", 735, 12, "direction != null");
      switch (direction) {
        case ui$.TextDirection.rtl:
        {
          return new src__painting__border_radius.BorderRadius.only({topLeft: this.topEnd, topRight: this.topStart, bottomLeft: this.bottomEnd, bottomRight: this.bottomStart});
        }
        case ui$.TextDirection.ltr:
        {
          return new src__painting__border_radius.BorderRadius.only({topLeft: this.topStart, topRight: this.topEnd, bottomLeft: this.bottomStart, bottomRight: this.bottomEnd});
        }
      }
      return null;
    }
  };
  (src__painting__border_radius.BorderRadiusDirectional.all = function(radius) {
    src__painting__border_radius.BorderRadiusDirectional.only.call(this, {topStart: radius, topEnd: radius, bottomStart: radius, bottomEnd: radius});
  }).prototype = src__painting__border_radius.BorderRadiusDirectional.prototype;
  (src__painting__border_radius.BorderRadiusDirectional.circular = function(radius) {
    src__painting__border_radius.BorderRadiusDirectional.all.call(this, new ui$.Radius.circular(radius));
  }).prototype = src__painting__border_radius.BorderRadiusDirectional.prototype;
  (src__painting__border_radius.BorderRadiusDirectional.vertical = function(opts) {
    let top = opts && 'top' in opts ? opts.top : ui$.Radius.zero;
    let bottom = opts && 'bottom' in opts ? opts.bottom : ui$.Radius.zero;
    src__painting__border_radius.BorderRadiusDirectional.only.call(this, {topStart: top, topEnd: top, bottomStart: bottom, bottomEnd: bottom});
  }).prototype = src__painting__border_radius.BorderRadiusDirectional.prototype;
  (src__painting__border_radius.BorderRadiusDirectional.horizontal = function(opts) {
    let start = opts && 'start' in opts ? opts.start : ui$.Radius.zero;
    let end = opts && 'end' in opts ? opts.end : ui$.Radius.zero;
    src__painting__border_radius.BorderRadiusDirectional.only.call(this, {topStart: start, topEnd: end, bottomStart: start, bottomEnd: end});
  }).prototype = src__painting__border_radius.BorderRadiusDirectional.prototype;
  (src__painting__border_radius.BorderRadiusDirectional.only = function(opts) {
    let topStart = opts && 'topStart' in opts ? opts.topStart : ui$.Radius.zero;
    let topEnd = opts && 'topEnd' in opts ? opts.topEnd : ui$.Radius.zero;
    let bottomStart = opts && 'bottomStart' in opts ? opts.bottomStart : ui$.Radius.zero;
    let bottomEnd = opts && 'bottomEnd' in opts ? opts.bottomEnd : ui$.Radius.zero;
    this[topStart$] = topStart;
    this[topEnd$] = topEnd;
    this[bottomStart$] = bottomStart;
    this[bottomEnd$] = bottomEnd;
    src__painting__border_radius.BorderRadiusDirectional.__proto__.new.call(this);
    ;
  }).prototype = src__painting__border_radius.BorderRadiusDirectional.prototype;
  dart.addTypeTests(src__painting__border_radius.BorderRadiusDirectional);
  const topStart$ = Symbol("BorderRadiusDirectional.topStart");
  const topEnd$ = Symbol("BorderRadiusDirectional.topEnd");
  const bottomStart$ = Symbol("BorderRadiusDirectional.bottomStart");
  const bottomEnd$ = Symbol("BorderRadiusDirectional.bottomEnd");
  dart.setMethodSignature(src__painting__border_radius.BorderRadiusDirectional, () => ({
    __proto__: dart.getMethods(src__painting__border_radius.BorderRadiusDirectional.__proto__),
    '-': dart.fnType(src__painting__border_radius.BorderRadiusDirectional, [src__painting__border_radius.BorderRadiusDirectional]),
    '+': dart.fnType(src__painting__border_radius.BorderRadiusDirectional, [src__painting__border_radius.BorderRadiusDirectional]),
    _negate: dart.fnType(src__painting__border_radius.BorderRadiusDirectional, []),
    '*': dart.fnType(src__painting__border_radius.BorderRadiusDirectional, [core.double]),
    '/': dart.fnType(src__painting__border_radius.BorderRadiusDirectional, [core.double]),
    '~/': dart.fnType(src__painting__border_radius.BorderRadiusDirectional, [core.double]),
    '%': dart.fnType(src__painting__border_radius.BorderRadiusDirectional, [core.double]),
    resolve: dart.fnType(src__painting__border_radius.BorderRadius, [ui$.TextDirection])
  }));
  dart.setGetterSignature(src__painting__border_radius.BorderRadiusDirectional, () => ({
    __proto__: dart.getGetters(src__painting__border_radius.BorderRadiusDirectional.__proto__),
    [_topStart]: ui$.Radius,
    [_topEnd]: ui$.Radius,
    [_bottomStart]: ui$.Radius,
    [_bottomEnd]: ui$.Radius,
    [_topLeft]: ui$.Radius,
    [_topRight]: ui$.Radius,
    [_bottomLeft]: ui$.Radius,
    [_bottomRight]: ui$.Radius
  }));
  dart.setLibraryUri(src__painting__border_radius.BorderRadiusDirectional, "package:flutter_web/src/painting/border_radius.dart");
  dart.setFieldSignature(src__painting__border_radius.BorderRadiusDirectional, () => ({
    __proto__: dart.getFields(src__painting__border_radius.BorderRadiusDirectional.__proto__),
    topStart: dart.finalFieldType(ui$.Radius),
    topEnd: dart.finalFieldType(ui$.Radius),
    bottomStart: dart.finalFieldType(ui$.Radius),
    bottomEnd: dart.finalFieldType(ui$.Radius)
  }));
  dart.defineLazy(src__painting__border_radius.BorderRadiusDirectional, {
    /*src__painting__border_radius.BorderRadiusDirectional.zero*/get zero() {
      return dart.const(new src__painting__border_radius.BorderRadiusDirectional.all(ui$.Radius.zero));
    }
  });
  src__painting__border_radius._MixedBorderRadius = class _MixedBorderRadius extends src__painting__border_radius.BorderRadiusGeometry {
    get [_topLeft]() {
      return this[_topLeft$];
    }
    set [_topLeft](value) {
      super[_topLeft] = value;
    }
    get [_topRight]() {
      return this[_topRight$];
    }
    set [_topRight](value) {
      super[_topRight] = value;
    }
    get [_bottomLeft]() {
      return this[_bottomLeft$];
    }
    set [_bottomLeft](value) {
      super[_bottomLeft] = value;
    }
    get [_bottomRight]() {
      return this[_bottomRight$];
    }
    set [_bottomRight](value) {
      super[_bottomRight] = value;
    }
    get [_topStart]() {
      return this[_topStart$];
    }
    set [_topStart](value) {
      super[_topStart] = value;
    }
    get [_topEnd]() {
      return this[_topEnd$];
    }
    set [_topEnd](value) {
      super[_topEnd] = value;
    }
    get [_bottomStart]() {
      return this[_bottomStart$];
    }
    set [_bottomStart](value) {
      super[_bottomStart] = value;
    }
    get [_bottomEnd]() {
      return this[_bottomEnd$];
    }
    set [_bottomEnd](value) {
      super[_bottomEnd] = value;
    }
    _negate() {
      return new src__painting__border_radius._MixedBorderRadius.new(this[_topLeft]._negate(), this[_topRight]._negate(), this[_bottomLeft]._negate(), this[_bottomRight]._negate(), this[_topStart]._negate(), this[_topEnd]._negate(), this[_bottomStart]._negate(), this[_bottomEnd]._negate());
    }
    ['*'](other) {
      return new src__painting__border_radius._MixedBorderRadius.new(this[_topLeft]['*'](other), this[_topRight]['*'](other), this[_bottomLeft]['*'](other), this[_bottomRight]['*'](other), this[_topStart]['*'](other), this[_topEnd]['*'](other), this[_bottomStart]['*'](other), this[_bottomEnd]['*'](other));
    }
    ['/'](other) {
      return new src__painting__border_radius._MixedBorderRadius.new(this[_topLeft]['/'](other), this[_topRight]['/'](other), this[_bottomLeft]['/'](other), this[_bottomRight]['/'](other), this[_topStart]['/'](other), this[_topEnd]['/'](other), this[_bottomStart]['/'](other), this[_bottomEnd]['/'](other));
    }
    ['~/'](other) {
      return new src__painting__border_radius._MixedBorderRadius.new(this[_topLeft]['~/'](other), this[_topRight]['~/'](other), this[_bottomLeft]['~/'](other), this[_bottomRight]['~/'](other), this[_topStart]['~/'](other), this[_topEnd]['~/'](other), this[_bottomStart]['~/'](other), this[_bottomEnd]['~/'](other));
    }
    ['%'](other) {
      return new src__painting__border_radius._MixedBorderRadius.new(this[_topLeft]['%'](other), this[_topRight]['%'](other), this[_bottomLeft]['%'](other), this[_bottomRight]['%'](other), this[_topStart]['%'](other), this[_topEnd]['%'](other), this[_bottomStart]['%'](other), this[_bottomEnd]['%'](other));
    }
    resolve(direction) {
      if (!(direction != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/border_radius.dart", 865, 12, "direction != null");
      switch (direction) {
        case ui$.TextDirection.rtl:
        {
          return new src__painting__border_radius.BorderRadius.only({topLeft: this[_topLeft]['+'](this[_topEnd]), topRight: this[_topRight]['+'](this[_topStart]), bottomLeft: this[_bottomLeft]['+'](this[_bottomEnd]), bottomRight: this[_bottomRight]['+'](this[_bottomStart])});
        }
        case ui$.TextDirection.ltr:
        {
          return new src__painting__border_radius.BorderRadius.only({topLeft: this[_topLeft]['+'](this[_topStart]), topRight: this[_topRight]['+'](this[_topEnd]), bottomLeft: this[_bottomLeft]['+'](this[_bottomStart]), bottomRight: this[_bottomRight]['+'](this[_bottomEnd])});
        }
      }
      return null;
    }
  };
  (src__painting__border_radius._MixedBorderRadius.new = function(_topLeft, _topRight, _bottomLeft, _bottomRight, _topStart, _topEnd, _bottomStart, _bottomEnd) {
    this[_topLeft$] = _topLeft;
    this[_topRight$] = _topRight;
    this[_bottomLeft$] = _bottomLeft;
    this[_bottomRight$] = _bottomRight;
    this[_topStart$] = _topStart;
    this[_topEnd$] = _topEnd;
    this[_bottomStart$] = _bottomStart;
    this[_bottomEnd$] = _bottomEnd;
    src__painting__border_radius._MixedBorderRadius.__proto__.new.call(this);
    ;
  }).prototype = src__painting__border_radius._MixedBorderRadius.prototype;
  dart.addTypeTests(src__painting__border_radius._MixedBorderRadius);
  const _topLeft$ = Symbol("_MixedBorderRadius._topLeft");
  const _topRight$ = Symbol("_MixedBorderRadius._topRight");
  const _bottomLeft$ = Symbol("_MixedBorderRadius._bottomLeft");
  const _bottomRight$ = Symbol("_MixedBorderRadius._bottomRight");
  const _topStart$ = Symbol("_MixedBorderRadius._topStart");
  const _topEnd$ = Symbol("_MixedBorderRadius._topEnd");
  const _bottomStart$ = Symbol("_MixedBorderRadius._bottomStart");
  const _bottomEnd$ = Symbol("_MixedBorderRadius._bottomEnd");
  dart.setMethodSignature(src__painting__border_radius._MixedBorderRadius, () => ({
    __proto__: dart.getMethods(src__painting__border_radius._MixedBorderRadius.__proto__),
    _negate: dart.fnType(src__painting__border_radius._MixedBorderRadius, []),
    '*': dart.fnType(src__painting__border_radius._MixedBorderRadius, [core.double]),
    '/': dart.fnType(src__painting__border_radius._MixedBorderRadius, [core.double]),
    '~/': dart.fnType(src__painting__border_radius._MixedBorderRadius, [core.double]),
    '%': dart.fnType(src__painting__border_radius._MixedBorderRadius, [core.double]),
    resolve: dart.fnType(src__painting__border_radius.BorderRadius, [ui$.TextDirection])
  }));
  dart.setLibraryUri(src__painting__border_radius._MixedBorderRadius, "package:flutter_web/src/painting/border_radius.dart");
  dart.setFieldSignature(src__painting__border_radius._MixedBorderRadius, () => ({
    __proto__: dart.getFields(src__painting__border_radius._MixedBorderRadius.__proto__),
    [_topLeft]: dart.finalFieldType(ui$.Radius),
    [_topRight]: dart.finalFieldType(ui$.Radius),
    [_bottomLeft]: dart.finalFieldType(ui$.Radius),
    [_bottomRight]: dart.finalFieldType(ui$.Radius),
    [_topStart]: dart.finalFieldType(ui$.Radius),
    [_topEnd]: dart.finalFieldType(ui$.Radius),
    [_bottomStart]: dart.finalFieldType(ui$.Radius),
    [_bottomEnd]: dart.finalFieldType(ui$.Radius)
  }));
  src__painting__paint_utilities.paintZigZag = function(canvas, paint, start, end, zigs, width) {
    let t16;
    if (!zigs[$isFinite]) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/paint_utilities.dart", 25, 10, "zigs.isFinite");
    if (!(dart.notNull(zigs) > 0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/paint_utilities.dart", 26, 10, "zigs > 0");
    canvas.save();
    canvas.translate(start.dx, start.dy);
    end = end['-'](start);
    canvas.rotate(math.atan2(end.dy, end.dx));
    let length = end.distance;
    let spacing = dart.notNull(length) / (dart.notNull(zigs) * 2.0);
    let path = (t16 = ui$.Path.new(), t16.moveTo(0.0, 0.0), t16);
    for (let index = 0; index < dart.notNull(zigs); index = index + 1) {
      let x = (index * 2.0 + 1.0) * spacing;
      let y = dart.notNull(width) * (index[$modulo](2.0) * 2.0 - 1.0);
      path.lineTo(x, y);
    }
    path.lineTo(length, 0.0);
    canvas.drawPath(path, paint);
    canvas.restore();
  };
  src__gestures__tap.TapDownDetails = class TapDownDetails extends core.Object {
    get globalPosition() {
      return this[globalPosition$2];
    }
    set globalPosition(value) {
      super.globalPosition = value;
    }
    get kind() {
      return this[kind$0];
    }
    set kind(value) {
      super.kind = value;
    }
    get localPosition() {
      return this[localPosition$3];
    }
    set localPosition(value) {
      super.localPosition = value;
    }
  };
  (src__gestures__tap.TapDownDetails.new = function(opts) {
    let t16;
    let globalPosition = opts && 'globalPosition' in opts ? opts.globalPosition : ui$.Offset.zero;
    let localPosition = opts && 'localPosition' in opts ? opts.localPosition : null;
    let kind = opts && 'kind' in opts ? opts.kind : null;
    this[globalPosition$2] = globalPosition;
    this[kind$0] = kind;
    if (!(globalPosition != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/tap.dart", 27, 15, "globalPosition != null");
    this[localPosition$3] = (t16 = localPosition, t16 == null ? globalPosition : t16);
    ;
  }).prototype = src__gestures__tap.TapDownDetails.prototype;
  dart.addTypeTests(src__gestures__tap.TapDownDetails);
  const globalPosition$2 = Symbol("TapDownDetails.globalPosition");
  const kind$0 = Symbol("TapDownDetails.kind");
  const localPosition$3 = Symbol("TapDownDetails.localPosition");
  dart.setLibraryUri(src__gestures__tap.TapDownDetails, "package:flutter_web/src/gestures/tap.dart");
  dart.setFieldSignature(src__gestures__tap.TapDownDetails, () => ({
    __proto__: dart.getFields(src__gestures__tap.TapDownDetails.__proto__),
    globalPosition: dart.finalFieldType(ui$.Offset),
    kind: dart.finalFieldType(ui$.PointerDeviceKind),
    localPosition: dart.finalFieldType(ui$.Offset)
  }));
  src__gestures__tap.TapUpDetails = class TapUpDetails extends core.Object {
    get globalPosition() {
      return this[globalPosition$3];
    }
    set globalPosition(value) {
      super.globalPosition = value;
    }
    get localPosition() {
      return this[localPosition$4];
    }
    set localPosition(value) {
      super.localPosition = value;
    }
  };
  (src__gestures__tap.TapUpDetails.new = function(opts) {
    let t16;
    let globalPosition = opts && 'globalPosition' in opts ? opts.globalPosition : ui$.Offset.zero;
    let localPosition = opts && 'localPosition' in opts ? opts.localPosition : null;
    this[globalPosition$3] = globalPosition;
    if (!(globalPosition != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/tap.dart", 63, 15, "globalPosition != null");
    this[localPosition$4] = (t16 = localPosition, t16 == null ? globalPosition : t16);
    ;
  }).prototype = src__gestures__tap.TapUpDetails.prototype;
  dart.addTypeTests(src__gestures__tap.TapUpDetails);
  const globalPosition$3 = Symbol("TapUpDetails.globalPosition");
  const localPosition$4 = Symbol("TapUpDetails.localPosition");
  dart.setLibraryUri(src__gestures__tap.TapUpDetails, "package:flutter_web/src/gestures/tap.dart");
  dart.setFieldSignature(src__gestures__tap.TapUpDetails, () => ({
    __proto__: dart.getFields(src__gestures__tap.TapUpDetails.__proto__),
    globalPosition: dart.finalFieldType(ui$.Offset),
    localPosition: dart.finalFieldType(ui$.Offset)
  }));
  const _sentTapDown = dart.privateName(src__gestures__tap, "_sentTapDown");
  const _wonArenaForPrimaryPointer = dart.privateName(src__gestures__tap, "_wonArenaForPrimaryPointer");
  const _finalPosition = dart.privateName(src__gestures__tap, "_finalPosition");
  const _initialButtons = dart.privateName(src__gestures__tap, "_initialButtons");
  const _checkUp = dart.privateName(src__gestures__tap, "_checkUp");
  const _checkCancel = dart.privateName(src__gestures__tap, "_checkCancel");
  const _reset = dart.privateName(src__gestures__tap, "_reset");
  const _checkDown = dart.privateName(src__gestures__tap, "_checkDown");
  src__gestures__tap.TapGestureRecognizer = class TapGestureRecognizer extends src__gestures__recognizer.PrimaryPointerGestureRecognizer {
    get onTapDown() {
      return this[onTapDown];
    }
    set onTapDown(value) {
      this[onTapDown] = value;
    }
    get onTapUp() {
      return this[onTapUp];
    }
    set onTapUp(value) {
      this[onTapUp] = value;
    }
    get onTap() {
      return this[onTap];
    }
    set onTap(value) {
      this[onTap] = value;
    }
    get onTapCancel() {
      return this[onTapCancel];
    }
    set onTapCancel(value) {
      this[onTapCancel] = value;
    }
    get onSecondaryTapDown() {
      return this[onSecondaryTapDown];
    }
    set onSecondaryTapDown(value) {
      this[onSecondaryTapDown] = value;
    }
    get onSecondaryTapUp() {
      return this[onSecondaryTapUp];
    }
    set onSecondaryTapUp(value) {
      this[onSecondaryTapUp] = value;
    }
    get onSecondaryTapCancel() {
      return this[onSecondaryTapCancel];
    }
    set onSecondaryTapCancel(value) {
      this[onSecondaryTapCancel] = value;
    }
    isPointerAllowed(event) {
      switch (event.buttons) {
        case src__gestures__events.kPrimaryButton:
        {
          if (this.onTapDown == null && this.onTap == null && this.onTapUp == null && this.onTapCancel == null) return false;
          break;
        }
        case src__gestures__events.kSecondaryButton:
        {
          if (this.onSecondaryTapDown == null && this.onSecondaryTapUp == null && this.onSecondaryTapCancel == null) return false;
          break;
        }
        default:
        {
          return false;
        }
      }
      return super.isPointerAllowed(event);
    }
    addAllowedPointer(event) {
      super.addAllowedPointer(event);
      this[_initialButtons] = event.buttons;
    }
    handlePrimaryPointer(event) {
      if (src__gestures__events.PointerUpEvent.is(event)) {
        this[_finalPosition] = new src__gestures__recognizer.OffsetPair.new({global: event.position, local: event.localPosition});
        this[_checkUp]();
      } else if (src__gestures__events.PointerCancelEvent.is(event)) {
        this.resolve(src__gestures__arena.GestureDisposition.rejected);
        if (dart.test(this[_sentTapDown])) {
          this[_checkCancel]("");
        }
        this[_reset]();
      } else if (event.buttons != this[_initialButtons]) {
        this.resolve(src__gestures__arena.GestureDisposition.rejected);
        this.stopTrackingPointer(this.primaryPointer);
      }
    }
    resolve(disposition) {
      if (dart.test(this[_wonArenaForPrimaryPointer]) && dart.equals(disposition, src__gestures__arena.GestureDisposition.rejected)) {
        if (!dart.test(this[_sentTapDown])) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/tap.dart", 295, 14, "_sentTapDown");
        this[_checkCancel]("spontaneous ");
        this[_reset]();
      }
      super.resolve(disposition);
    }
    didExceedDeadlineWithEvent(event) {
      this[_checkDown](event.pointer);
    }
    acceptGesture(pointer) {
      super.acceptGesture(pointer);
      if (pointer == this.primaryPointer) {
        this[_checkDown](pointer);
        this[_wonArenaForPrimaryPointer] = true;
        this[_checkUp]();
      }
    }
    rejectGesture(pointer) {
      super.rejectGesture(pointer);
      if (pointer == this.primaryPointer) {
        if (!!dart.equals(this.state, src__gestures__recognizer.GestureRecognizerState.possible)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/tap.dart", 322, 14, "state != GestureRecognizerState.possible");
        if (dart.test(this[_sentTapDown])) this[_checkCancel]("forced ");
        this[_reset]();
      }
    }
    [_checkDown](pointer) {
      if (dart.test(this[_sentTapDown])) {
        return;
      }
      let details = new src__gestures__tap.TapDownDetails.new({globalPosition: this.initialPosition.global, localPosition: this.initialPosition.local, kind: this.getKindForPointer(pointer)});
      switch (this[_initialButtons]) {
        case src__gestures__events.kPrimaryButton:
        {
          if (this.onTapDown != null) this.invokeCallback(dart.void, "onTapDown", dart.fn(() => this.onTapDown(details), VoidTovoid()));
          break;
        }
        case src__gestures__events.kSecondaryButton:
        {
          if (this.onSecondaryTapDown != null) this.invokeCallback(dart.void, "onSecondaryTapDown", dart.fn(() => this.onSecondaryTapDown(details), VoidTovoid()));
          break;
        }
        default:
      }
      this[_sentTapDown] = true;
    }
    [_checkUp]() {
      if (!dart.test(this[_wonArenaForPrimaryPointer]) || this[_finalPosition] == null) {
        return;
      }
      let details = new src__gestures__tap.TapUpDetails.new({globalPosition: this[_finalPosition].global, localPosition: this[_finalPosition].local});
      switch (this[_initialButtons]) {
        case src__gestures__events.kPrimaryButton:
        {
          if (this.onTapUp != null) this.invokeCallback(dart.void, "onTapUp", dart.fn(() => this.onTapUp(details), VoidTovoid()));
          if (this.onTap != null) this.invokeCallback(dart.void, "onTap", this.onTap);
          break;
        }
        case src__gestures__events.kSecondaryButton:
        {
          if (this.onSecondaryTapUp != null) this.invokeCallback(dart.void, "onSecondaryTapUp", dart.fn(() => this.onSecondaryTapUp(details), VoidTovoid()));
          break;
        }
        default:
      }
      this[_reset]();
    }
    [_checkCancel](note) {
      switch (this[_initialButtons]) {
        case src__gestures__events.kPrimaryButton:
        {
          if (this.onTapCancel != null) this.invokeCallback(dart.void, dart.str(note) + "onTapCancel", this.onTapCancel);
          break;
        }
        case src__gestures__events.kSecondaryButton:
        {
          if (this.onSecondaryTapCancel != null) this.invokeCallback(dart.void, dart.str(note) + "onSecondaryTapCancel", this.onSecondaryTapCancel);
          break;
        }
        default:
      }
    }
    [_reset]() {
      this[_sentTapDown] = false;
      this[_wonArenaForPrimaryPointer] = false;
      this[_finalPosition] = null;
      this[_initialButtons] = null;
    }
    get debugDescription() {
      return "tap";
    }
    debugFillProperties(properties) {
      let t16, t16$, t16$0;
      super.debugFillProperties(properties);
      properties.add(new src__foundation__diagnostics.FlagProperty.new("wonArenaForPrimaryPointer", {value: this[_wonArenaForPrimaryPointer], ifTrue: "won arena"}));
      properties.add(new (DiagnosticsPropertyOfOffset()).new("finalPosition", (t16 = this[_finalPosition], t16 == null ? null : t16.global), {defaultValue: null}));
      properties.add(new (DiagnosticsPropertyOfOffset()).new("finalLocalPosition", (t16$ = this[_finalPosition], t16$ == null ? null : t16$.local), {defaultValue: (t16$0 = this[_finalPosition], t16$0 == null ? null : t16$0.global)}));
      properties.add(new src__foundation__diagnostics.FlagProperty.new("sentTapDown", {value: this[_sentTapDown], ifTrue: "sent tap down"}));
    }
  };
  (src__gestures__tap.TapGestureRecognizer.new = function(opts) {
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    this[onTapDown] = null;
    this[onTapUp] = null;
    this[onTap] = null;
    this[onTapCancel] = null;
    this[onSecondaryTapDown] = null;
    this[onSecondaryTapUp] = null;
    this[onSecondaryTapCancel] = null;
    this[_sentTapDown] = false;
    this[_wonArenaForPrimaryPointer] = false;
    this[_finalPosition] = null;
    this[_initialButtons] = null;
    src__gestures__tap.TapGestureRecognizer.__proto__.new.call(this, {deadline: src__gestures__constants.kPressTimeout, debugOwner: debugOwner});
    ;
  }).prototype = src__gestures__tap.TapGestureRecognizer.prototype;
  dart.addTypeTests(src__gestures__tap.TapGestureRecognizer);
  const onTapDown = Symbol("TapGestureRecognizer.onTapDown");
  const onTapUp = Symbol("TapGestureRecognizer.onTapUp");
  const onTap = Symbol("TapGestureRecognizer.onTap");
  const onTapCancel = Symbol("TapGestureRecognizer.onTapCancel");
  const onSecondaryTapDown = Symbol("TapGestureRecognizer.onSecondaryTapDown");
  const onSecondaryTapUp = Symbol("TapGestureRecognizer.onSecondaryTapUp");
  const onSecondaryTapCancel = Symbol("TapGestureRecognizer.onSecondaryTapCancel");
  dart.setMethodSignature(src__gestures__tap.TapGestureRecognizer, () => ({
    __proto__: dart.getMethods(src__gestures__tap.TapGestureRecognizer.__proto__),
    handlePrimaryPointer: dart.fnType(dart.void, [src__gestures__events.PointerEvent]),
    [_checkDown]: dart.fnType(dart.void, [core.int]),
    [_checkUp]: dart.fnType(dart.void, []),
    [_checkCancel]: dart.fnType(dart.void, [core.String]),
    [_reset]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(src__gestures__tap.TapGestureRecognizer, () => ({
    __proto__: dart.getGetters(src__gestures__tap.TapGestureRecognizer.__proto__),
    debugDescription: core.String
  }));
  dart.setLibraryUri(src__gestures__tap.TapGestureRecognizer, "package:flutter_web/src/gestures/tap.dart");
  dart.setFieldSignature(src__gestures__tap.TapGestureRecognizer, () => ({
    __proto__: dart.getFields(src__gestures__tap.TapGestureRecognizer.__proto__),
    onTapDown: dart.fieldType(dart.fnType(dart.void, [src__gestures__tap.TapDownDetails])),
    onTapUp: dart.fieldType(dart.fnType(dart.void, [src__gestures__tap.TapUpDetails])),
    onTap: dart.fieldType(dart.fnType(dart.void, [])),
    onTapCancel: dart.fieldType(dart.fnType(dart.void, [])),
    onSecondaryTapDown: dart.fieldType(dart.fnType(dart.void, [src__gestures__tap.TapDownDetails])),
    onSecondaryTapUp: dart.fieldType(dart.fnType(dart.void, [src__gestures__tap.TapUpDetails])),
    onSecondaryTapCancel: dart.fieldType(dart.fnType(dart.void, [])),
    [_sentTapDown]: dart.fieldType(core.bool),
    [_wonArenaForPrimaryPointer]: dart.fieldType(core.bool),
    [_finalPosition]: dart.fieldType(src__gestures__recognizer.OffsetPair),
    [_initialButtons]: dart.fieldType(core.int)
  }));
  src__scheduler__debug.debugAssertAllSchedulerVarsUnset = function(reason) {
    if (!dart.test(dart.fn(() => {
      if (dart.test(src__scheduler__debug.debugPrintBeginFrameBanner) || dart.test(src__scheduler__debug.debugPrintEndFrameBanner)) {
        dart.throw(src__foundation__assertions.FlutterError.new(reason));
      }
      return true;
    }, VoidTobool())())) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/scheduler/debug.dart", 62, 10, "() {\n    if (debugPrintBeginFrameBanner || debugPrintEndFrameBanner) {\n      throw new FlutterError(reason);\n    }\n    return true;\n  }()");
    return true;
  };
  dart.defineLazy(src__scheduler__debug, {
    /*src__scheduler__debug.debugPrintBeginFrameBanner*/get debugPrintBeginFrameBanner() {
      return false;
    },
    set debugPrintBeginFrameBanner(_) {},
    /*src__scheduler__debug.debugPrintEndFrameBanner*/get debugPrintEndFrameBanner() {
      return false;
    },
    set debugPrintEndFrameBanner(_) {},
    /*src__scheduler__debug.debugPrintScheduleFrameStacks*/get debugPrintScheduleFrameStacks() {
      return false;
    },
    set debugPrintScheduleFrameStacks(_) {}
  });
  src__painting__notched_shapes.NotchedShape = class NotchedShape extends core.Object {};
  (src__painting__notched_shapes.NotchedShape.new = function() {
    ;
  }).prototype = src__painting__notched_shapes.NotchedShape.prototype;
  dart.addTypeTests(src__painting__notched_shapes.NotchedShape);
  dart.setLibraryUri(src__painting__notched_shapes.NotchedShape, "package:flutter_web/src/painting/notched_shapes.dart");
  src__painting__notched_shapes.CircularNotchedRectangle = class CircularNotchedRectangle extends core.Object {
    getOuterPath(host, guest) {
      let t16, t17, t16$, t16$0;
      if (!dart.test(host.overlaps(guest))) {
        t16 = ui$.Path.new();
        t16.addRect(host);
        return t16;
      }
      let notchRadius = dart.notNull(guest.width) / 2.0;
      let s1 = 15.0;
      let s2 = 1.0;
      let r = notchRadius;
      let a = -1.0 * r - s2;
      let b = dart.notNull(host.top) - dart.notNull(guest.center.dy);
      let n2 = math.sqrt(b * b * r * r * (a * a + b * b - r * r));
      let p2xA = (a * r * r - n2) / (a * a + b * b);
      let p2xB = (a * r * r + n2) / (a * a + b * b);
      let p2yA = math.sqrt(r * r - p2xA * p2xA);
      let p2yB = math.sqrt(r * r - p2xB * p2xB);
      let p = ListOfOffset().new(6);
      p[$_set](0, new ui$.Offset.new(a - s1, b));
      p[$_set](1, new ui$.Offset.new(a, b));
      let cmp = b < 0 ? -1.0 : 1.0;
      p[$_set](2, cmp * p2yA > cmp * p2yB ? new ui$.Offset.new(p2xA, p2yA) : new ui$.Offset.new(p2xB, p2yB));
      p[$_set](3, new ui$.Offset.new(-1.0 * dart.notNull(p[$_get](2).dx), p[$_get](2).dy));
      p[$_set](4, new ui$.Offset.new(-1.0 * dart.notNull(p[$_get](1).dx), p[$_get](1).dy));
      p[$_set](5, new ui$.Offset.new(-1.0 * dart.notNull(p[$_get](0).dx), p[$_get](0).dy));
      for (let i = 0; i < dart.notNull(p[$length]); i = i + 1) {
        t16$ = p;
        t17 = i;
        t16$[$_set](t17, t16$[$_get](t17)['+'](guest.center));
      }
      t16$0 = ui$.Path.new();
      t16$0.moveTo(host.left, host.top);
      t16$0.lineTo(p[$_get](0).dx, p[$_get](0).dy);
      t16$0.quadraticBezierTo(p[$_get](1).dx, p[$_get](1).dy, p[$_get](2).dx, p[$_get](2).dy);
      t16$0.arcToPoint(p[$_get](3), {radius: new ui$.Radius.circular(notchRadius), clockwise: false});
      t16$0.quadraticBezierTo(p[$_get](4).dx, p[$_get](4).dy, p[$_get](5).dx, p[$_get](5).dy);
      t16$0.lineTo(host.right, host.top);
      t16$0.lineTo(host.right, host.bottom);
      t16$0.lineTo(host.left, host.bottom);
      t16$0.close();
      return t16$0;
    }
  };
  (src__painting__notched_shapes.CircularNotchedRectangle.new = function() {
    ;
  }).prototype = src__painting__notched_shapes.CircularNotchedRectangle.prototype;
  dart.addTypeTests(src__painting__notched_shapes.CircularNotchedRectangle);
  src__painting__notched_shapes.CircularNotchedRectangle[dart.implements] = () => [src__painting__notched_shapes.NotchedShape];
  dart.setMethodSignature(src__painting__notched_shapes.CircularNotchedRectangle, () => ({
    __proto__: dart.getMethods(src__painting__notched_shapes.CircularNotchedRectangle.__proto__),
    getOuterPath: dart.fnType(ui$.Path, [ui$.Rect, ui$.Rect])
  }));
  dart.setLibraryUri(src__painting__notched_shapes.CircularNotchedRectangle, "package:flutter_web/src/painting/notched_shapes.dart");
  src__painting__geometry.positionDependentBox = function(opts) {
    let size = opts && 'size' in opts ? opts.size : null;
    let childSize = opts && 'childSize' in opts ? opts.childSize : null;
    let target = opts && 'target' in opts ? opts.target : null;
    let preferBelow = opts && 'preferBelow' in opts ? opts.preferBelow : null;
    let verticalOffset = opts && 'verticalOffset' in opts ? opts.verticalOffset : 0.0;
    let margin = opts && 'margin' in opts ? opts.margin : 10.0;
    if (!(size != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/geometry.dart", 49, 10, "size != null");
    if (!(childSize != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/geometry.dart", 50, 10, "childSize != null");
    if (!(target != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/geometry.dart", 51, 10, "target != null");
    if (!(verticalOffset != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/geometry.dart", 52, 10, "verticalOffset != null");
    if (!(preferBelow != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/geometry.dart", 53, 10, "preferBelow != null");
    if (!(margin != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/geometry.dart", 54, 10, "margin != null");
    let fitsBelow = dart.notNull(target.dy) + dart.notNull(verticalOffset) + dart.notNull(childSize.height) <= dart.notNull(size.height) - dart.notNull(margin);
    let fitsAbove = dart.notNull(target.dy) - dart.notNull(verticalOffset) - dart.notNull(childSize.height) >= dart.notNull(margin);
    let tooltipBelow = dart.test(preferBelow) ? fitsBelow || !fitsAbove : !(fitsAbove || !fitsBelow);
    let y = null;
    if (tooltipBelow)
      y = math.min(core.double, dart.notNull(target.dy) + dart.notNull(verticalOffset), dart.notNull(size.height) - dart.notNull(margin));
    else
      y = math.max(core.double, dart.notNull(target.dy) - dart.notNull(verticalOffset) - dart.notNull(childSize.height), margin);
    let x = null;
    if (dart.notNull(size.width) - dart.notNull(margin) * 2.0 < dart.notNull(childSize.width)) {
      x = (dart.notNull(size.width) - dart.notNull(childSize.width)) / 2.0;
    } else {
      let normalizedTargetX = target.dx[$clamp](margin, dart.notNull(size.width) - dart.notNull(margin));
      let edge = dart.notNull(margin) + dart.notNull(childSize.width) / 2.0;
      if (normalizedTargetX < edge) {
        x = margin;
      } else if (normalizedTargetX > dart.notNull(size.width) - edge) {
        x = dart.notNull(size.width) - dart.notNull(margin) - dart.notNull(childSize.width);
      } else {
        x = normalizedTargetX - dart.notNull(childSize.width) / 2.0;
      }
    }
    return new ui$.Offset.new(x, y);
  };
  const _name$8 = dart.privateName(src__gestures__force_press, "_name");
  src__gestures__force_press._ForceState = class _ForceState extends core.Object {
    toString() {
      return this[_name$8];
    }
  };
  (src__gestures__force_press._ForceState.new = function(index, _name) {
    this.index = index;
    this[_name$8] = _name;
    ;
  }).prototype = src__gestures__force_press._ForceState.prototype;
  dart.addTypeTests(src__gestures__force_press._ForceState);
  dart.setLibraryUri(src__gestures__force_press._ForceState, "package:flutter_web/src/gestures/force_press.dart");
  dart.setFieldSignature(src__gestures__force_press._ForceState, () => ({
    __proto__: dart.getFields(src__gestures__force_press._ForceState.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$8]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(src__gestures__force_press._ForceState, ['toString']);
  src__gestures__force_press._ForceState.ready = dart.const(new src__gestures__force_press._ForceState.new(0, "_ForceState.ready"));
  src__gestures__force_press._ForceState.possible = dart.const(new src__gestures__force_press._ForceState.new(1, "_ForceState.possible"));
  src__gestures__force_press._ForceState.accepted = dart.const(new src__gestures__force_press._ForceState.new(2, "_ForceState.accepted"));
  src__gestures__force_press._ForceState.started = dart.const(new src__gestures__force_press._ForceState.new(3, "_ForceState.started"));
  src__gestures__force_press._ForceState.peaked = dart.const(new src__gestures__force_press._ForceState.new(4, "_ForceState.peaked"));
  src__gestures__force_press._ForceState.values = dart.constList([src__gestures__force_press._ForceState.ready, src__gestures__force_press._ForceState.possible, src__gestures__force_press._ForceState.accepted, src__gestures__force_press._ForceState.started, src__gestures__force_press._ForceState.peaked], src__gestures__force_press._ForceState);
  src__gestures__force_press.ForcePressDetails = class ForcePressDetails extends core.Object {
    get globalPosition() {
      return this[globalPosition$4];
    }
    set globalPosition(value) {
      super.globalPosition = value;
    }
    get localPosition() {
      return this[localPosition$5];
    }
    set localPosition(value) {
      super.localPosition = value;
    }
    get pressure() {
      return this[pressure$0];
    }
    set pressure(value) {
      super.pressure = value;
    }
  };
  (src__gestures__force_press.ForcePressDetails.new = function(opts) {
    let t16;
    let globalPosition = opts && 'globalPosition' in opts ? opts.globalPosition : null;
    let localPosition = opts && 'localPosition' in opts ? opts.localPosition : null;
    let pressure = opts && 'pressure' in opts ? opts.pressure : null;
    this[globalPosition$4] = globalPosition;
    this[pressure$0] = pressure;
    if (!(globalPosition != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/force_press.dart", 57, 15, "globalPosition != null");
    if (!(pressure != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/force_press.dart", 58, 15, "pressure != null");
    this[localPosition$5] = (t16 = localPosition, t16 == null ? globalPosition : t16);
    ;
  }).prototype = src__gestures__force_press.ForcePressDetails.prototype;
  dart.addTypeTests(src__gestures__force_press.ForcePressDetails);
  const globalPosition$4 = Symbol("ForcePressDetails.globalPosition");
  const localPosition$5 = Symbol("ForcePressDetails.localPosition");
  const pressure$0 = Symbol("ForcePressDetails.pressure");
  dart.setLibraryUri(src__gestures__force_press.ForcePressDetails, "package:flutter_web/src/gestures/force_press.dart");
  dart.setFieldSignature(src__gestures__force_press.ForcePressDetails, () => ({
    __proto__: dart.getFields(src__gestures__force_press.ForcePressDetails.__proto__),
    globalPosition: dart.finalFieldType(ui$.Offset),
    localPosition: dart.finalFieldType(ui$.Offset),
    pressure: dart.finalFieldType(core.double)
  }));
  const _lastPosition = dart.privateName(src__gestures__force_press, "_lastPosition");
  const _lastPressure = dart.privateName(src__gestures__force_press, "_lastPressure");
  const _state$ = dart.privateName(src__gestures__force_press, "_state");
  src__gestures__force_press.ForcePressGestureRecognizer = class ForcePressGestureRecognizer extends src__gestures__recognizer.OneSequenceGestureRecognizer {
    get onStart() {
      return this[onStart$];
    }
    set onStart(value) {
      this[onStart$] = value;
    }
    get onUpdate() {
      return this[onUpdate$];
    }
    set onUpdate(value) {
      this[onUpdate$] = value;
    }
    get onPeak() {
      return this[onPeak];
    }
    set onPeak(value) {
      this[onPeak] = value;
    }
    get onEnd() {
      return this[onEnd$];
    }
    set onEnd(value) {
      this[onEnd$] = value;
    }
    get startPressure() {
      return this[startPressure$];
    }
    set startPressure(value) {
      super.startPressure = value;
    }
    get peakPressure() {
      return this[peakPressure$];
    }
    set peakPressure(value) {
      super.peakPressure = value;
    }
    get interpolation() {
      return this[interpolation$];
    }
    set interpolation(value) {
      super.interpolation = value;
    }
    addAllowedPointer(event) {
      if (!src__gestures__events.PointerUpEvent.is(event) && dart.notNull(event.pressureMax) <= 1.0) {
        this.resolve(src__gestures__arena.GestureDisposition.rejected);
      } else {
        this.startTrackingPointer(event.pointer, event.transform);
        if (dart.equals(this[_state$], src__gestures__force_press._ForceState.ready)) {
          this[_state$] = src__gestures__force_press._ForceState.possible;
          this[_lastPosition] = src__gestures__recognizer.OffsetPair.fromEventPosition(event);
        }
      }
    }
    handleEvent(event) {
      if (!!dart.equals(this[_state$], src__gestures__force_press._ForceState.ready)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/force_press.dart", 234, 12, "_state != _ForceState.ready");
      if (src__gestures__events.PointerMoveEvent.is(event) || src__gestures__events.PointerDownEvent.is(event)) {
        if (dart.notNull(event.pressure) > dart.notNull(event.pressureMax) || dart.notNull(event.pressure) < dart.notNull(event.pressureMin)) {
          src__foundation__print.debugPrint("The reported device pressure " + dart.toString(event.pressure) + " is outside of the device pressure range where: " + dart.toString(event.pressureMin) + " <= pressure <= " + dart.toString(event.pressureMax));
        }
        let pressure = this.interpolation(event.pressureMin, event.pressureMax, event.pressure);
        if (!(dart.notNull(pressure) >= 0.0 && dart.notNull(pressure) <= 1.0 || pressure[$isNaN])) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/force_press.dart", 247, 9, "(pressure >= 0.0 && pressure <= 1.0) || // Interpolated pressure must be between 1.0 and 0.0...\n        pressure.isNaN");
        this[_lastPosition] = src__gestures__recognizer.OffsetPair.fromEventPosition(event);
        this[_lastPressure] = pressure;
        if (dart.equals(this[_state$], src__gestures__force_press._ForceState.possible)) {
          if (dart.notNull(pressure) > dart.notNull(this.startPressure)) {
            this[_state$] = src__gestures__force_press._ForceState.started;
            this.resolve(src__gestures__arena.GestureDisposition.accepted);
          } else if (dart.notNull(event.delta.distanceSquared) > dart.notNull(src__gestures__constants.kTouchSlop)) {
            this.resolve(src__gestures__arena.GestureDisposition.rejected);
          }
        }
        if (dart.notNull(pressure) > dart.notNull(this.startPressure) && dart.equals(this[_state$], src__gestures__force_press._ForceState.accepted)) {
          this[_state$] = src__gestures__force_press._ForceState.started;
          if (this.onStart != null) {
            this.invokeCallback(dart.void, "onStart", dart.fn(() => this.onStart(new src__gestures__force_press.ForcePressDetails.new({pressure: pressure, globalPosition: this[_lastPosition].global, localPosition: this[_lastPosition].local})), VoidTovoid()));
          }
        }
        if (this.onPeak != null && dart.notNull(pressure) > dart.notNull(this.peakPressure) && dart.equals(this[_state$], src__gestures__force_press._ForceState.started)) {
          this[_state$] = src__gestures__force_press._ForceState.peaked;
          if (this.onPeak != null) {
            this.invokeCallback(dart.void, "onPeak", dart.fn(() => this.onPeak(new src__gestures__force_press.ForcePressDetails.new({pressure: pressure, globalPosition: event.position, localPosition: event.localPosition})), VoidTovoid()));
          }
        }
        if (this.onUpdate != null && !pressure[$isNaN] && (dart.equals(this[_state$], src__gestures__force_press._ForceState.started) || dart.equals(this[_state$], src__gestures__force_press._ForceState.peaked))) {
          if (this.onUpdate != null) {
            this.invokeCallback(dart.void, "onUpdate", dart.fn(() => this.onUpdate(new src__gestures__force_press.ForcePressDetails.new({pressure: pressure, globalPosition: event.position, localPosition: event.localPosition})), VoidTovoid()));
          }
        }
      }
      this.stopTrackingIfPointerNoLongerDown(event);
    }
    acceptGesture(pointer) {
      if (dart.equals(this[_state$], src__gestures__force_press._ForceState.possible)) this[_state$] = src__gestures__force_press._ForceState.accepted;
      if (this.onStart != null && dart.equals(this[_state$], src__gestures__force_press._ForceState.started)) {
        this.invokeCallback(dart.void, "onStart", dart.fn(() => this.onStart(new src__gestures__force_press.ForcePressDetails.new({pressure: this[_lastPressure], globalPosition: this[_lastPosition].global, localPosition: this[_lastPosition].local})), VoidTovoid()));
      }
    }
    didStopTrackingLastPointer(pointer) {
      let wasAccepted = dart.equals(this[_state$], src__gestures__force_press._ForceState.started) || dart.equals(this[_state$], src__gestures__force_press._ForceState.peaked);
      if (dart.equals(this[_state$], src__gestures__force_press._ForceState.possible)) {
        this.resolve(src__gestures__arena.GestureDisposition.rejected);
        return;
      }
      if (wasAccepted && this.onEnd != null) {
        if (this.onEnd != null) {
          this.invokeCallback(dart.void, "onEnd", dart.fn(() => this.onEnd(new src__gestures__force_press.ForcePressDetails.new({pressure: 0.0, globalPosition: this[_lastPosition].global, localPosition: this[_lastPosition].local})), VoidTovoid()));
        }
      }
      this[_state$] = src__gestures__force_press._ForceState.ready;
    }
    rejectGesture(pointer) {
      this.stopTrackingPointer(pointer);
      this.didStopTrackingLastPointer(pointer);
    }
    static _inverseLerp(min, max, t) {
      if (!(dart.notNull(min) <= dart.notNull(max))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/force_press.dart", 339, 12, "min <= max");
      let value = (dart.notNull(t) - dart.notNull(min)) / (dart.notNull(max) - dart.notNull(min));
      if (!value[$isNaN]) value = value[$clamp](0.0, 1.0);
      return value;
    }
    get debugDescription() {
      return "force press";
    }
  };
  (src__gestures__force_press.ForcePressGestureRecognizer.new = function(opts) {
    let startPressure = opts && 'startPressure' in opts ? opts.startPressure : 0.4;
    let peakPressure = opts && 'peakPressure' in opts ? opts.peakPressure : 0.85;
    let interpolation = opts && 'interpolation' in opts ? opts.interpolation : dart.fn(src__gestures__force_press.ForcePressGestureRecognizer._inverseLerp, doubleAnddoubleAnddoubleTodouble());
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    let kind = opts && 'kind' in opts ? opts.kind : null;
    this[onStart$] = null;
    this[onUpdate$] = null;
    this[onPeak] = null;
    this[onEnd$] = null;
    this[_lastPosition] = null;
    this[_lastPressure] = null;
    this[_state$] = src__gestures__force_press._ForceState.ready;
    this[startPressure$] = startPressure;
    this[peakPressure$] = peakPressure;
    this[interpolation$] = interpolation;
    if (!(startPressure != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/force_press.dart", 133, 15, "startPressure != null");
    if (!(peakPressure != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/force_press.dart", 134, 15, "peakPressure != null");
    if (!(interpolation != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/force_press.dart", 135, 15, "interpolation != null");
    if (!(dart.notNull(peakPressure) > dart.notNull(startPressure))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/force_press.dart", 136, 15, "peakPressure > startPressure");
    src__gestures__force_press.ForcePressGestureRecognizer.__proto__.new.call(this, {debugOwner: debugOwner, kind: kind});
    ;
  }).prototype = src__gestures__force_press.ForcePressGestureRecognizer.prototype;
  dart.addTypeTests(src__gestures__force_press.ForcePressGestureRecognizer);
  const onStart$ = Symbol("ForcePressGestureRecognizer.onStart");
  const onUpdate$ = Symbol("ForcePressGestureRecognizer.onUpdate");
  const onPeak = Symbol("ForcePressGestureRecognizer.onPeak");
  const onEnd$ = Symbol("ForcePressGestureRecognizer.onEnd");
  const startPressure$ = Symbol("ForcePressGestureRecognizer.startPressure");
  const peakPressure$ = Symbol("ForcePressGestureRecognizer.peakPressure");
  const interpolation$ = Symbol("ForcePressGestureRecognizer.interpolation");
  dart.setMethodSignature(src__gestures__force_press.ForcePressGestureRecognizer, () => ({
    __proto__: dart.getMethods(src__gestures__force_press.ForcePressGestureRecognizer.__proto__),
    addAllowedPointer: dart.fnType(dart.void, [src__gestures__events.PointerEvent]),
    handleEvent: dart.fnType(dart.void, [src__gestures__events.PointerEvent]),
    didStopTrackingLastPointer: dart.fnType(dart.void, [core.int])
  }));
  dart.setGetterSignature(src__gestures__force_press.ForcePressGestureRecognizer, () => ({
    __proto__: dart.getGetters(src__gestures__force_press.ForcePressGestureRecognizer.__proto__),
    debugDescription: core.String
  }));
  dart.setLibraryUri(src__gestures__force_press.ForcePressGestureRecognizer, "package:flutter_web/src/gestures/force_press.dart");
  dart.setFieldSignature(src__gestures__force_press.ForcePressGestureRecognizer, () => ({
    __proto__: dart.getFields(src__gestures__force_press.ForcePressGestureRecognizer.__proto__),
    onStart: dart.fieldType(dart.fnType(dart.void, [src__gestures__force_press.ForcePressDetails])),
    onUpdate: dart.fieldType(dart.fnType(dart.void, [src__gestures__force_press.ForcePressDetails])),
    onPeak: dart.fieldType(dart.fnType(dart.void, [src__gestures__force_press.ForcePressDetails])),
    onEnd: dart.fieldType(dart.fnType(dart.void, [src__gestures__force_press.ForcePressDetails])),
    startPressure: dart.finalFieldType(core.double),
    peakPressure: dart.finalFieldType(core.double),
    interpolation: dart.finalFieldType(dart.fnType(core.double, [core.double, core.double, core.double])),
    [_lastPosition]: dart.fieldType(src__gestures__recognizer.OffsetPair),
    [_lastPressure]: dart.fieldType(core.double),
    [_state$]: dart.fieldType(src__gestures__force_press._ForceState)
  }));
  src__gestures__long_press.LongPressStartDetails = class LongPressStartDetails extends core.Object {
    get globalPosition() {
      return this[globalPosition$5];
    }
    set globalPosition(value) {
      super.globalPosition = value;
    }
    get localPosition() {
      return this[localPosition$6];
    }
    set localPosition(value) {
      super.localPosition = value;
    }
  };
  (src__gestures__long_press.LongPressStartDetails.new = function(opts) {
    let t16;
    let globalPosition = opts && 'globalPosition' in opts ? opts.globalPosition : ui$.Offset.zero;
    let localPosition = opts && 'localPosition' in opts ? opts.localPosition : null;
    this[globalPosition$5] = globalPosition;
    if (!(globalPosition != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/long_press.dart", 59, 15, "globalPosition != null");
    this[localPosition$6] = (t16 = localPosition, t16 == null ? globalPosition : t16);
    ;
  }).prototype = src__gestures__long_press.LongPressStartDetails.prototype;
  dart.addTypeTests(src__gestures__long_press.LongPressStartDetails);
  const globalPosition$5 = Symbol("LongPressStartDetails.globalPosition");
  const localPosition$6 = Symbol("LongPressStartDetails.localPosition");
  dart.setLibraryUri(src__gestures__long_press.LongPressStartDetails, "package:flutter_web/src/gestures/long_press.dart");
  dart.setFieldSignature(src__gestures__long_press.LongPressStartDetails, () => ({
    __proto__: dart.getFields(src__gestures__long_press.LongPressStartDetails.__proto__),
    globalPosition: dart.finalFieldType(ui$.Offset),
    localPosition: dart.finalFieldType(ui$.Offset)
  }));
  src__gestures__long_press.LongPressMoveUpdateDetails = class LongPressMoveUpdateDetails extends core.Object {
    get globalPosition() {
      return this[globalPosition$6];
    }
    set globalPosition(value) {
      super.globalPosition = value;
    }
    get localPosition() {
      return this[localPosition$7];
    }
    set localPosition(value) {
      super.localPosition = value;
    }
    get offsetFromOrigin() {
      return this[offsetFromOrigin$];
    }
    set offsetFromOrigin(value) {
      super.offsetFromOrigin = value;
    }
    get localOffsetFromOrigin() {
      return this[localOffsetFromOrigin$];
    }
    set localOffsetFromOrigin(value) {
      super.localOffsetFromOrigin = value;
    }
  };
  (src__gestures__long_press.LongPressMoveUpdateDetails.new = function(opts) {
    let t16, t16$;
    let globalPosition = opts && 'globalPosition' in opts ? opts.globalPosition : ui$.Offset.zero;
    let localPosition = opts && 'localPosition' in opts ? opts.localPosition : null;
    let offsetFromOrigin = opts && 'offsetFromOrigin' in opts ? opts.offsetFromOrigin : ui$.Offset.zero;
    let localOffsetFromOrigin = opts && 'localOffsetFromOrigin' in opts ? opts.localOffsetFromOrigin : null;
    this[globalPosition$6] = globalPosition;
    this[offsetFromOrigin$] = offsetFromOrigin;
    if (!(globalPosition != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/long_press.dart", 85, 15, "globalPosition != null");
    if (!(offsetFromOrigin != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/long_press.dart", 86, 15, "offsetFromOrigin != null");
    this[localPosition$7] = (t16 = localPosition, t16 == null ? globalPosition : t16);
    this[localOffsetFromOrigin$] = (t16$ = localOffsetFromOrigin, t16$ == null ? offsetFromOrigin : t16$);
    ;
  }).prototype = src__gestures__long_press.LongPressMoveUpdateDetails.prototype;
  dart.addTypeTests(src__gestures__long_press.LongPressMoveUpdateDetails);
  const globalPosition$6 = Symbol("LongPressMoveUpdateDetails.globalPosition");
  const localPosition$7 = Symbol("LongPressMoveUpdateDetails.localPosition");
  const offsetFromOrigin$ = Symbol("LongPressMoveUpdateDetails.offsetFromOrigin");
  const localOffsetFromOrigin$ = Symbol("LongPressMoveUpdateDetails.localOffsetFromOrigin");
  dart.setLibraryUri(src__gestures__long_press.LongPressMoveUpdateDetails, "package:flutter_web/src/gestures/long_press.dart");
  dart.setFieldSignature(src__gestures__long_press.LongPressMoveUpdateDetails, () => ({
    __proto__: dart.getFields(src__gestures__long_press.LongPressMoveUpdateDetails.__proto__),
    globalPosition: dart.finalFieldType(ui$.Offset),
    localPosition: dart.finalFieldType(ui$.Offset),
    offsetFromOrigin: dart.finalFieldType(ui$.Offset),
    localOffsetFromOrigin: dart.finalFieldType(ui$.Offset)
  }));
  src__gestures__long_press.LongPressEndDetails = class LongPressEndDetails extends core.Object {
    get globalPosition() {
      return this[globalPosition$7];
    }
    set globalPosition(value) {
      super.globalPosition = value;
    }
    get localPosition() {
      return this[localPosition$8];
    }
    set localPosition(value) {
      super.localPosition = value;
    }
    get velocity() {
      return this[velocity$2];
    }
    set velocity(value) {
      super.velocity = value;
    }
  };
  (src__gestures__long_press.LongPressEndDetails.new = function(opts) {
    let t16;
    let globalPosition = opts && 'globalPosition' in opts ? opts.globalPosition : ui$.Offset.zero;
    let localPosition = opts && 'localPosition' in opts ? opts.localPosition : null;
    let velocity = opts && 'velocity' in opts ? opts.velocity : src__gestures__velocity_tracker.Velocity.zero;
    this[globalPosition$7] = globalPosition;
    this[velocity$2] = velocity;
    if (!(globalPosition != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/long_press.dart", 122, 15, "globalPosition != null");
    this[localPosition$8] = (t16 = localPosition, t16 == null ? globalPosition : t16);
    ;
  }).prototype = src__gestures__long_press.LongPressEndDetails.prototype;
  dart.addTypeTests(src__gestures__long_press.LongPressEndDetails);
  const globalPosition$7 = Symbol("LongPressEndDetails.globalPosition");
  const localPosition$8 = Symbol("LongPressEndDetails.localPosition");
  const velocity$2 = Symbol("LongPressEndDetails.velocity");
  dart.setLibraryUri(src__gestures__long_press.LongPressEndDetails, "package:flutter_web/src/gestures/long_press.dart");
  dart.setFieldSignature(src__gestures__long_press.LongPressEndDetails, () => ({
    __proto__: dart.getFields(src__gestures__long_press.LongPressEndDetails.__proto__),
    globalPosition: dart.finalFieldType(ui$.Offset),
    localPosition: dart.finalFieldType(ui$.Offset),
    velocity: dart.finalFieldType(src__gestures__velocity_tracker.Velocity)
  }));
  const _longPressAccepted = dart.privateName(src__gestures__long_press, "_longPressAccepted");
  const _longPressOrigin = dart.privateName(src__gestures__long_press, "_longPressOrigin");
  const _initialButtons$ = dart.privateName(src__gestures__long_press, "_initialButtons");
  const _velocityTracker$ = dart.privateName(src__gestures__long_press, "_velocityTracker");
  const _checkLongPressStart = dart.privateName(src__gestures__long_press, "_checkLongPressStart");
  const _checkLongPressEnd = dart.privateName(src__gestures__long_press, "_checkLongPressEnd");
  const _reset$ = dart.privateName(src__gestures__long_press, "_reset");
  const _checkLongPressMoveUpdate = dart.privateName(src__gestures__long_press, "_checkLongPressMoveUpdate");
  src__gestures__long_press.LongPressGestureRecognizer = class LongPressGestureRecognizer extends src__gestures__recognizer.PrimaryPointerGestureRecognizer {
    get onLongPress() {
      return this[onLongPress];
    }
    set onLongPress(value) {
      this[onLongPress] = value;
    }
    get onLongPressStart() {
      return this[onLongPressStart];
    }
    set onLongPressStart(value) {
      this[onLongPressStart] = value;
    }
    get onLongPressMoveUpdate() {
      return this[onLongPressMoveUpdate];
    }
    set onLongPressMoveUpdate(value) {
      this[onLongPressMoveUpdate] = value;
    }
    get onLongPressUp() {
      return this[onLongPressUp];
    }
    set onLongPressUp(value) {
      this[onLongPressUp] = value;
    }
    get onLongPressEnd() {
      return this[onLongPressEnd];
    }
    set onLongPressEnd(value) {
      this[onLongPressEnd] = value;
    }
    isPointerAllowed(event) {
      switch (event.buttons) {
        case src__gestures__events.kPrimaryButton:
        {
          if (this.onLongPressStart == null && this.onLongPress == null && this.onLongPressMoveUpdate == null && this.onLongPressEnd == null && this.onLongPressUp == null) return false;
          break;
        }
        default:
        {
          return false;
        }
      }
      return super.isPointerAllowed(event);
    }
    didExceedDeadline() {
      this.resolve(src__gestures__arena.GestureDisposition.accepted);
      this[_longPressAccepted] = true;
      super.acceptGesture(this.primaryPointer);
      this[_checkLongPressStart]();
    }
    handlePrimaryPointer(event) {
      if (!dart.test(event.synthesized)) {
        if (src__gestures__events.PointerDownEvent.is(event)) {
          this[_velocityTracker$] = new src__gestures__velocity_tracker.VelocityTracker.new();
          this[_velocityTracker$].addPosition(event.timeStamp, event.localPosition);
        }
        if (src__gestures__events.PointerMoveEvent.is(event)) {
          if (!(this[_velocityTracker$] != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/long_press.dart", 261, 16, "_velocityTracker != null");
          this[_velocityTracker$].addPosition(event.timeStamp, event.localPosition);
        }
      }
      if (src__gestures__events.PointerUpEvent.is(event)) {
        if (dart.equals(this[_longPressAccepted], true)) {
          this[_checkLongPressEnd](event);
        } else {
          this.resolve(src__gestures__arena.GestureDisposition.rejected);
        }
        this[_reset$]();
      } else if (src__gestures__events.PointerCancelEvent.is(event)) {
        this[_reset$]();
      } else if (src__gestures__events.PointerDownEvent.is(event)) {
        this[_longPressOrigin] = src__gestures__recognizer.OffsetPair.fromEventPosition(event);
        this[_initialButtons$] = event.buttons;
      } else if (src__gestures__events.PointerMoveEvent.is(event)) {
        if (event.buttons != this[_initialButtons$]) {
          this.resolve(src__gestures__arena.GestureDisposition.rejected);
          this.stopTrackingPointer(this.primaryPointer);
        } else if (dart.test(this[_longPressAccepted])) {
          this[_checkLongPressMoveUpdate](event);
        }
      }
    }
    [_checkLongPressStart]() {
      if (!(this[_initialButtons$] == src__gestures__events.kPrimaryButton)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/long_press.dart", 291, 12, "_initialButtons == kPrimaryButton");
      if (this.onLongPressStart != null) {
        let details = new src__gestures__long_press.LongPressStartDetails.new({globalPosition: this[_longPressOrigin].global, localPosition: this[_longPressOrigin].local});
        this.invokeCallback(dart.void, "onLongPressStart", dart.fn(() => this.onLongPressStart(details), VoidTovoid()));
      }
      if (this.onLongPress != null) this.invokeCallback(dart.void, "onLongPress", this.onLongPress);
    }
    [_checkLongPressMoveUpdate](event) {
      if (!(this[_initialButtons$] == src__gestures__events.kPrimaryButton)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/long_press.dart", 305, 12, "_initialButtons == kPrimaryButton");
      let details = new src__gestures__long_press.LongPressMoveUpdateDetails.new({globalPosition: event.position, localPosition: event.localPosition, offsetFromOrigin: event.position['-'](this[_longPressOrigin].global), localOffsetFromOrigin: event.localPosition['-'](this[_longPressOrigin].local)});
      if (this.onLongPressMoveUpdate != null) this.invokeCallback(dart.void, "onLongPressMoveUpdate", dart.fn(() => this.onLongPressMoveUpdate(details), VoidTovoid()));
    }
    [_checkLongPressEnd](event) {
      if (!(this[_initialButtons$] == src__gestures__events.kPrimaryButton)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/long_press.dart", 318, 12, "_initialButtons == kPrimaryButton");
      let estimate = this[_velocityTracker$].getVelocityEstimate();
      let velocity = estimate == null ? src__gestures__velocity_tracker.Velocity.zero : new src__gestures__velocity_tracker.Velocity.new({pixelsPerSecond: estimate.pixelsPerSecond});
      let details = new src__gestures__long_press.LongPressEndDetails.new({globalPosition: event.position, localPosition: event.localPosition, velocity: velocity});
      this[_velocityTracker$] = null;
      if (this.onLongPressEnd != null) this.invokeCallback(dart.void, "onLongPressEnd", dart.fn(() => this.onLongPressEnd(details), VoidTovoid()));
      if (this.onLongPressUp != null) this.invokeCallback(dart.void, "onLongPressUp", this.onLongPressUp);
    }
    [_reset$]() {
      this[_longPressAccepted] = false;
      this[_longPressOrigin] = null;
      this[_initialButtons$] = null;
      this[_velocityTracker$] = null;
    }
    resolve(disposition) {
      if (dart.test(this[_longPressAccepted]) && dart.equals(disposition, src__gestures__arena.GestureDisposition.rejected)) {
        this[_reset$]();
      }
      super.resolve(disposition);
    }
    acceptGesture(pointer) {
    }
    get debugDescription() {
      return "long press";
    }
  };
  (src__gestures__long_press.LongPressGestureRecognizer.new = function(opts) {
    let postAcceptSlopTolerance = opts && 'postAcceptSlopTolerance' in opts ? opts.postAcceptSlopTolerance : null;
    let kind = opts && 'kind' in opts ? opts.kind : null;
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    this[_longPressAccepted] = false;
    this[_longPressOrigin] = null;
    this[_initialButtons$] = null;
    this[onLongPress] = null;
    this[onLongPressStart] = null;
    this[onLongPressMoveUpdate] = null;
    this[onLongPressUp] = null;
    this[onLongPressEnd] = null;
    this[_velocityTracker$] = null;
    src__gestures__long_press.LongPressGestureRecognizer.__proto__.new.call(this, {deadline: src__gestures__constants.kLongPressTimeout, postAcceptSlopTolerance: postAcceptSlopTolerance, kind: kind, debugOwner: debugOwner});
    ;
  }).prototype = src__gestures__long_press.LongPressGestureRecognizer.prototype;
  dart.addTypeTests(src__gestures__long_press.LongPressGestureRecognizer);
  const onLongPress = Symbol("LongPressGestureRecognizer.onLongPress");
  const onLongPressStart = Symbol("LongPressGestureRecognizer.onLongPressStart");
  const onLongPressMoveUpdate = Symbol("LongPressGestureRecognizer.onLongPressMoveUpdate");
  const onLongPressUp = Symbol("LongPressGestureRecognizer.onLongPressUp");
  const onLongPressEnd = Symbol("LongPressGestureRecognizer.onLongPressEnd");
  dart.setMethodSignature(src__gestures__long_press.LongPressGestureRecognizer, () => ({
    __proto__: dart.getMethods(src__gestures__long_press.LongPressGestureRecognizer.__proto__),
    handlePrimaryPointer: dart.fnType(dart.void, [src__gestures__events.PointerEvent]),
    [_checkLongPressStart]: dart.fnType(dart.void, []),
    [_checkLongPressMoveUpdate]: dart.fnType(dart.void, [src__gestures__events.PointerEvent]),
    [_checkLongPressEnd]: dart.fnType(dart.void, [src__gestures__events.PointerEvent]),
    [_reset$]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(src__gestures__long_press.LongPressGestureRecognizer, () => ({
    __proto__: dart.getGetters(src__gestures__long_press.LongPressGestureRecognizer.__proto__),
    debugDescription: core.String
  }));
  dart.setLibraryUri(src__gestures__long_press.LongPressGestureRecognizer, "package:flutter_web/src/gestures/long_press.dart");
  dart.setFieldSignature(src__gestures__long_press.LongPressGestureRecognizer, () => ({
    __proto__: dart.getFields(src__gestures__long_press.LongPressGestureRecognizer.__proto__),
    [_longPressAccepted]: dart.fieldType(core.bool),
    [_longPressOrigin]: dart.fieldType(src__gestures__recognizer.OffsetPair),
    [_initialButtons$]: dart.fieldType(core.int),
    onLongPress: dart.fieldType(dart.fnType(dart.void, [])),
    onLongPressStart: dart.fieldType(dart.fnType(dart.void, [src__gestures__long_press.LongPressStartDetails])),
    onLongPressMoveUpdate: dart.fieldType(dart.fnType(dart.void, [src__gestures__long_press.LongPressMoveUpdateDetails])),
    onLongPressUp: dart.fieldType(dart.fnType(dart.void, [])),
    onLongPressEnd: dart.fieldType(dart.fnType(dart.void, [src__gestures__long_press.LongPressEndDetails])),
    [_velocityTracker$]: dart.fieldType(src__gestures__velocity_tracker.VelocityTracker)
  }));
  const _fontFamilyFallback = dart.privateName(src__painting__strut_style, "_fontFamilyFallback");
  const _package = dart.privateName(src__painting__strut_style, "_package");
  src__painting__strut_style.StrutStyle = class StrutStyle extends src__foundation__diagnostics.Diagnosticable {
    get fontFamily() {
      return this[fontFamily$0];
    }
    set fontFamily(value) {
      super.fontFamily = value;
    }
    get fontSize() {
      return this[fontSize$];
    }
    set fontSize(value) {
      super.fontSize = value;
    }
    get height() {
      return this[height$];
    }
    set height(value) {
      super.height = value;
    }
    get fontWeight() {
      return this[fontWeight$];
    }
    set fontWeight(value) {
      super.fontWeight = value;
    }
    get fontStyle() {
      return this[fontStyle$];
    }
    set fontStyle(value) {
      super.fontStyle = value;
    }
    get leading() {
      return this[leading$];
    }
    set leading(value) {
      super.leading = value;
    }
    get forceStrutHeight() {
      return this[forceStrutHeight$];
    }
    set forceStrutHeight(value) {
      super.forceStrutHeight = value;
    }
    get debugLabel() {
      return this[debugLabel$];
    }
    set debugLabel(value) {
      super.debugLabel = value;
    }
    get fontFamilyFallback() {
      if (this[_package] != null && this[_fontFamilyFallback] != null) return this[_fontFamilyFallback][$map](core.String, dart.fn(family => "packages/" + dart.str(this[_package]) + "/" + dart.str(family), StringToString()))[$toList]();
      return this[_fontFamilyFallback];
    }
    compareTo(other) {
      if (this === other) return src__painting__basic_types.RenderComparison.identical;
      if (this.fontFamily != other.fontFamily || this.fontSize != other.fontSize || !dart.equals(this.fontWeight, other.fontWeight) || !dart.equals(this.fontStyle, other.fontStyle) || this.height != other.height || this.leading != other.leading || !dart.equals(this.forceStrutHeight, other.forceStrutHeight) || !dart.test(src__foundation__collections.listEquals(core.String, this.fontFamilyFallback, other.fontFamilyFallback))) return src__painting__basic_types.RenderComparison.layout;
      return src__painting__basic_types.RenderComparison.identical;
    }
    inheritFromTextStyle(other) {
      let t16, t16$, t16$0, t16$1, t16$2, t16$3, t16$4;
      if (other == null) return this;
      return new src__painting__strut_style.StrutStyle.new({fontFamily: (t16 = this.fontFamily, t16 == null ? other.fontFamily : t16), fontFamilyFallback: (t16$ = this.fontFamilyFallback, t16$ == null ? other.fontFamilyFallback : t16$), fontSize: (t16$0 = this.fontSize, t16$0 == null ? other.fontSize : t16$0), height: (t16$1 = this.height, t16$1 == null ? other.height : t16$1), leading: this.leading, fontWeight: (t16$2 = this.fontWeight, t16$2 == null ? other.fontWeight : t16$2), fontStyle: (t16$3 = this.fontStyle, t16$3 == null ? other.fontStyle : t16$3), forceStrutHeight: this.forceStrutHeight, debugLabel: (t16$4 = this.debugLabel, t16$4 == null ? other.debugLabel : t16$4)});
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!dart.equals(dart.runtimeType(other), this[$runtimeType])) return false;
      let typedOther = src__painting__strut_style.StrutStyle._check(other);
      return this.fontFamily == typedOther.fontFamily && this.fontSize == typedOther.fontSize && dart.equals(this.fontWeight, typedOther.fontWeight) && dart.equals(this.fontStyle, typedOther.fontStyle) && this.height == typedOther.height && this.leading == typedOther.leading && dart.equals(this.forceStrutHeight, typedOther.forceStrutHeight);
    }
    get hashCode() {
      return ui$.hashValues(this.fontFamily, this.fontSize, this.fontWeight, this.fontStyle, this.height, this.leading, this.forceStrutHeight);
    }
    toStringShort() {
      return dart.str(this[$runtimeType]);
    }
    debugFillProperties(properties, opts) {
      let prefix = opts && 'prefix' in opts ? opts.prefix : "";
      super.debugFillProperties(properties);
      if (this.debugLabel != null) properties.add(new src__foundation__diagnostics.MessageProperty.new(dart.str(prefix) + "debugLabel", this.debugLabel));
      let styles = JSArrayOfDiagnosticsNode().of([]);
      styles[$add](new src__foundation__diagnostics.StringProperty.new(dart.str(prefix) + "family", this.fontFamily, {defaultValue: null, quoted: false}));
      styles[$add](new (IterablePropertyOfString()).new(dart.str(prefix) + "familyFallback", this.fontFamilyFallback, {defaultValue: null}));
      styles[$add](new src__foundation__diagnostics.DoubleProperty.new(dart.str(prefix) + "size", this.fontSize, {defaultValue: null}));
      let weightDescription = null;
      if (this.fontWeight != null) {
        weightDescription = "w" + dart.str(dart.notNull(this.fontWeight.index) + 1) + "00";
      }
      styles[$add](new (DiagnosticsPropertyOfFontWeight()).new(dart.str(prefix) + "weight", this.fontWeight, {description: weightDescription, defaultValue: null}));
      styles[$add](new (EnumPropertyOfFontStyle()).new(dart.str(prefix) + "style", this.fontStyle, {defaultValue: null}));
      styles[$add](new src__foundation__diagnostics.DoubleProperty.new(dart.str(prefix) + "height", this.height, {unit: "x", defaultValue: null}));
      styles[$add](new src__foundation__diagnostics.FlagProperty.new(dart.str(prefix) + "forceStrutHeight", {value: this.forceStrutHeight, defaultValue: null}));
      let styleSpecified = styles[$any](dart.fn(n => !dart.test(n.isFiltered(src__foundation__diagnostics.DiagnosticLevel.info)), DiagnosticsNodeTobool()));
      styles[$forEach](dart.bind(properties, 'add'));
      if (!dart.test(styleSpecified)) properties.add(new src__foundation__diagnostics.FlagProperty.new("forceStrutHeight", {value: this.forceStrutHeight, ifTrue: dart.str(prefix) + "<strut height forced>", ifFalse: dart.str(prefix) + "<strut height normal>"}));
    }
  };
  (src__painting__strut_style.StrutStyle.new = function(opts) {
    let fontFamily = opts && 'fontFamily' in opts ? opts.fontFamily : null;
    let fontFamilyFallback = opts && 'fontFamilyFallback' in opts ? opts.fontFamilyFallback : null;
    let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
    let height = opts && 'height' in opts ? opts.height : null;
    let leading = opts && 'leading' in opts ? opts.leading : null;
    let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
    let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
    let forceStrutHeight = opts && 'forceStrutHeight' in opts ? opts.forceStrutHeight : null;
    let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;
    let package$ = opts && 'package' in opts ? opts.package : null;
    this[fontSize$] = fontSize;
    this[height$] = height;
    this[leading$] = leading;
    this[fontWeight$] = fontWeight;
    this[fontStyle$] = fontStyle;
    this[forceStrutHeight$] = forceStrutHeight;
    this[debugLabel$] = debugLabel;
    this[fontFamily$0] = package$ == null ? fontFamily : "packages/" + dart.str(package$) + "/" + dart.str(fontFamily);
    this[_fontFamilyFallback] = fontFamilyFallback;
    this[_package] = package$;
    if (!(fontSize == null || dart.notNull(fontSize) > 0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/strut_style.dart", 290, 15, "t(fontSize == null || fontSize >");
    if (!(leading == null || dart.notNull(leading) >= 0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/strut_style.dart", 291, 15, "t(leading == null || leading >=");
    if (!(package$ == null || package$ != null && (fontFamily != null || fontFamilyFallback != null))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/strut_style.dart", 292, 15, "t(package == null || (package != null && (fontFamily != null || fontFamilyFallback != null");
    src__painting__strut_style.StrutStyle.__proto__.new.call(this);
    ;
  }).prototype = src__painting__strut_style.StrutStyle.prototype;
  (src__painting__strut_style.StrutStyle.fromTextStyle = function(textStyle, opts) {
    let t16, t16$, t16$0, t16$1, t16$2, t16$3;
    let fontFamily = opts && 'fontFamily' in opts ? opts.fontFamily : null;
    let fontFamilyFallback = opts && 'fontFamilyFallback' in opts ? opts.fontFamilyFallback : null;
    let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
    let height = opts && 'height' in opts ? opts.height : null;
    let leading = opts && 'leading' in opts ? opts.leading : null;
    let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
    let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
    let forceStrutHeight = opts && 'forceStrutHeight' in opts ? opts.forceStrutHeight : null;
    let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;
    let package$ = opts && 'package' in opts ? opts.package : null;
    this[leading$] = leading;
    this[forceStrutHeight$] = forceStrutHeight;
    if (!(textStyle != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/strut_style.dart", 322, 15, "t(textStyle != nu");
    if (!(fontSize == null || dart.notNull(fontSize) > 0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/strut_style.dart", 323, 15, "t(fontSize == null || fontSize >");
    if (!(leading == null || dart.notNull(leading) >= 0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/strut_style.dart", 324, 15, "t(leading == null || leading >=");
    if (!(package$ == null || package$ != null && (fontFamily != null || fontFamilyFallback != null))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/strut_style.dart", 325, 15, "t(package == null || (package != null && (fontFamily != null || fontFamilyFallback != null");
    this[fontFamily$0] = fontFamily != null ? package$ == null ? fontFamily : "packages/" + dart.str(package$) + "/" + dart.str(fontFamily) : textStyle.fontFamily;
    this[_fontFamilyFallback] = (t16 = fontFamilyFallback, t16 == null ? textStyle.fontFamilyFallback : t16);
    this[height$] = (t16$ = height, t16$ == null ? textStyle.height : t16$);
    this[fontSize$] = (t16$0 = fontSize, t16$0 == null ? textStyle.fontSize : t16$0);
    this[fontWeight$] = (t16$1 = fontWeight, t16$1 == null ? textStyle.fontWeight : t16$1);
    this[fontStyle$] = (t16$2 = fontStyle, t16$2 == null ? textStyle.fontStyle : t16$2);
    this[debugLabel$] = (t16$3 = debugLabel, t16$3 == null ? textStyle.debugLabel : t16$3);
    this[_package] = package$;
    src__painting__strut_style.StrutStyle.__proto__.new.call(this);
    ;
  }).prototype = src__painting__strut_style.StrutStyle.prototype;
  dart.addTypeTests(src__painting__strut_style.StrutStyle);
  const fontFamily$0 = Symbol("StrutStyle.fontFamily");
  const fontSize$ = Symbol("StrutStyle.fontSize");
  const height$ = Symbol("StrutStyle.height");
  const fontWeight$ = Symbol("StrutStyle.fontWeight");
  const fontStyle$ = Symbol("StrutStyle.fontStyle");
  const leading$ = Symbol("StrutStyle.leading");
  const forceStrutHeight$ = Symbol("StrutStyle.forceStrutHeight");
  const debugLabel$ = Symbol("StrutStyle.debugLabel");
  dart.setMethodSignature(src__painting__strut_style.StrutStyle, () => ({
    __proto__: dart.getMethods(src__painting__strut_style.StrutStyle.__proto__),
    compareTo: dart.fnType(src__painting__basic_types.RenderComparison, [src__painting__strut_style.StrutStyle]),
    inheritFromTextStyle: dart.fnType(src__painting__strut_style.StrutStyle, [src__painting__text_style.TextStyle]),
    debugFillProperties: dart.fnType(dart.void, [src__foundation__diagnostics.DiagnosticPropertiesBuilder], {prefix: core.String})
  }));
  dart.setGetterSignature(src__painting__strut_style.StrutStyle, () => ({
    __proto__: dart.getGetters(src__painting__strut_style.StrutStyle.__proto__),
    fontFamilyFallback: core.List$(core.String)
  }));
  dart.setLibraryUri(src__painting__strut_style.StrutStyle, "package:flutter_web/src/painting/strut_style.dart");
  dart.setFieldSignature(src__painting__strut_style.StrutStyle, () => ({
    __proto__: dart.getFields(src__painting__strut_style.StrutStyle.__proto__),
    fontFamily: dart.finalFieldType(core.String),
    [_fontFamilyFallback]: dart.finalFieldType(core.List$(core.String)),
    [_package]: dart.finalFieldType(core.String),
    fontSize: dart.finalFieldType(core.double),
    height: dart.finalFieldType(core.double),
    fontWeight: dart.finalFieldType(ui$.FontWeight),
    fontStyle: dart.finalFieldType(ui$.FontStyle),
    leading: dart.finalFieldType(core.double),
    forceStrutHeight: dart.finalFieldType(core.bool),
    debugLabel: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(src__painting__strut_style.StrutStyle, ['_equals']);
  dart.defineExtensionAccessors(src__painting__strut_style.StrutStyle, ['hashCode']);
  dart.defineLazy(src__painting__strut_style.StrutStyle, {
    /*src__painting__strut_style.StrutStyle.disabled*/get disabled() {
      return dart.const(new src__painting__strut_style.StrutStyle.new({height: 0.0, leading: 0.0}));
    }
  });
  const _fontFamilyFallback$ = dart.privateName(src__painting__text_style, "_fontFamilyFallback");
  const _package$ = dart.privateName(src__painting__text_style, "_package");
  src__painting__text_style.TextStyle = class TextStyle extends src__foundation__diagnostics.Diagnosticable {
    get inherit() {
      return this[inherit$];
    }
    set inherit(value) {
      super.inherit = value;
    }
    get color() {
      return this[color$];
    }
    set color(value) {
      super.color = value;
    }
    get backgroundColor() {
      return this[backgroundColor$];
    }
    set backgroundColor(value) {
      super.backgroundColor = value;
    }
    get fontFamily() {
      return this[fontFamily$1];
    }
    set fontFamily(value) {
      super.fontFamily = value;
    }
    get fontSize() {
      return this[fontSize$0];
    }
    set fontSize(value) {
      super.fontSize = value;
    }
    get fontWeight() {
      return this[fontWeight$0];
    }
    set fontWeight(value) {
      super.fontWeight = value;
    }
    get fontStyle() {
      return this[fontStyle$0];
    }
    set fontStyle(value) {
      super.fontStyle = value;
    }
    get letterSpacing() {
      return this[letterSpacing$];
    }
    set letterSpacing(value) {
      super.letterSpacing = value;
    }
    get wordSpacing() {
      return this[wordSpacing$];
    }
    set wordSpacing(value) {
      super.wordSpacing = value;
    }
    get textBaseline() {
      return this[textBaseline$];
    }
    set textBaseline(value) {
      super.textBaseline = value;
    }
    get height() {
      return this[height$0];
    }
    set height(value) {
      super.height = value;
    }
    get locale() {
      return this[locale$];
    }
    set locale(value) {
      super.locale = value;
    }
    get foreground() {
      return this[foreground$];
    }
    set foreground(value) {
      super.foreground = value;
    }
    get background() {
      return this[background$];
    }
    set background(value) {
      super.background = value;
    }
    get decoration() {
      return this[decoration$];
    }
    set decoration(value) {
      super.decoration = value;
    }
    get decorationColor() {
      return this[decorationColor$];
    }
    set decorationColor(value) {
      super.decorationColor = value;
    }
    get decorationStyle() {
      return this[decorationStyle$];
    }
    set decorationStyle(value) {
      super.decorationStyle = value;
    }
    get decorationThickness() {
      return this[decorationThickness$];
    }
    set decorationThickness(value) {
      super.decorationThickness = value;
    }
    get debugLabel() {
      return this[debugLabel$0];
    }
    set debugLabel(value) {
      super.debugLabel = value;
    }
    get shadows() {
      return this[shadows$];
    }
    set shadows(value) {
      super.shadows = value;
    }
    get fontFamilyFallback() {
      return this[_package$] != null && this[_fontFamilyFallback$] != null ? this[_fontFamilyFallback$][$map](core.String, dart.fn(str => "packages/" + dart.str(this[_package$]) + "/" + dart.str(str), StringToString()))[$toList]() : this[_fontFamilyFallback$];
    }
    copyWith(opts) {
      let t16, t16$, t16$0, t16$1, t16$2, t16$3, t16$4, t16$5, t16$6, t16$7, t16$8, t16$9, t16$10, t16$11, t16$12, t16$13, t16$14, t16$15, t16$16, t16$17;
      let inherit = opts && 'inherit' in opts ? opts.inherit : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let fontFamily = opts && 'fontFamily' in opts ? opts.fontFamily : null;
      let fontFamilyFallback = opts && 'fontFamilyFallback' in opts ? opts.fontFamilyFallback : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
      let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
      let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let foreground = opts && 'foreground' in opts ? opts.foreground : null;
      let background = opts && 'background' in opts ? opts.background : null;
      let shadows = opts && 'shadows' in opts ? opts.shadows : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
      let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;
      if (!(color == null || foreground == null)) dart.assertFailed(src__painting__text_style._kColorForegroundWarning, "org-dartlang-app:///packages/flutter_web/src/painting/text_style.dart", 598, 12, "color == null || foreground == null");
      if (!(backgroundColor == null || background == null)) dart.assertFailed(src__painting__text_style._kColorBackgroundWarning, "org-dartlang-app:///packages/flutter_web/src/painting/text_style.dart", 599, 12, "backgroundColor == null || background == null");
      let newDebugLabel = null;
      if (!dart.test(dart.fn(() => {
        let t16;
        if (this.debugLabel != null) newDebugLabel = (t16 = debugLabel, t16 == null ? "(" + dart.str(this.debugLabel) + ").copyWith" : t16);
        return true;
      }, VoidTobool())())) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/text_style.dart", 601, 12, "() {\n      if (this.debugLabel != null)\n        newDebugLabel = debugLabel ?? '(${this.debugLabel}).copyWith';\n      return true;\n    }()");
      return new src__painting__text_style.TextStyle.new({inherit: (t16 = inherit, t16 == null ? this.inherit : t16), color: this.foreground == null && foreground == null ? (t16$ = color, t16$ == null ? this.color : t16$) : null, backgroundColor: this.background == null && background == null ? (t16$0 = backgroundColor, t16$0 == null ? this.backgroundColor : t16$0) : null, fontFamily: (t16$1 = fontFamily, t16$1 == null ? this.fontFamily : t16$1), fontFamilyFallback: (t16$2 = fontFamilyFallback, t16$2 == null ? this.fontFamilyFallback : t16$2), fontSize: (t16$3 = fontSize, t16$3 == null ? this.fontSize : t16$3), fontWeight: (t16$4 = fontWeight, t16$4 == null ? this.fontWeight : t16$4), fontStyle: (t16$5 = fontStyle, t16$5 == null ? this.fontStyle : t16$5), letterSpacing: (t16$6 = letterSpacing, t16$6 == null ? this.letterSpacing : t16$6), wordSpacing: (t16$7 = wordSpacing, t16$7 == null ? this.wordSpacing : t16$7), textBaseline: (t16$8 = textBaseline, t16$8 == null ? this.textBaseline : t16$8), height: (t16$9 = height, t16$9 == null ? this.height : t16$9), locale: (t16$10 = locale, t16$10 == null ? this.locale : t16$10), foreground: (t16$11 = foreground, t16$11 == null ? this.foreground : t16$11), background: (t16$12 = background, t16$12 == null ? this.background : t16$12), shadows: (t16$13 = shadows, t16$13 == null ? this.shadows : t16$13), decoration: (t16$14 = decoration, t16$14 == null ? this.decoration : t16$14), decorationColor: (t16$15 = decorationColor, t16$15 == null ? this.decorationColor : t16$15), decorationStyle: (t16$16 = decorationStyle, t16$16 == null ? this.decorationStyle : t16$16), decorationThickness: (t16$17 = decorationThickness, t16$17 == null ? this.decorationThickness : t16$17), debugLabel: newDebugLabel});
    }
    apply(opts) {
      let t16, t16$, t16$0, t16$1, t16$2, t16$3, t16$4;
      let color = opts && 'color' in opts ? opts.color : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let decoration = opts && 'decoration' in opts ? opts.decoration : null;
      let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
      let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
      let decorationThicknessFactor = opts && 'decorationThicknessFactor' in opts ? opts.decorationThicknessFactor : 1.0;
      let decorationThicknessDelta = opts && 'decorationThicknessDelta' in opts ? opts.decorationThicknessDelta : 0.0;
      let fontFamily = opts && 'fontFamily' in opts ? opts.fontFamily : null;
      let fontFamilyFallback = opts && 'fontFamilyFallback' in opts ? opts.fontFamilyFallback : null;
      let fontSizeFactor = opts && 'fontSizeFactor' in opts ? opts.fontSizeFactor : 1.0;
      let fontSizeDelta = opts && 'fontSizeDelta' in opts ? opts.fontSizeDelta : 0.0;
      let fontWeightDelta = opts && 'fontWeightDelta' in opts ? opts.fontWeightDelta : 0;
      let letterSpacingFactor = opts && 'letterSpacingFactor' in opts ? opts.letterSpacingFactor : 1.0;
      let letterSpacingDelta = opts && 'letterSpacingDelta' in opts ? opts.letterSpacingDelta : 0.0;
      let wordSpacingFactor = opts && 'wordSpacingFactor' in opts ? opts.wordSpacingFactor : 1.0;
      let wordSpacingDelta = opts && 'wordSpacingDelta' in opts ? opts.wordSpacingDelta : 0.0;
      let heightFactor = opts && 'heightFactor' in opts ? opts.heightFactor : 1.0;
      let heightDelta = opts && 'heightDelta' in opts ? opts.heightDelta : 0.0;
      if (!(fontSizeFactor != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/text_style.dart", 680, 12, "fontSizeFactor != null");
      if (!(fontSizeDelta != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/text_style.dart", 681, 12, "fontSizeDelta != null");
      if (!(this.fontSize != null || fontSizeFactor === 1.0 && fontSizeDelta === 0.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/text_style.dart", 682, 12, "fontSize != null || (fontSizeFactor == 1.0 && fontSizeDelta == 0.0)");
      if (!(fontWeightDelta != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/text_style.dart", 683, 12, "fontWeightDelta != null");
      if (!(this.fontWeight != null || fontWeightDelta === 0.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/text_style.dart", 684, 12, "fontWeight != null || fontWeightDelta == 0.0");
      if (!(letterSpacingFactor != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/text_style.dart", 685, 12, "letterSpacingFactor != null");
      if (!(letterSpacingDelta != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/text_style.dart", 686, 12, "letterSpacingDelta != null");
      if (!(this.letterSpacing != null || letterSpacingFactor === 1.0 && letterSpacingDelta === 0.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/text_style.dart", 687, 12, "letterSpacing != null || (letterSpacingFactor == 1.0 && letterSpacingDelta == 0.0)");
      if (!(wordSpacingFactor != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/text_style.dart", 688, 12, "wordSpacingFactor != null");
      if (!(wordSpacingDelta != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/text_style.dart", 689, 12, "wordSpacingDelta != null");
      if (!(this.wordSpacing != null || wordSpacingFactor === 1.0 && wordSpacingDelta === 0.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/text_style.dart", 690, 12, "wordSpacing != null || (wordSpacingFactor == 1.0 && wordSpacingDelta == 0.0)");
      if (!(heightFactor != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/text_style.dart", 691, 12, "heightFactor != null");
      if (!(heightDelta != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/text_style.dart", 692, 12, "heightDelta != null");
      if (!(heightFactor != null || heightFactor === 1.0 && heightDelta === 0.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/text_style.dart", 693, 12, "heightFactor != null || (heightFactor == 1.0 && heightDelta == 0.0)");
      if (!(decorationThicknessFactor != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/text_style.dart", 694, 12, "decorationThicknessFactor != null");
      if (!(decorationThicknessDelta != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/text_style.dart", 695, 12, "decorationThicknessDelta != null");
      if (!(this.decorationThickness != null || decorationThicknessFactor === 1.0 && decorationThicknessDelta === 0.0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/text_style.dart", 696, 12, "decorationThickness != null || (decorationThicknessFactor == 1.0 && decorationThicknessDelta == 0.0)");
      let modifiedDebugLabel = null;
      if (!dart.test(dart.fn(() => {
        if (this.debugLabel != null) modifiedDebugLabel = "(" + dart.str(this.debugLabel) + ").apply";
        return true;
      }, VoidTobool())())) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/text_style.dart", 699, 12, "() {\n      if (debugLabel != null)\n        modifiedDebugLabel = '($debugLabel).apply';\n      return true;\n    }()");
      return new src__painting__text_style.TextStyle.new({inherit: this.inherit, color: this.foreground == null ? (t16 = color, t16 == null ? this.color : t16) : null, backgroundColor: this.background == null ? (t16$ = backgroundColor, t16$ == null ? this.backgroundColor : t16$) : null, fontFamily: (t16$0 = fontFamily, t16$0 == null ? this.fontFamily : t16$0), fontFamilyFallback: (t16$1 = fontFamilyFallback, t16$1 == null ? this.fontFamilyFallback : t16$1), fontSize: this.fontSize == null ? null : dart.notNull(this.fontSize) * dart.notNull(fontSizeFactor) + dart.notNull(fontSizeDelta), fontWeight: this.fontWeight == null ? null : ui$.FontWeight.values[$_get](dart.asInt((dart.notNull(this.fontWeight.index) + dart.notNull(fontWeightDelta))[$clamp](0, dart.notNull(ui$.FontWeight.values[$length]) - 1))), fontStyle: this.fontStyle, letterSpacing: this.letterSpacing == null ? null : dart.notNull(this.letterSpacing) * dart.notNull(letterSpacingFactor) + dart.notNull(letterSpacingDelta), wordSpacing: this.wordSpacing == null ? null : dart.notNull(this.wordSpacing) * dart.notNull(wordSpacingFactor) + dart.notNull(wordSpacingDelta), textBaseline: this.textBaseline, height: this.height == null ? null : dart.notNull(this.height) * dart.notNull(heightFactor) + dart.notNull(heightDelta), locale: this.locale, foreground: this.foreground, background: this.background, shadows: this.shadows, decoration: (t16$2 = decoration, t16$2 == null ? this.decoration : t16$2), decorationColor: (t16$3 = decorationColor, t16$3 == null ? this.decorationColor : t16$3), decorationStyle: (t16$4 = decorationStyle, t16$4 == null ? this.decorationStyle : t16$4), decorationThickness: this.decorationThickness == null ? null : dart.notNull(this.decorationThickness) * dart.notNull(decorationThicknessFactor) + dart.notNull(decorationThicknessDelta), debugLabel: modifiedDebugLabel});
    }
    merge(other) {
      if (other == null) return this;
      if (!dart.test(other.inherit)) return other;
      let mergedDebugLabel = null;
      if (!dart.test(dart.fn(() => {
        let t16, t16$;
        if (other.debugLabel != null || this.debugLabel != null) mergedDebugLabel = "(" + dart.str((t16 = this.debugLabel, t16 == null ? src__painting__text_style._kDefaultDebugLabel : t16)) + ").merge(" + dart.str((t16$ = other.debugLabel, t16$ == null ? src__painting__text_style._kDefaultDebugLabel : t16$)) + ")";
        return true;
      }, VoidTobool())())) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/text_style.dart", 758, 12, "() {\n      if (other.debugLabel != null || debugLabel != null)\n        mergedDebugLabel = '(${debugLabel ?? _kDefaultDebugLabel}).merge(${other.debugLabel ?? _kDefaultDebugLabel})';\n      return true;\n    }()");
      return this.copyWith({color: other.color, backgroundColor: other.backgroundColor, fontFamily: other.fontFamily, fontFamilyFallback: other.fontFamilyFallback, fontSize: other.fontSize, fontWeight: other.fontWeight, fontStyle: other.fontStyle, letterSpacing: other.letterSpacing, wordSpacing: other.wordSpacing, textBaseline: other.textBaseline, height: other.height, locale: other.locale, foreground: other.foreground, background: other.background, shadows: other.shadows, decoration: other.decoration, decorationColor: other.decorationColor, decorationStyle: other.decorationStyle, decorationThickness: other.decorationThickness, debugLabel: mergedDebugLabel});
    }
    static lerp(a, b, t) {
      let t16, t16$, t16$0, t16$1, t16$2, t16$3, t16$4, t16$5, t17, t16$6, t17$, t16$7, t17$0, t16$8, t17$1, t16$9, t16$10, t16$11;
      if (!(t != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/text_style.dart", 802, 12, "t != null");
      if (!(a == null || b == null || dart.equals(a.inherit, b.inherit))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/text_style.dart", 803, 12, "a == null || b == null || a.inherit == b.inherit");
      if (a == null && b == null) {
        return null;
      }
      let lerpDebugLabel = null;
      if (!dart.test(dart.fn(() => {
        let t16, t16$, t16$0, t16$1;
        lerpDebugLabel = "lerp(" + dart.str((t16$ = (t16 = a, t16 == null ? null : t16.debugLabel), t16$ == null ? src__painting__text_style._kDefaultDebugLabel : t16$)) + " ⎯" + t[$toStringAsFixed](1) + "→ " + dart.str((t16$1 = (t16$0 = b, t16$0 == null ? null : t16$0.debugLabel), t16$1 == null ? src__painting__text_style._kDefaultDebugLabel : t16$1)) + ")";
        return true;
      }, VoidTobool())())) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/text_style.dart", 809, 12, "() {\n      lerpDebugLabel = 'lerp(${a?.debugLabel ?? _kDefaultDebugLabel} ⎯${t.toStringAsFixed(1)}→ ${b?.debugLabel ?? _kDefaultDebugLabel})';\n      return true;\n   ");
      if (a == null) {
        return new src__painting__text_style.TextStyle.new({inherit: b.inherit, color: ui$.Color.lerp(null, b.color, t), backgroundColor: ui$.Color.lerp(null, b.backgroundColor, t), fontFamily: dart.notNull(t) < 0.5 ? null : b.fontFamily, fontFamilyFallback: dart.notNull(t) < 0.5 ? null : b.fontFamilyFallback, fontSize: dart.notNull(t) < 0.5 ? null : b.fontSize, fontWeight: ui$.FontWeight.lerp(null, b.fontWeight, t), fontStyle: dart.notNull(t) < 0.5 ? null : b.fontStyle, letterSpacing: dart.notNull(t) < 0.5 ? null : b.letterSpacing, wordSpacing: dart.notNull(t) < 0.5 ? null : b.wordSpacing, textBaseline: dart.notNull(t) < 0.5 ? null : b.textBaseline, height: dart.notNull(t) < 0.5 ? null : b.height, locale: dart.notNull(t) < 0.5 ? null : b.locale, foreground: dart.notNull(t) < 0.5 ? null : b.foreground, background: dart.notNull(t) < 0.5 ? null : b.background, decoration: dart.notNull(t) < 0.5 ? null : b.decoration, shadows: dart.notNull(t) < 0.5 ? null : b.shadows, decorationColor: ui$.Color.lerp(null, b.decorationColor, t), decorationStyle: dart.notNull(t) < 0.5 ? null : b.decorationStyle, decorationThickness: dart.notNull(t) < 0.5 ? null : b.decorationThickness, debugLabel: lerpDebugLabel});
      }
      if (b == null) {
        return new src__painting__text_style.TextStyle.new({inherit: a.inherit, color: ui$.Color.lerp(a.color, null, t), backgroundColor: ui$.Color.lerp(null, a.backgroundColor, t), fontFamily: dart.notNull(t) < 0.5 ? a.fontFamily : null, fontFamilyFallback: dart.notNull(t) < 0.5 ? a.fontFamilyFallback : null, fontSize: dart.notNull(t) < 0.5 ? a.fontSize : null, fontWeight: ui$.FontWeight.lerp(a.fontWeight, null, t), fontStyle: dart.notNull(t) < 0.5 ? a.fontStyle : null, letterSpacing: dart.notNull(t) < 0.5 ? a.letterSpacing : null, wordSpacing: dart.notNull(t) < 0.5 ? a.wordSpacing : null, textBaseline: dart.notNull(t) < 0.5 ? a.textBaseline : null, height: dart.notNull(t) < 0.5 ? a.height : null, locale: dart.notNull(t) < 0.5 ? a.locale : null, foreground: dart.notNull(t) < 0.5 ? a.foreground : null, background: dart.notNull(t) < 0.5 ? a.background : null, shadows: dart.notNull(t) < 0.5 ? a.shadows : null, decoration: dart.notNull(t) < 0.5 ? a.decoration : null, decorationColor: ui$.Color.lerp(a.decorationColor, null, t), decorationStyle: dart.notNull(t) < 0.5 ? a.decorationStyle : null, decorationThickness: dart.notNull(t) < 0.5 ? a.decorationThickness : null, debugLabel: lerpDebugLabel});
      }
      return new src__painting__text_style.TextStyle.new({inherit: b.inherit, color: a.foreground == null && b.foreground == null ? ui$.Color.lerp(a.color, b.color, t) : null, backgroundColor: a.background == null && b.background == null ? ui$.Color.lerp(a.backgroundColor, b.backgroundColor, t) : null, fontFamily: dart.notNull(t) < 0.5 ? a.fontFamily : b.fontFamily, fontFamilyFallback: dart.notNull(t) < 0.5 ? a.fontFamilyFallback : b.fontFamilyFallback, fontSize: ui$.lerpDouble((t16 = a.fontSize, t16 == null ? b.fontSize : t16), (t16$ = b.fontSize, t16$ == null ? a.fontSize : t16$), t), fontWeight: ui$.FontWeight.lerp(a.fontWeight, b.fontWeight, t), fontStyle: dart.notNull(t) < 0.5 ? a.fontStyle : b.fontStyle, letterSpacing: ui$.lerpDouble((t16$0 = a.letterSpacing, t16$0 == null ? b.letterSpacing : t16$0), (t16$1 = b.letterSpacing, t16$1 == null ? a.letterSpacing : t16$1), t), wordSpacing: ui$.lerpDouble((t16$2 = a.wordSpacing, t16$2 == null ? b.wordSpacing : t16$2), (t16$3 = b.wordSpacing, t16$3 == null ? a.wordSpacing : t16$3), t), textBaseline: dart.notNull(t) < 0.5 ? a.textBaseline : b.textBaseline, height: ui$.lerpDouble((t16$4 = a.height, t16$4 == null ? b.height : t16$4), (t16$5 = b.height, t16$5 == null ? a.height : t16$5), t), locale: dart.notNull(t) < 0.5 ? a.locale : b.locale, foreground: a.foreground != null || b.foreground != null ? dart.notNull(t) < 0.5 ? (t16$6 = a.foreground, t16$6 == null ? (t17 = new ui$.Paint.new(), t17.color = a.color, t17) : t16$6) : (t16$7 = b.foreground, t16$7 == null ? (t17$ = new ui$.Paint.new(), t17$.color = b.color, t17$) : t16$7) : null, background: a.background != null || b.background != null ? dart.notNull(t) < 0.5 ? (t16$8 = a.background, t16$8 == null ? (t17$0 = new ui$.Paint.new(), t17$0.color = a.backgroundColor, t17$0) : t16$8) : (t16$9 = b.background, t16$9 == null ? (t17$1 = new ui$.Paint.new(), t17$1.color = b.backgroundColor, t17$1) : t16$9) : null, shadows: dart.notNull(t) < 0.5 ? a.shadows : b.shadows, decoration: dart.notNull(t) < 0.5 ? a.decoration : b.decoration, decorationColor: ui$.Color.lerp(a.decorationColor, b.decorationColor, t), decorationStyle: dart.notNull(t) < 0.5 ? a.decorationStyle : b.decorationStyle, decorationThickness: ui$.lerpDouble((t16$10 = a.decorationThickness, t16$10 == null ? b.decorationThickness : t16$10), (t16$11 = b.decorationThickness, t16$11 == null ? a.decorationThickness : t16$11), t), debugLabel: lerpDebugLabel});
    }
    getTextStyle(opts) {
      let t17, t16;
      let textScaleFactor = opts && 'textScaleFactor' in opts ? opts.textScaleFactor : 1.0;
      return new src__engine.EngineTextStyle.new({color: this.color, decoration: this.decoration, decorationColor: this.decorationColor, decorationStyle: this.decorationStyle, decorationThickness: this.decorationThickness, fontWeight: this.fontWeight, fontStyle: this.fontStyle, textBaseline: this.textBaseline, fontFamily: this.fontFamily, fontFamilyFallback: this.fontFamilyFallback, fontSize: this.fontSize == null ? null : dart.notNull(this.fontSize) * dart.notNull(textScaleFactor), letterSpacing: this.letterSpacing, wordSpacing: this.wordSpacing, height: this.height, locale: this.locale, foreground: this.foreground, background: (t16 = this.background, t16 == null ? this.backgroundColor != null ? (t17 = new ui$.Paint.new(), t17.color = this.backgroundColor, t17) : null : t16), shadows: this.shadows});
    }
    getParagraphStyle(opts) {
      let t16, t16$, t16$0, t16$1, t16$2, t16$3;
      let textAlign = opts && 'textAlign' in opts ? opts.textAlign : null;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      let textScaleFactor = opts && 'textScaleFactor' in opts ? opts.textScaleFactor : 1.0;
      let ellipsis = opts && 'ellipsis' in opts ? opts.ellipsis : null;
      let maxLines = opts && 'maxLines' in opts ? opts.maxLines : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let fontFamily = opts && 'fontFamily' in opts ? opts.fontFamily : null;
      let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
      let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
      let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let strutStyle = opts && 'strutStyle' in opts ? opts.strutStyle : null;
      if (!(textScaleFactor != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/text_style.dart", 948, 12, "ert(textScaleFactor != ");
      if (!(maxLines == null || dart.notNull(maxLines) > 0)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/text_style.dart", 949, 12, "ert(maxLines == null || maxLines");
      return new src__engine.EngineParagraphStyle.new({textAlign: textAlign, textDirection: textDirection, fontWeight: (t16 = fontWeight, t16 == null ? this.fontWeight : t16), fontStyle: (t16$ = fontStyle, t16$ == null ? this.fontStyle : t16$), fontFamily: (t16$0 = fontFamily, t16$0 == null ? this.fontFamily : t16$0), fontSize: dart.notNull((t16$2 = (t16$1 = fontSize, t16$1 == null ? this.fontSize : t16$1), t16$2 == null ? src__painting__text_style.TextStyle._defaultFontSize : t16$2)) * dart.notNull(textScaleFactor), height: (t16$3 = height, t16$3 == null ? this.height : t16$3), strutStyle: strutStyle == null ? null : new src__engine.EngineStrutStyle.new({fontFamily: strutStyle.fontFamily, fontFamilyFallback: strutStyle.fontFamilyFallback, fontSize: strutStyle.fontSize, height: strutStyle.height, leading: strutStyle.leading, fontWeight: strutStyle.fontWeight, fontStyle: strutStyle.fontStyle, forceStrutHeight: strutStyle.forceStrutHeight}), maxLines: maxLines, ellipsis: ellipsis, locale: locale});
    }
    compareTo(other) {
      if (this === other) return src__painting__basic_types.RenderComparison.identical;
      if (!dart.equals(this.inherit, other.inherit) || this.fontFamily != other.fontFamily || this.fontSize != other.fontSize || !dart.equals(this.fontWeight, other.fontWeight) || !dart.equals(this.fontStyle, other.fontStyle) || this.letterSpacing != other.letterSpacing || this.wordSpacing != other.wordSpacing || !dart.equals(this.textBaseline, other.textBaseline) || this.height != other.height || !dart.equals(this.locale, other.locale) || !dart.equals(this.foreground, other.foreground) || !dart.equals(this.background, other.background) || !dart.test(src__foundation__collections.listEquals(ui$.Shadow, this.shadows, other.shadows)) || !dart.test(src__foundation__collections.listEquals(core.String, this.fontFamilyFallback, other.fontFamilyFallback))) return src__painting__basic_types.RenderComparison.layout;
      if (!dart.equals(this.color, other.color) || !dart.equals(this.backgroundColor, other.backgroundColor) || !dart.equals(this.decoration, other.decoration) || !dart.equals(this.decorationColor, other.decorationColor) || !dart.equals(this.decorationStyle, other.decorationStyle) || this.decorationThickness != other.decorationThickness) return src__painting__basic_types.RenderComparison.paint;
      return src__painting__basic_types.RenderComparison.identical;
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!dart.equals(dart.runtimeType(other), this[$runtimeType])) return false;
      let typedOther = src__painting__text_style.TextStyle._check(other);
      return dart.equals(this.inherit, typedOther.inherit) && dart.equals(this.color, typedOther.color) && dart.equals(this.backgroundColor, typedOther.backgroundColor) && this.fontFamily == typedOther.fontFamily && this.fontSize == typedOther.fontSize && dart.equals(this.fontWeight, typedOther.fontWeight) && dart.equals(this.fontStyle, typedOther.fontStyle) && this.letterSpacing == typedOther.letterSpacing && this.wordSpacing == typedOther.wordSpacing && dart.equals(this.textBaseline, typedOther.textBaseline) && this.height == typedOther.height && dart.equals(this.locale, typedOther.locale) && dart.equals(this.foreground, typedOther.foreground) && dart.equals(this.background, typedOther.background) && dart.equals(this.decoration, typedOther.decoration) && dart.equals(this.decorationColor, typedOther.decorationColor) && dart.equals(this.decorationStyle, typedOther.decorationStyle) && this.decorationThickness == typedOther.decorationThickness && dart.test(src__foundation__collections.listEquals(ui$.Shadow, this.shadows, typedOther.shadows)) && dart.test(src__foundation__collections.listEquals(core.String, this.fontFamilyFallback, typedOther.fontFamilyFallback));
    }
    get hashCode() {
      return ui$.hashValues(this.inherit, this.color, this.backgroundColor, this.fontFamily, this.fontFamilyFallback, this.fontSize, this.fontWeight, this.fontStyle, this.letterSpacing, this.wordSpacing, this.textBaseline, this.height, this.locale, this.foreground, this.background, this.decoration, this.decorationColor, this.decorationStyle, this.shadows);
    }
    toStringShort() {
      return dart.str(this[$runtimeType]);
    }
    debugFillProperties(properties, opts) {
      let prefix = opts && 'prefix' in opts ? opts.prefix : "";
      super.debugFillProperties(properties);
      if (this.debugLabel != null) properties.add(new src__foundation__diagnostics.MessageProperty.new(dart.str(prefix) + "debugLabel", this.debugLabel));
      let styles = JSArrayOfDiagnosticsNode().of([]);
      styles[$add](new (DiagnosticsPropertyOfColor()).new(dart.str(prefix) + "color", this.color, {defaultValue: null}));
      styles[$add](new (DiagnosticsPropertyOfColor()).new(dart.str(prefix) + "backgroundColor", this.backgroundColor, {defaultValue: null}));
      styles[$add](new src__foundation__diagnostics.StringProperty.new(dart.str(prefix) + "family", this.fontFamily, {defaultValue: null, quoted: false}));
      styles[$add](new (IterablePropertyOfString()).new(dart.str(prefix) + "familyFallback", this.fontFamilyFallback, {defaultValue: null}));
      styles[$add](new src__foundation__diagnostics.DoubleProperty.new(dart.str(prefix) + "size", this.fontSize, {defaultValue: null}));
      let weightDescription = null;
      if (this.fontWeight != null) {
        weightDescription = dart.str(dart.notNull(this.fontWeight.index) + 1) + "00";
      }
      styles[$add](new (DiagnosticsPropertyOfFontWeight()).new(dart.str(prefix) + "weight", this.fontWeight, {description: weightDescription, defaultValue: null}));
      styles[$add](new (EnumPropertyOfFontStyle()).new(dart.str(prefix) + "style", this.fontStyle, {defaultValue: null}));
      styles[$add](new src__foundation__diagnostics.DoubleProperty.new(dart.str(prefix) + "letterSpacing", this.letterSpacing, {defaultValue: null}));
      styles[$add](new src__foundation__diagnostics.DoubleProperty.new(dart.str(prefix) + "wordSpacing", this.wordSpacing, {defaultValue: null}));
      styles[$add](new (EnumPropertyOfTextBaseline()).new(dart.str(prefix) + "baseline", this.textBaseline, {defaultValue: null}));
      styles[$add](new src__foundation__diagnostics.DoubleProperty.new(dart.str(prefix) + "height", this.height, {unit: "x", defaultValue: null}));
      styles[$add](new (DiagnosticsPropertyOfLocale()).new(dart.str(prefix) + "locale", this.locale, {defaultValue: null}));
      styles[$add](new (DiagnosticsPropertyOfPaint()).new(dart.str(prefix) + "foreground", this.foreground, {defaultValue: null}));
      styles[$add](new (DiagnosticsPropertyOfPaint()).new(dart.str(prefix) + "background", this.background, {defaultValue: null}));
      if (this.decoration != null || this.decorationColor != null || this.decorationStyle != null || this.decorationThickness != null) {
        let decorationDescription = JSArrayOfString().of([]);
        if (this.decorationStyle != null) decorationDescription[$add](src__foundation__diagnostics.describeEnum(this.decorationStyle));
        styles[$add](new (DiagnosticsPropertyOfColor()).new(dart.str(prefix) + "decorationColor", this.decorationColor, {defaultValue: null, level: src__foundation__diagnostics.DiagnosticLevel.fine}));
        if (this.decorationColor != null) decorationDescription[$add](dart.str(this.decorationColor));
        styles[$add](new (DiagnosticsPropertyOfTextDecoration()).new(dart.str(prefix) + "decoration", this.decoration, {defaultValue: null, level: src__foundation__diagnostics.DiagnosticLevel.hidden}));
        if (this.decoration != null) decorationDescription[$add](dart.str(this.decoration));
        if (!dart.test(decorationDescription[$isNotEmpty])) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/text_style.dart", 1118, 14, "ert(decorationDescription.isNotE");
        styles[$add](new src__foundation__diagnostics.MessageProperty.new(dart.str(prefix) + "decoration", decorationDescription[$join](" ")));
        styles[$add](new src__foundation__diagnostics.DoubleProperty.new(dart.str(prefix) + "decorationThickness", this.decorationThickness, {unit: "x", defaultValue: null}));
      }
      let styleSpecified = styles[$any](dart.fn(n => !dart.test(n.isFiltered(src__foundation__diagnostics.DiagnosticLevel.info)), DiagnosticsNodeTobool()));
      properties.add(new (DiagnosticsPropertyOfbool()).new(dart.str(prefix) + "inherit", this.inherit, {level: !dart.test(styleSpecified) && dart.test(this.inherit) ? src__foundation__diagnostics.DiagnosticLevel.fine : src__foundation__diagnostics.DiagnosticLevel.info}));
      styles[$forEach](dart.bind(properties, 'add'));
      if (!dart.test(styleSpecified)) properties.add(new src__foundation__diagnostics.FlagProperty.new("inherit", {value: this.inherit, ifTrue: dart.str(prefix) + "<all styles inherited>", ifFalse: dart.str(prefix) + "<no style specified>"}));
    }
  };
  (src__painting__text_style.TextStyle.new = function(opts) {
    let inherit = opts && 'inherit' in opts ? opts.inherit : true;
    let color = opts && 'color' in opts ? opts.color : null;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
    let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
    let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
    let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
    let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
    let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
    let height = opts && 'height' in opts ? opts.height : null;
    let locale = opts && 'locale' in opts ? opts.locale : null;
    let foreground = opts && 'foreground' in opts ? opts.foreground : null;
    let background = opts && 'background' in opts ? opts.background : null;
    let shadows = opts && 'shadows' in opts ? opts.shadows : null;
    let decoration = opts && 'decoration' in opts ? opts.decoration : null;
    let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
    let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
    let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
    let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;
    let fontFamily = opts && 'fontFamily' in opts ? opts.fontFamily : null;
    let fontFamilyFallback = opts && 'fontFamilyFallback' in opts ? opts.fontFamilyFallback : null;
    let package$ = opts && 'package' in opts ? opts.package : null;
    this[inherit$] = inherit;
    this[color$] = color;
    this[backgroundColor$] = backgroundColor;
    this[fontSize$0] = fontSize;
    this[fontWeight$0] = fontWeight;
    this[fontStyle$0] = fontStyle;
    this[letterSpacing$] = letterSpacing;
    this[wordSpacing$] = wordSpacing;
    this[textBaseline$] = textBaseline;
    this[height$0] = height;
    this[locale$] = locale;
    this[foreground$] = foreground;
    this[background$] = background;
    this[shadows$] = shadows;
    this[decoration$] = decoration;
    this[decorationColor$] = decorationColor;
    this[decorationStyle$] = decorationStyle;
    this[decorationThickness$] = decorationThickness;
    this[debugLabel$0] = debugLabel;
    this[fontFamily$1] = package$ == null ? fontFamily : "packages/" + dart.str(package$) + "/" + dart.str(fontFamily);
    this[_fontFamilyFallback$] = fontFamilyFallback;
    this[_package$] = package$;
    if (!(inherit != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/text_style.dart", 331, 15, "inherit != null");
    if (!(color == null || foreground == null)) dart.assertFailed(src__painting__text_style._kColorForegroundWarning, "org-dartlang-app:///packages/flutter_web/src/painting/text_style.dart", 332, 15, "color == null || foreground == null");
    if (!(backgroundColor == null || background == null)) dart.assertFailed(src__painting__text_style._kColorBackgroundWarning, "org-dartlang-app:///packages/flutter_web/src/painting/text_style.dart", 333, 15, "backgroundColor == null || background == null");
    src__painting__text_style.TextStyle.__proto__.new.call(this);
    ;
  }).prototype = src__painting__text_style.TextStyle.prototype;
  dart.addTypeTests(src__painting__text_style.TextStyle);
  const inherit$ = Symbol("TextStyle.inherit");
  const color$ = Symbol("TextStyle.color");
  const backgroundColor$ = Symbol("TextStyle.backgroundColor");
  const fontFamily$1 = Symbol("TextStyle.fontFamily");
  const fontSize$0 = Symbol("TextStyle.fontSize");
  const fontWeight$0 = Symbol("TextStyle.fontWeight");
  const fontStyle$0 = Symbol("TextStyle.fontStyle");
  const letterSpacing$ = Symbol("TextStyle.letterSpacing");
  const wordSpacing$ = Symbol("TextStyle.wordSpacing");
  const textBaseline$ = Symbol("TextStyle.textBaseline");
  const height$0 = Symbol("TextStyle.height");
  const locale$ = Symbol("TextStyle.locale");
  const foreground$ = Symbol("TextStyle.foreground");
  const background$ = Symbol("TextStyle.background");
  const decoration$ = Symbol("TextStyle.decoration");
  const decorationColor$ = Symbol("TextStyle.decorationColor");
  const decorationStyle$ = Symbol("TextStyle.decorationStyle");
  const decorationThickness$ = Symbol("TextStyle.decorationThickness");
  const debugLabel$0 = Symbol("TextStyle.debugLabel");
  const shadows$ = Symbol("TextStyle.shadows");
  dart.setMethodSignature(src__painting__text_style.TextStyle, () => ({
    __proto__: dart.getMethods(src__painting__text_style.TextStyle.__proto__),
    copyWith: dart.fnType(src__painting__text_style.TextStyle, [], {background: ui$.Paint, backgroundColor: ui$.Color, color: ui$.Color, debugLabel: core.String, decoration: ui$.TextDecoration, decorationColor: ui$.Color, decorationStyle: ui$.TextDecorationStyle, decorationThickness: core.double, fontFamily: core.String, fontFamilyFallback: core.List$(core.String), fontSize: core.double, fontStyle: ui$.FontStyle, fontWeight: ui$.FontWeight, foreground: ui$.Paint, height: core.double, inherit: core.bool, letterSpacing: core.double, locale: ui$.Locale, shadows: core.List$(ui$.Shadow), textBaseline: ui$.TextBaseline, wordSpacing: core.double}),
    apply: dart.fnType(src__painting__text_style.TextStyle, [], {backgroundColor: ui$.Color, color: ui$.Color, decoration: ui$.TextDecoration, decorationColor: ui$.Color, decorationStyle: ui$.TextDecorationStyle, decorationThicknessDelta: core.double, decorationThicknessFactor: core.double, fontFamily: core.String, fontFamilyFallback: core.List$(core.String), fontSizeDelta: core.double, fontSizeFactor: core.double, fontWeightDelta: core.int, heightDelta: core.double, heightFactor: core.double, letterSpacingDelta: core.double, letterSpacingFactor: core.double, wordSpacingDelta: core.double, wordSpacingFactor: core.double}),
    merge: dart.fnType(src__painting__text_style.TextStyle, [src__painting__text_style.TextStyle]),
    getTextStyle: dart.fnType(ui$.TextStyle, [], {textScaleFactor: core.double}),
    getParagraphStyle: dart.fnType(ui$.ParagraphStyle, [], {ellipsis: core.String, fontFamily: core.String, fontSize: core.double, fontStyle: ui$.FontStyle, fontWeight: ui$.FontWeight, height: core.double, locale: ui$.Locale, maxLines: core.int, strutStyle: src__painting__strut_style.StrutStyle, textAlign: ui$.TextAlign, textDirection: ui$.TextDirection, textScaleFactor: core.double}),
    compareTo: dart.fnType(src__painting__basic_types.RenderComparison, [src__painting__text_style.TextStyle]),
    debugFillProperties: dart.fnType(dart.void, [src__foundation__diagnostics.DiagnosticPropertiesBuilder], {prefix: core.String})
  }));
  dart.setGetterSignature(src__painting__text_style.TextStyle, () => ({
    __proto__: dart.getGetters(src__painting__text_style.TextStyle.__proto__),
    fontFamilyFallback: core.List$(core.String)
  }));
  dart.setLibraryUri(src__painting__text_style.TextStyle, "package:flutter_web/src/painting/text_style.dart");
  dart.setFieldSignature(src__painting__text_style.TextStyle, () => ({
    __proto__: dart.getFields(src__painting__text_style.TextStyle.__proto__),
    inherit: dart.finalFieldType(core.bool),
    color: dart.finalFieldType(ui$.Color),
    backgroundColor: dart.finalFieldType(ui$.Color),
    fontFamily: dart.finalFieldType(core.String),
    [_fontFamilyFallback$]: dart.finalFieldType(core.List$(core.String)),
    [_package$]: dart.finalFieldType(core.String),
    fontSize: dart.finalFieldType(core.double),
    fontWeight: dart.finalFieldType(ui$.FontWeight),
    fontStyle: dart.finalFieldType(ui$.FontStyle),
    letterSpacing: dart.finalFieldType(core.double),
    wordSpacing: dart.finalFieldType(core.double),
    textBaseline: dart.finalFieldType(ui$.TextBaseline),
    height: dart.finalFieldType(core.double),
    locale: dart.finalFieldType(ui$.Locale),
    foreground: dart.finalFieldType(ui$.Paint),
    background: dart.finalFieldType(ui$.Paint),
    decoration: dart.finalFieldType(ui$.TextDecoration),
    decorationColor: dart.finalFieldType(ui$.Color),
    decorationStyle: dart.finalFieldType(ui$.TextDecorationStyle),
    decorationThickness: dart.finalFieldType(core.double),
    debugLabel: dart.finalFieldType(core.String),
    shadows: dart.finalFieldType(core.List$(ui$.Shadow))
  }));
  dart.defineExtensionMethods(src__painting__text_style.TextStyle, ['_equals']);
  dart.defineExtensionAccessors(src__painting__text_style.TextStyle, ['hashCode']);
  dart.defineLazy(src__painting__text_style.TextStyle, {
    /*src__painting__text_style.TextStyle._defaultFontSize*/get _defaultFontSize() {
      return 14.0;
    }
  });
  dart.defineLazy(src__painting__text_style, {
    /*src__painting__text_style._kDefaultDebugLabel*/get _kDefaultDebugLabel() {
      return "unknown";
    },
    /*src__painting__text_style._kColorForegroundWarning*/get _kColorForegroundWarning() {
      return "Cannot provide both a color and a foreground\n" + "The color argument is just a shorthand for \"foreground: new Paint()..color = color\".";
    },
    /*src__painting__text_style._kColorBackgroundWarning*/get _kColorBackgroundWarning() {
      return "Cannot provide both a backgroundColor and a background\n" + "The backgroundColor argument is just a shorthand for \"background: new Paint()..color = color\".";
    }
  });
  const _value$ = dart.privateName(src__scheduler__priority, "_value");
  src__scheduler__priority.Priority = class Priority extends core.Object {
    get value() {
      return this[_value$];
    }
    ['+'](offset) {
      if (offset[$abs]() > dart.notNull(src__scheduler__priority.Priority.kMaxOffset)) {
        offset = dart.notNull(src__scheduler__priority.Priority.kMaxOffset) * offset[$sign];
      }
      return new src__scheduler__priority.Priority.__(dart.notNull(this[_value$]) + dart.notNull(offset));
    }
    ['-'](offset) {
      return this['+'](-dart.notNull(offset));
    }
  };
  (src__scheduler__priority.Priority.__ = function(_value) {
    this[_value$] = _value;
    ;
  }).prototype = src__scheduler__priority.Priority.prototype;
  dart.addTypeTests(src__scheduler__priority.Priority);
  dart.setMethodSignature(src__scheduler__priority.Priority, () => ({
    __proto__: dart.getMethods(src__scheduler__priority.Priority.__proto__),
    '+': dart.fnType(src__scheduler__priority.Priority, [core.int]),
    '-': dart.fnType(src__scheduler__priority.Priority, [core.int])
  }));
  dart.setGetterSignature(src__scheduler__priority.Priority, () => ({
    __proto__: dart.getGetters(src__scheduler__priority.Priority.__proto__),
    value: core.int
  }));
  dart.setLibraryUri(src__scheduler__priority.Priority, "package:flutter_web/src/scheduler/priority.dart");
  dart.setFieldSignature(src__scheduler__priority.Priority, () => ({
    __proto__: dart.getFields(src__scheduler__priority.Priority.__proto__),
    [_value$]: dart.finalFieldType(core.int)
  }));
  dart.defineLazy(src__scheduler__priority.Priority, {
    /*src__scheduler__priority.Priority.idle*/get idle() {
      return dart.const(new src__scheduler__priority.Priority.__(0));
    },
    /*src__scheduler__priority.Priority.animation*/get animation() {
      return dart.const(new src__scheduler__priority.Priority.__(100000));
    },
    /*src__scheduler__priority.Priority.touch*/get touch() {
      return dart.const(new src__scheduler__priority.Priority.__(200000));
    },
    /*src__scheduler__priority.Priority.kMaxOffset*/get kMaxOffset() {
      return 10000;
    }
  });
  const _opacity = dart.privateName(src__widgets__icon_theme_data, "_opacity");
  let const$20;
  src__widgets__icon_theme_data.IconThemeData = class IconThemeData extends src__foundation__diagnostics.Diagnosticable {
    get color() {
      return this[color$0];
    }
    set color(value) {
      super.color = value;
    }
    get size() {
      return this[size$0];
    }
    set size(value) {
      super.size = value;
    }
    copyWith(opts) {
      let t16, t16$, t16$0;
      let color = opts && 'color' in opts ? opts.color : null;
      let opacity = opts && 'opacity' in opts ? opts.opacity : null;
      let size = opts && 'size' in opts ? opts.size : null;
      return new src__widgets__icon_theme_data.IconThemeData.new({color: (t16 = color, t16 == null ? this.color : t16), opacity: (t16$ = opacity, t16$ == null ? this.opacity : t16$), size: (t16$0 = size, t16$0 == null ? this.size : t16$0)});
    }
    merge(other) {
      if (other == null) return this;
      return this.copyWith({color: other.color, opacity: other.opacity, size: other.size});
    }
    get isConcrete() {
      return this.color != null && this.opacity != null && this.size != null;
    }
    get opacity() {
      let t16;
      t16 = this[_opacity];
      return t16 == null ? null : t16[$clamp](0.0, 1.0);
    }
    static lerp(a, b, t) {
      let t16, t16$, t16$0, t16$1, t16$2, t16$3;
      if (!(t != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/widgets/icon_theme_data.dart", 73, 12, "t != null");
      return new src__widgets__icon_theme_data.IconThemeData.new({color: ui$.Color.lerp((t16 = a, t16 == null ? null : t16.color), (t16$ = b, t16$ == null ? null : t16$.color), t), opacity: ui$.lerpDouble((t16$0 = a, t16$0 == null ? null : t16$0.opacity), (t16$1 = b, t16$1 == null ? null : t16$1.opacity), t), size: ui$.lerpDouble((t16$2 = a, t16$2 == null ? null : t16$2.size), (t16$3 = b, t16$3 == null ? null : t16$3.size), t)});
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.equals(dart.runtimeType(other), this[$runtimeType])) return false;
      let typedOther = src__widgets__icon_theme_data.IconThemeData._check(other);
      return dart.equals(this.color, typedOther.color) && this.opacity == typedOther.opacity && this.size == typedOther.size;
    }
    get hashCode() {
      return ui$.hashValues(this.color, this.opacity, this.size);
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (DiagnosticsPropertyOfColor()).new("color", this.color, {defaultValue: null}));
      properties.add(new src__foundation__diagnostics.DoubleProperty.new("opacity", this.opacity, {defaultValue: null}));
      properties.add(new src__foundation__diagnostics.DoubleProperty.new("size", this.size, {defaultValue: null}));
    }
  };
  (src__widgets__icon_theme_data.IconThemeData.new = function(opts) {
    let color = opts && 'color' in opts ? opts.color : null;
    let opacity = opts && 'opacity' in opts ? opts.opacity : null;
    let size = opts && 'size' in opts ? opts.size : null;
    this[color$0] = color;
    this[size$0] = size;
    this[_opacity] = opacity;
    src__widgets__icon_theme_data.IconThemeData.__proto__.new.call(this);
    ;
  }).prototype = src__widgets__icon_theme_data.IconThemeData.prototype;
  (src__widgets__icon_theme_data.IconThemeData.fallback = function() {
    this[color$0] = const$20 || (const$20 = dart.const(new ui$.Color.new(4278190080)));
    this[_opacity] = 1.0;
    this[size$0] = 24.0;
    src__widgets__icon_theme_data.IconThemeData.__proto__.new.call(this);
    ;
  }).prototype = src__widgets__icon_theme_data.IconThemeData.prototype;
  dart.addTypeTests(src__widgets__icon_theme_data.IconThemeData);
  const color$0 = Symbol("IconThemeData.color");
  const size$0 = Symbol("IconThemeData.size");
  dart.setMethodSignature(src__widgets__icon_theme_data.IconThemeData, () => ({
    __proto__: dart.getMethods(src__widgets__icon_theme_data.IconThemeData.__proto__),
    copyWith: dart.fnType(src__widgets__icon_theme_data.IconThemeData, [], {color: ui$.Color, opacity: core.double, size: core.double}),
    merge: dart.fnType(src__widgets__icon_theme_data.IconThemeData, [src__widgets__icon_theme_data.IconThemeData])
  }));
  dart.setGetterSignature(src__widgets__icon_theme_data.IconThemeData, () => ({
    __proto__: dart.getGetters(src__widgets__icon_theme_data.IconThemeData.__proto__),
    isConcrete: core.bool,
    opacity: core.double
  }));
  dart.setLibraryUri(src__widgets__icon_theme_data.IconThemeData, "package:flutter_web/src/widgets/icon_theme_data.dart");
  dart.setFieldSignature(src__widgets__icon_theme_data.IconThemeData, () => ({
    __proto__: dart.getFields(src__widgets__icon_theme_data.IconThemeData.__proto__),
    color: dart.finalFieldType(ui$.Color),
    [_opacity]: dart.finalFieldType(core.double),
    size: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(src__widgets__icon_theme_data.IconThemeData, ['_equals']);
  dart.defineExtensionAccessors(src__widgets__icon_theme_data.IconThemeData, ['hashCode']);
  src__painting__debug.debugAssertAllPaintingVarsUnset = function(reason, opts) {
    let debugDisableShadowsOverride = opts && 'debugDisableShadowsOverride' in opts ? opts.debugDisableShadowsOverride : false;
    if (!dart.test(dart.fn(() => {
      if (!dart.equals(src__painting__debug.debugDisableShadows, debugDisableShadowsOverride)) {
        dart.throw(src__foundation__assertions.FlutterError.new(reason));
      }
      return true;
    }, VoidTobool())())) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/debug.dart", 28, 10, "() {\n    if (debugDisableShadows != debugDisableShadowsOverride) {\n      throw new FlutterError(reason);\n    }\n    return true;\n  }()");
    return true;
  };
  dart.defineLazy(src__painting__debug, {
    /*src__painting__debug.debugDisableShadows*/get debugDisableShadows() {
      return false;
    },
    set debugDisableShadows(_) {}
  });
  const _nextPlatformViewId = dart.privateName(src__services__platform_views, "_nextPlatformViewId");
  src__services__platform_views.PlatformViewsRegistry = class PlatformViewsRegistry extends core.Object {
    getNextPlatformViewId() {
      let t16;
      t16 = this[_nextPlatformViewId];
      this[_nextPlatformViewId] = dart.notNull(t16) + 1;
      return t16;
    }
  };
  (src__services__platform_views.PlatformViewsRegistry._instance = function() {
    this[_nextPlatformViewId] = 0;
    ;
  }).prototype = src__services__platform_views.PlatformViewsRegistry.prototype;
  dart.addTypeTests(src__services__platform_views.PlatformViewsRegistry);
  dart.setMethodSignature(src__services__platform_views.PlatformViewsRegistry, () => ({
    __proto__: dart.getMethods(src__services__platform_views.PlatformViewsRegistry.__proto__),
    getNextPlatformViewId: dart.fnType(core.int, [])
  }));
  dart.setLibraryUri(src__services__platform_views.PlatformViewsRegistry, "package:flutter_web/src/services/platform_views.dart");
  dart.setFieldSignature(src__services__platform_views.PlatformViewsRegistry, () => ({
    __proto__: dart.getFields(src__services__platform_views.PlatformViewsRegistry.__proto__),
    [_nextPlatformViewId]: dart.fieldType(core.int)
  }));
  const _focusCallbacks = dart.privateName(src__services__platform_views, "_focusCallbacks");
  const _onMethodCall = dart.privateName(src__services__platform_views, "_onMethodCall");
  src__services__platform_views.PlatformViewsService = class PlatformViewsService extends core.Object {
    static get _instance() {
      src__services__platform_views.PlatformViewsService._serviceInstance == null ? src__services__platform_views.PlatformViewsService._serviceInstance = new src__services__platform_views.PlatformViewsService.__() : null;
      return src__services__platform_views.PlatformViewsService._serviceInstance;
    }
    [_onMethodCall](call) {
      switch (call.method) {
        case "viewFocused":
        {
          let id = core.int._check(call.arguments);
          if (dart.test(this[_focusCallbacks][$containsKey](id))) {
            this[_focusCallbacks][$_get](id)();
          }
          break;
        }
        default:
        {
          dart.throw(new core.UnimplementedError.new(dart.str(call.method) + " was invoked but isn't implemented by PlatformViewsService"));
        }
      }
      return null;
    }
    static initAndroidView(opts) {
      let t16;
      let id = opts && 'id' in opts ? opts.id : null;
      let viewType = opts && 'viewType' in opts ? opts.viewType : null;
      let layoutDirection = opts && 'layoutDirection' in opts ? opts.layoutDirection : null;
      let creationParams = opts && 'creationParams' in opts ? opts.creationParams : null;
      let creationParamsCodec = opts && 'creationParamsCodec' in opts ? opts.creationParamsCodec : null;
      let onFocus = opts && 'onFocus' in opts ? opts.onFocus : null;
      if (!(id != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/platform_views.dart", 116, 12, "id != null");
      if (!(viewType != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/platform_views.dart", 117, 12, "viewType != null");
      if (!(layoutDirection != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/platform_views.dart", 118, 12, "layoutDirection != null");
      if (!(creationParams == null || creationParamsCodec != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/platform_views.dart", 119, 12, "creationParams == null || creationParamsCodec != null");
      let controller = new src__services__platform_views.AndroidViewController.__(id, viewType, creationParams, creationParamsCodec, layoutDirection);
      src__services__platform_views.PlatformViewsService._instance[_focusCallbacks][$_set](id, (t16 = onFocus, t16 == null ? dart.fn(() => {
      }, VoidToNull()) : t16));
      return controller;
    }
    static initUiKitView(opts) {
      let id = opts && 'id' in opts ? opts.id : null;
      let viewType = opts && 'viewType' in opts ? opts.viewType : null;
      let layoutDirection = opts && 'layoutDirection' in opts ? opts.layoutDirection : null;
      let creationParams = opts && 'creationParams' in opts ? opts.creationParams : null;
      let creationParamsCodec = opts && 'creationParamsCodec' in opts ? opts.creationParamsCodec : null;
      return async.async(src__services__platform_views.UiKitViewController, function* initUiKitView() {
        if (!(id != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/platform_views.dart", 149, 12, "id != null");
        if (!(viewType != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/platform_views.dart", 150, 12, "viewType != null");
        if (!(layoutDirection != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/platform_views.dart", 151, 12, "layoutDirection != null");
        if (!(creationParams == null || creationParamsCodec != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/platform_views.dart", 152, 12, "creationParams == null || creationParamsCodec != null");
        let args = new (IdentityMapOfString$dynamic()).from(["id", id, "viewType", viewType]);
        if (creationParams != null) {
          let paramsByteData = creationParamsCodec.encodeMessage(creationParams);
          args[$_set]("params", typed_data.Uint8List.view(paramsByteData[$buffer], 0, paramsByteData[$lengthInBytes]));
        }
        yield src__services__system_channels.SystemChannels.platform_views.invokeMethod(dart.void, "create", args);
        return new src__services__platform_views.UiKitViewController.__(id, layoutDirection);
      });
    }
    static initHtmlView(opts) {
      let id = opts && 'id' in opts ? opts.id : null;
      let viewType = opts && 'viewType' in opts ? opts.viewType : null;
      let layoutDirection = opts && 'layoutDirection' in opts ? opts.layoutDirection : null;
      if (!(id != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/platform_views.dart", 177, 13, "id != null");
      if (!(viewType != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/platform_views.dart", 178, 12, "viewType != null");
      if (!(layoutDirection != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/platform_views.dart", 179, 12, "layoutDirection != null");
      let controller = new src__services__platform_views.HtmlViewController.__(id, viewType, layoutDirection);
      return controller;
    }
  };
  (src__services__platform_views.PlatformViewsService.__ = function() {
    this[_focusCallbacks] = new (IdentityMapOfint$VoidTovoid()).new();
    src__services__system_channels.SystemChannels.platform_views.setMethodCallHandler(dart.bind(this, _onMethodCall));
  }).prototype = src__services__platform_views.PlatformViewsService.prototype;
  dart.addTypeTests(src__services__platform_views.PlatformViewsService);
  dart.setMethodSignature(src__services__platform_views.PlatformViewsService, () => ({
    __proto__: dart.getMethods(src__services__platform_views.PlatformViewsService.__proto__),
    [_onMethodCall]: dart.fnType(async.Future$(dart.void), [src__services__message_codec.MethodCall])
  }));
  dart.setLibraryUri(src__services__platform_views.PlatformViewsService, "package:flutter_web/src/services/platform_views.dart");
  dart.setFieldSignature(src__services__platform_views.PlatformViewsService, () => ({
    __proto__: dart.getFields(src__services__platform_views.PlatformViewsService.__proto__),
    [_focusCallbacks]: dart.finalFieldType(core.Map$(core.int, dart.fnType(dart.void, [])))
  }));
  dart.defineLazy(src__services__platform_views.PlatformViewsService, {
    /*src__services__platform_views.PlatformViewsService._serviceInstance*/get _serviceInstance() {
      return null;
    },
    set _serviceInstance(_) {}
  });
  const _asList = dart.privateName(src__services__platform_views, "_asList");
  src__services__platform_views.AndroidPointerProperties = class AndroidPointerProperties extends core.Object {
    get id() {
      return this[id$];
    }
    set id(value) {
      super.id = value;
    }
    get toolType() {
      return this[toolType$];
    }
    set toolType(value) {
      super.toolType = value;
    }
    [_asList]() {
      return JSArrayOfint().of([this.id, this.toolType]);
    }
    toString() {
      return "AndroidPointerProperties(id: " + dart.str(this.id) + ", toolType: " + dart.str(this.toolType) + ")";
    }
  };
  (src__services__platform_views.AndroidPointerProperties.new = function(opts) {
    let id = opts && 'id' in opts ? opts.id : null;
    let toolType = opts && 'toolType' in opts ? opts.toolType : null;
    this[id$] = id;
    this[toolType$] = toolType;
    if (!(id != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/platform_views.dart", 199, 15, "id != null");
    if (!(toolType != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/platform_views.dart", 200, 15, "toolType != null");
    ;
  }).prototype = src__services__platform_views.AndroidPointerProperties.prototype;
  dart.addTypeTests(src__services__platform_views.AndroidPointerProperties);
  const id$ = Symbol("AndroidPointerProperties.id");
  const toolType$ = Symbol("AndroidPointerProperties.toolType");
  dart.setMethodSignature(src__services__platform_views.AndroidPointerProperties, () => ({
    __proto__: dart.getMethods(src__services__platform_views.AndroidPointerProperties.__proto__),
    [_asList]: dart.fnType(core.List$(core.int), [])
  }));
  dart.setLibraryUri(src__services__platform_views.AndroidPointerProperties, "package:flutter_web/src/services/platform_views.dart");
  dart.setFieldSignature(src__services__platform_views.AndroidPointerProperties, () => ({
    __proto__: dart.getFields(src__services__platform_views.AndroidPointerProperties.__proto__),
    id: dart.finalFieldType(core.int),
    toolType: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(src__services__platform_views.AndroidPointerProperties, ['toString']);
  dart.defineLazy(src__services__platform_views.AndroidPointerProperties, {
    /*src__services__platform_views.AndroidPointerProperties.kToolTypeUnknown*/get kToolTypeUnknown() {
      return 0;
    },
    /*src__services__platform_views.AndroidPointerProperties.kToolTypeFinger*/get kToolTypeFinger() {
      return 1;
    },
    /*src__services__platform_views.AndroidPointerProperties.kToolTypeStylus*/get kToolTypeStylus() {
      return 2;
    },
    /*src__services__platform_views.AndroidPointerProperties.kToolTypeMouse*/get kToolTypeMouse() {
      return 3;
    },
    /*src__services__platform_views.AndroidPointerProperties.kToolTypeEraser*/get kToolTypeEraser() {
      return 4;
    }
  });
  src__services__platform_views.AndroidPointerCoords = class AndroidPointerCoords extends core.Object {
    get orientation() {
      return this[orientation$0];
    }
    set orientation(value) {
      super.orientation = value;
    }
    get pressure() {
      return this[pressure$1];
    }
    set pressure(value) {
      super.pressure = value;
    }
    get size() {
      return this[size$1];
    }
    set size(value) {
      super.size = value;
    }
    get toolMajor() {
      return this[toolMajor$];
    }
    set toolMajor(value) {
      super.toolMajor = value;
    }
    get toolMinor() {
      return this[toolMinor$];
    }
    set toolMinor(value) {
      super.toolMinor = value;
    }
    get touchMajor() {
      return this[touchMajor$];
    }
    set touchMajor(value) {
      super.touchMajor = value;
    }
    get touchMinor() {
      return this[touchMinor$];
    }
    set touchMinor(value) {
      super.touchMinor = value;
    }
    get x() {
      return this[x$1];
    }
    set x(value) {
      super.x = value;
    }
    get y() {
      return this[y$3];
    }
    set y(value) {
      super.y = value;
    }
    [_asList]() {
      return JSArrayOfdouble().of([this.orientation, this.pressure, this.size, this.toolMajor, this.toolMinor, this.touchMajor, this.touchMinor, this.x, this.y]);
    }
    toString() {
      return "AndroidPointerCoords(orientation: " + dart.str(this.orientation) + ", pressure: " + dart.str(this.pressure) + ", size: " + dart.str(this.size) + ", toolMajor: " + dart.str(this.toolMajor) + ", toolMinor: " + dart.str(this.toolMinor) + ", touchMajor: " + dart.str(this.touchMajor) + ", touchMinor: " + dart.str(this.touchMinor) + ", x: " + dart.str(this.x) + ", y: " + dart.str(this.y) + ")";
    }
  };
  (src__services__platform_views.AndroidPointerCoords.new = function(opts) {
    let orientation = opts && 'orientation' in opts ? opts.orientation : null;
    let pressure = opts && 'pressure' in opts ? opts.pressure : null;
    let size = opts && 'size' in opts ? opts.size : null;
    let toolMajor = opts && 'toolMajor' in opts ? opts.toolMajor : null;
    let toolMinor = opts && 'toolMinor' in opts ? opts.toolMinor : null;
    let touchMajor = opts && 'touchMajor' in opts ? opts.touchMajor : null;
    let touchMinor = opts && 'touchMinor' in opts ? opts.touchMinor : null;
    let x = opts && 'x' in opts ? opts.x : null;
    let y = opts && 'y' in opts ? opts.y : null;
    this[orientation$0] = orientation;
    this[pressure$1] = pressure;
    this[size$1] = size;
    this[toolMajor$] = toolMajor;
    this[toolMinor$] = toolMinor;
    this[touchMajor$] = touchMajor;
    this[touchMinor$] = touchMinor;
    this[x$1] = x;
    this[y$3] = y;
    if (!(orientation != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/platform_views.dart", 249, 15, "orientation != null");
    if (!(pressure != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/platform_views.dart", 250, 15, "pressure != null");
    if (!(size != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/platform_views.dart", 251, 15, "size != null");
    if (!(toolMajor != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/platform_views.dart", 252, 15, "toolMajor != null");
    if (!(toolMinor != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/platform_views.dart", 253, 15, "toolMinor != null");
    if (!(touchMajor != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/platform_views.dart", 254, 15, "touchMajor != null");
    if (!(touchMinor != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/platform_views.dart", 255, 15, "touchMinor != null");
    if (!(x != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/platform_views.dart", 256, 15, "x != null");
    if (!(y != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/platform_views.dart", 257, 15, "y != null");
    ;
  }).prototype = src__services__platform_views.AndroidPointerCoords.prototype;
  dart.addTypeTests(src__services__platform_views.AndroidPointerCoords);
  const orientation$0 = Symbol("AndroidPointerCoords.orientation");
  const pressure$1 = Symbol("AndroidPointerCoords.pressure");
  const size$1 = Symbol("AndroidPointerCoords.size");
  const toolMajor$ = Symbol("AndroidPointerCoords.toolMajor");
  const toolMinor$ = Symbol("AndroidPointerCoords.toolMinor");
  const touchMajor$ = Symbol("AndroidPointerCoords.touchMajor");
  const touchMinor$ = Symbol("AndroidPointerCoords.touchMinor");
  const x$1 = Symbol("AndroidPointerCoords.x");
  const y$3 = Symbol("AndroidPointerCoords.y");
  dart.setMethodSignature(src__services__platform_views.AndroidPointerCoords, () => ({
    __proto__: dart.getMethods(src__services__platform_views.AndroidPointerCoords.__proto__),
    [_asList]: dart.fnType(core.List$(core.double), [])
  }));
  dart.setLibraryUri(src__services__platform_views.AndroidPointerCoords, "package:flutter_web/src/services/platform_views.dart");
  dart.setFieldSignature(src__services__platform_views.AndroidPointerCoords, () => ({
    __proto__: dart.getFields(src__services__platform_views.AndroidPointerCoords.__proto__),
    orientation: dart.finalFieldType(core.double),
    pressure: dart.finalFieldType(core.double),
    size: dart.finalFieldType(core.double),
    toolMajor: dart.finalFieldType(core.double),
    toolMinor: dart.finalFieldType(core.double),
    touchMajor: dart.finalFieldType(core.double),
    touchMinor: dart.finalFieldType(core.double),
    x: dart.finalFieldType(core.double),
    y: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(src__services__platform_views.AndroidPointerCoords, ['toString']);
  src__services__platform_views.AndroidMotionEvent = class AndroidMotionEvent extends core.Object {
    get downTime() {
      return this[downTime$];
    }
    set downTime(value) {
      super.downTime = value;
    }
    get eventTime() {
      return this[eventTime$];
    }
    set eventTime(value) {
      super.eventTime = value;
    }
    get action() {
      return this[action$];
    }
    set action(value) {
      super.action = value;
    }
    get pointerCount() {
      return this[pointerCount$];
    }
    set pointerCount(value) {
      super.pointerCount = value;
    }
    get pointerProperties() {
      return this[pointerProperties$];
    }
    set pointerProperties(value) {
      super.pointerProperties = value;
    }
    get pointerCoords() {
      return this[pointerCoords$];
    }
    set pointerCoords(value) {
      super.pointerCoords = value;
    }
    get metaState() {
      return this[metaState$0];
    }
    set metaState(value) {
      super.metaState = value;
    }
    get buttonState() {
      return this[buttonState$];
    }
    set buttonState(value) {
      super.buttonState = value;
    }
    get xPrecision() {
      return this[xPrecision$];
    }
    set xPrecision(value) {
      super.xPrecision = value;
    }
    get yPrecision() {
      return this[yPrecision$];
    }
    set yPrecision(value) {
      super.yPrecision = value;
    }
    get deviceId() {
      return this[deviceId$];
    }
    set deviceId(value) {
      super.deviceId = value;
    }
    get edgeFlags() {
      return this[edgeFlags$];
    }
    set edgeFlags(value) {
      super.edgeFlags = value;
    }
    get source() {
      return this[source$];
    }
    set source(value) {
      super.source = value;
    }
    get flags() {
      return this[flags$0];
    }
    set flags(value) {
      super.flags = value;
    }
    [_asList](viewId) {
      return [viewId, this.downTime, this.eventTime, this.action, this.pointerCount, this.pointerProperties[$map](ListOfint(), dart.fn(p => p[_asList](), AndroidPointerPropertiesToListOfint()))[$toList](), this.pointerCoords[$map](ListOfdouble(), dart.fn(p => p[_asList](), AndroidPointerCoordsToListOfdouble()))[$toList](), this.metaState, this.buttonState, this.xPrecision, this.yPrecision, this.deviceId, this.edgeFlags, this.source, this.flags];
    }
    toString() {
      return "AndroidPointerEvent(downTime: " + dart.str(this.downTime) + ", eventTime: " + dart.str(this.eventTime) + ", action: " + dart.str(this.action) + ", pointerCount: " + dart.str(this.pointerCount) + ", pointerProperties: " + dart.str(this.pointerProperties) + ", pointerCoords: " + dart.str(this.pointerCoords) + ", metaState: " + dart.str(this.metaState) + ", buttonState: " + dart.str(this.buttonState) + ", xPrecision: " + dart.str(this.xPrecision) + ", yPrecision: " + dart.str(this.yPrecision) + ", deviceId: " + dart.str(this.deviceId) + ", edgeFlags: " + dart.str(this.edgeFlags) + ", source: " + dart.str(this.source) + ", flags: " + dart.str(this.flags) + ")";
    }
  };
  (src__services__platform_views.AndroidMotionEvent.new = function(opts) {
    let downTime = opts && 'downTime' in opts ? opts.downTime : null;
    let eventTime = opts && 'eventTime' in opts ? opts.eventTime : null;
    let action = opts && 'action' in opts ? opts.action : null;
    let pointerCount = opts && 'pointerCount' in opts ? opts.pointerCount : null;
    let pointerProperties = opts && 'pointerProperties' in opts ? opts.pointerProperties : null;
    let pointerCoords = opts && 'pointerCoords' in opts ? opts.pointerCoords : null;
    let metaState = opts && 'metaState' in opts ? opts.metaState : null;
    let buttonState = opts && 'buttonState' in opts ? opts.buttonState : null;
    let xPrecision = opts && 'xPrecision' in opts ? opts.xPrecision : null;
    let yPrecision = opts && 'yPrecision' in opts ? opts.yPrecision : null;
    let deviceId = opts && 'deviceId' in opts ? opts.deviceId : null;
    let edgeFlags = opts && 'edgeFlags' in opts ? opts.edgeFlags : null;
    let source = opts && 'source' in opts ? opts.source : null;
    let flags = opts && 'flags' in opts ? opts.flags : null;
    this[downTime$] = downTime;
    this[eventTime$] = eventTime;
    this[action$] = action;
    this[pointerCount$] = pointerCount;
    this[pointerProperties$] = pointerProperties;
    this[pointerCoords$] = pointerCoords;
    this[metaState$0] = metaState;
    this[buttonState$] = buttonState;
    this[xPrecision$] = xPrecision;
    this[yPrecision$] = yPrecision;
    this[deviceId$] = deviceId;
    this[edgeFlags$] = edgeFlags;
    this[source$] = source;
    this[flags$0] = flags;
    if (!(downTime != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/platform_views.dart", 336, 15, "downTime != null");
    if (!(eventTime != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/platform_views.dart", 337, 15, "eventTime != null");
    if (!(action != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/platform_views.dart", 338, 15, "action != null");
    if (!(pointerCount != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/platform_views.dart", 339, 15, "pointerCount != null");
    if (!(pointerProperties != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/platform_views.dart", 340, 15, "pointerProperties != null");
    if (!(pointerCoords != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/platform_views.dart", 341, 15, "pointerCoords != null");
    if (!(metaState != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/platform_views.dart", 342, 15, "metaState != null");
    if (!(buttonState != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/platform_views.dart", 343, 15, "buttonState != null");
    if (!(xPrecision != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/platform_views.dart", 344, 15, "xPrecision != null");
    if (!(yPrecision != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/platform_views.dart", 345, 15, "yPrecision != null");
    if (!(deviceId != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/platform_views.dart", 346, 15, "deviceId != null");
    if (!(edgeFlags != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/platform_views.dart", 347, 15, "edgeFlags != null");
    if (!(source != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/platform_views.dart", 348, 15, "source != null");
    if (!(flags != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/platform_views.dart", 349, 15, "flags != null");
    if (!(pointerProperties[$length] == pointerCount)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/platform_views.dart", 350, 15, "pointerProperties.length == pointerCount");
    if (!(pointerCoords[$length] == pointerCount)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/platform_views.dart", 351, 15, "pointerCoords.length == pointerCount");
    ;
  }).prototype = src__services__platform_views.AndroidMotionEvent.prototype;
  dart.addTypeTests(src__services__platform_views.AndroidMotionEvent);
  const downTime$ = Symbol("AndroidMotionEvent.downTime");
  const eventTime$ = Symbol("AndroidMotionEvent.eventTime");
  const action$ = Symbol("AndroidMotionEvent.action");
  const pointerCount$ = Symbol("AndroidMotionEvent.pointerCount");
  const pointerProperties$ = Symbol("AndroidMotionEvent.pointerProperties");
  const pointerCoords$ = Symbol("AndroidMotionEvent.pointerCoords");
  const metaState$0 = Symbol("AndroidMotionEvent.metaState");
  const buttonState$ = Symbol("AndroidMotionEvent.buttonState");
  const xPrecision$ = Symbol("AndroidMotionEvent.xPrecision");
  const yPrecision$ = Symbol("AndroidMotionEvent.yPrecision");
  const deviceId$ = Symbol("AndroidMotionEvent.deviceId");
  const edgeFlags$ = Symbol("AndroidMotionEvent.edgeFlags");
  const source$ = Symbol("AndroidMotionEvent.source");
  const flags$0 = Symbol("AndroidMotionEvent.flags");
  dart.setMethodSignature(src__services__platform_views.AndroidMotionEvent, () => ({
    __proto__: dart.getMethods(src__services__platform_views.AndroidMotionEvent.__proto__),
    [_asList]: dart.fnType(core.List, [core.int])
  }));
  dart.setLibraryUri(src__services__platform_views.AndroidMotionEvent, "package:flutter_web/src/services/platform_views.dart");
  dart.setFieldSignature(src__services__platform_views.AndroidMotionEvent, () => ({
    __proto__: dart.getFields(src__services__platform_views.AndroidMotionEvent.__proto__),
    downTime: dart.finalFieldType(core.int),
    eventTime: dart.finalFieldType(core.int),
    action: dart.finalFieldType(core.int),
    pointerCount: dart.finalFieldType(core.int),
    pointerProperties: dart.finalFieldType(core.List$(src__services__platform_views.AndroidPointerProperties)),
    pointerCoords: dart.finalFieldType(core.List$(src__services__platform_views.AndroidPointerCoords)),
    metaState: dart.finalFieldType(core.int),
    buttonState: dart.finalFieldType(core.int),
    xPrecision: dart.finalFieldType(core.double),
    yPrecision: dart.finalFieldType(core.double),
    deviceId: dart.finalFieldType(core.int),
    edgeFlags: dart.finalFieldType(core.int),
    source: dart.finalFieldType(core.int),
    flags: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(src__services__platform_views.AndroidMotionEvent, ['toString']);
  const _name$9 = dart.privateName(src__services__platform_views, "_name");
  src__services__platform_views._PlatformViewState = class _PlatformViewState extends core.Object {
    toString() {
      return this[_name$9];
    }
  };
  (src__services__platform_views._PlatformViewState.new = function(index, _name) {
    this.index = index;
    this[_name$9] = _name;
    ;
  }).prototype = src__services__platform_views._PlatformViewState.prototype;
  dart.addTypeTests(src__services__platform_views._PlatformViewState);
  dart.setLibraryUri(src__services__platform_views._PlatformViewState, "package:flutter_web/src/services/platform_views.dart");
  dart.setFieldSignature(src__services__platform_views._PlatformViewState, () => ({
    __proto__: dart.getFields(src__services__platform_views._PlatformViewState.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$9]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(src__services__platform_views._PlatformViewState, ['toString']);
  src__services__platform_views._PlatformViewState.waitingForSize = dart.const(new src__services__platform_views._PlatformViewState.new(0, "_PlatformViewState.waitingForSize"));
  src__services__platform_views._PlatformViewState.creating = dart.const(new src__services__platform_views._PlatformViewState.new(1, "_PlatformViewState.creating"));
  src__services__platform_views._PlatformViewState.created = dart.const(new src__services__platform_views._PlatformViewState.new(2, "_PlatformViewState.created"));
  src__services__platform_views._PlatformViewState.createFailed = dart.const(new src__services__platform_views._PlatformViewState.new(3, "_PlatformViewState.createFailed"));
  src__services__platform_views._PlatformViewState.disposed = dart.const(new src__services__platform_views._PlatformViewState.new(4, "_PlatformViewState.disposed"));
  src__services__platform_views._PlatformViewState.values = dart.constList([src__services__platform_views._PlatformViewState.waitingForSize, src__services__platform_views._PlatformViewState.creating, src__services__platform_views._PlatformViewState.created, src__services__platform_views._PlatformViewState.createFailed, src__services__platform_views._PlatformViewState.disposed], src__services__platform_views._PlatformViewState);
  const _textureId = dart.privateName(src__services__platform_views, "_textureId");
  const _platformViewCreatedCallbacks = dart.privateName(src__services__platform_views, "_platformViewCreatedCallbacks");
  const _viewType = dart.privateName(src__services__platform_views, "_viewType");
  const _creationParams = dart.privateName(src__services__platform_views, "_creationParams");
  const _creationParamsCodec = dart.privateName(src__services__platform_views, "_creationParamsCodec");
  const _layoutDirection = dart.privateName(src__services__platform_views, "_layoutDirection");
  const _state$0 = dart.privateName(src__services__platform_views, "_state");
  const _create = dart.privateName(src__services__platform_views, "_create");
  src__services__platform_views.AndroidViewController = class AndroidViewController extends core.Object {
    get id() {
      return this[id$0];
    }
    set id(value) {
      super.id = value;
    }
    get textureId() {
      return this[_textureId];
    }
    get isCreated() {
      return dart.equals(this[_state$0], src__services__platform_views._PlatformViewState.created);
    }
    addOnPlatformViewCreatedListener(listener) {
      if (!(listener != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/platform_views.dart", 537, 12, "listener != null");
      if (!!dart.equals(this[_state$0], src__services__platform_views._PlatformViewState.disposed)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/platform_views.dart", 538, 12, "_state != _PlatformViewState.disposed");
      this[_platformViewCreatedCallbacks][$add](listener);
    }
    removeOnPlatformViewCreatedListener(listener) {
      if (!!dart.equals(this[_state$0], src__services__platform_views._PlatformViewState.disposed)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/platform_views.dart", 544, 12, "_state != _PlatformViewState.disposed");
      this[_platformViewCreatedCallbacks][$remove](listener);
    }
    dispose() {
      return async.async(dart.void, (function* dispose() {
        if (dart.equals(this[_state$0], src__services__platform_views._PlatformViewState.creating) || dart.equals(this[_state$0], src__services__platform_views._PlatformViewState.created)) yield src__services__system_channels.SystemChannels.platform_views.invokeMethod(dart.void, "dispose", this.id);
        this[_platformViewCreatedCallbacks][$clear]();
        this[_state$0] = src__services__platform_views._PlatformViewState.disposed;
      }).bind(this));
    }
    setSize(size) {
      return async.async(dart.void, (function* setSize() {
        if (!!dart.equals(this[_state$0], src__services__platform_views._PlatformViewState.disposed)) dart.assertFailed("trying to size a disposed Android View. View id: " + dart.str(this.id), "org-dartlang-app:///packages/flutter_web/src/services/platform_views.dart", 567, 12, "_state != _PlatformViewState.disposed");
        if (!(size != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/platform_views.dart", 569, 12, "size != null");
        if (!!dart.test(size.isEmpty)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/platform_views.dart", 570, 12, "!size.isEmpty");
        if (dart.equals(this[_state$0], src__services__platform_views._PlatformViewState.waitingForSize)) return this[_create](size);
        yield src__services__system_channels.SystemChannels.platform_views.invokeMethod(dart.void, "resize", new (IdentityMapOfString$dynamic()).from(["id", this.id, "width", size.width, "height", size.height]));
      }).bind(this));
    }
    setLayoutDirection(layoutDirection) {
      return async.async(dart.void, (function* setLayoutDirection() {
        if (!!dart.equals(this[_state$0], src__services__platform_views._PlatformViewState.disposed)) dart.assertFailed("trying to set a layout direction for a disposed UIView. View id: " + dart.str(this.id), "org-dartlang-app:///packages/flutter_web/src/services/platform_views.dart", 584, 12, "_state != _PlatformViewState.disposed");
        if (dart.equals(layoutDirection, this[_layoutDirection])) return;
        if (!(layoutDirection != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/platform_views.dart", 589, 12, "layoutDirection != null");
        this[_layoutDirection] = layoutDirection;
        if (dart.equals(this[_state$0], src__services__platform_views._PlatformViewState.waitingForSize)) return;
        yield src__services__system_channels.SystemChannels.platform_views.invokeMethod(dart.void, "setDirection", new (IdentityMapOfString$dynamic()).from(["id", this.id, "direction", src__services__platform_views.AndroidViewController._getAndroidDirection(layoutDirection)]));
      }).bind(this));
    }
    clearFocus() {
      if (!dart.equals(this[_state$0], src__services__platform_views._PlatformViewState.created)) {
        return null;
      }
      return src__services__system_channels.SystemChannels.platform_views.invokeMethod(dart.void, "clearFocus", this.id);
    }
    static _getAndroidDirection(direction) {
      if (!(direction != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/platform_views.dart", 612, 12, "direction != null");
      switch (direction) {
        case ui$.TextDirection.ltr:
        {
          return src__services__platform_views.AndroidViewController.kAndroidLayoutDirectionLtr;
        }
        case ui$.TextDirection.rtl:
        {
          return src__services__platform_views.AndroidViewController.kAndroidLayoutDirectionRtl;
        }
      }
      return null;
    }
    sendMotionEvent(event) {
      return async.async(dart.void, (function* sendMotionEvent() {
        yield src__services__system_channels.SystemChannels.platform_views.invokeMethod(dart.dynamic, "touch", event[_asList](this.id));
      }).bind(this));
    }
    static pointerAction(pointerId, action) {
      return dart.notNull(pointerId) << 8 & 65280 | dart.notNull(action) & 255;
    }
    [_create](size) {
      return async.async(dart.void, (function* _create() {
        let args = new (IdentityMapOfString$dynamic()).from(["id", this.id, "viewType", this[_viewType], "width", size.width, "height", size.height, "direction", src__services__platform_views.AndroidViewController._getAndroidDirection(this[_layoutDirection])]);
        if (this[_creationParams] != null) {
          let paramsByteData = this[_creationParamsCodec].encodeMessage(this[_creationParams]);
          args[$_set]("params", typed_data.Uint8List.view(paramsByteData[$buffer], 0, paramsByteData[$lengthInBytes]));
        }
        this[_textureId] = (yield src__services__system_channels.SystemChannels.platform_views.invokeMethod(core.int, "create", args));
        this[_state$0] = src__services__platform_views._PlatformViewState.created;
        for (let callback of this[_platformViewCreatedCallbacks]) {
          callback(this.id);
        }
      }).bind(this));
    }
  };
  (src__services__platform_views.AndroidViewController.__ = function(id, viewType, creationParams, creationParamsCodec, layoutDirection) {
    this[_textureId] = null;
    this[_platformViewCreatedCallbacks] = JSArrayOfintTovoid().of([]);
    this[id$0] = id;
    if (!(id != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/platform_views.dart", 461, 14, "id != null");
    if (!(viewType != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/platform_views.dart", 462, 14, "viewType != null");
    if (!(layoutDirection != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/platform_views.dart", 463, 14, "layoutDirection != null");
    if (!(creationParams == null || creationParamsCodec != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/platform_views.dart", 464, 14, "creationParams == null || creationParamsCodec != null");
    this[_viewType] = viewType;
    this[_creationParams] = creationParams;
    this[_creationParamsCodec] = creationParamsCodec;
    this[_layoutDirection] = layoutDirection;
    this[_state$0] = src__services__platform_views._PlatformViewState.waitingForSize;
    ;
  }).prototype = src__services__platform_views.AndroidViewController.prototype;
  dart.addTypeTests(src__services__platform_views.AndroidViewController);
  const id$0 = Symbol("AndroidViewController.id");
  dart.setMethodSignature(src__services__platform_views.AndroidViewController, () => ({
    __proto__: dart.getMethods(src__services__platform_views.AndroidViewController.__proto__),
    addOnPlatformViewCreatedListener: dart.fnType(dart.void, [dart.fnType(dart.void, [core.int])]),
    removeOnPlatformViewCreatedListener: dart.fnType(dart.void, [dart.fnType(dart.void, [core.int])]),
    dispose: dart.fnType(async.Future$(dart.void), []),
    setSize: dart.fnType(async.Future$(dart.void), [ui$.Size]),
    setLayoutDirection: dart.fnType(async.Future$(dart.void), [ui$.TextDirection]),
    clearFocus: dart.fnType(async.Future$(dart.void), []),
    sendMotionEvent: dart.fnType(async.Future$(dart.void), [src__services__platform_views.AndroidMotionEvent]),
    [_create]: dart.fnType(async.Future$(dart.void), [ui$.Size])
  }));
  dart.setGetterSignature(src__services__platform_views.AndroidViewController, () => ({
    __proto__: dart.getGetters(src__services__platform_views.AndroidViewController.__proto__),
    textureId: core.int,
    isCreated: core.bool
  }));
  dart.setLibraryUri(src__services__platform_views.AndroidViewController, "package:flutter_web/src/services/platform_views.dart");
  dart.setFieldSignature(src__services__platform_views.AndroidViewController, () => ({
    __proto__: dart.getFields(src__services__platform_views.AndroidViewController.__proto__),
    id: dart.finalFieldType(core.int),
    [_viewType]: dart.finalFieldType(core.String),
    [_textureId]: dart.fieldType(core.int),
    [_layoutDirection]: dart.fieldType(ui$.TextDirection),
    [_state$0]: dart.fieldType(src__services__platform_views._PlatformViewState),
    [_creationParams]: dart.fieldType(dart.dynamic),
    [_creationParamsCodec]: dart.fieldType(src__services__message_codec.MessageCodec),
    [_platformViewCreatedCallbacks]: dart.finalFieldType(core.List$(dart.fnType(dart.void, [core.int])))
  }));
  dart.defineLazy(src__services__platform_views.AndroidViewController, {
    /*src__services__platform_views.AndroidViewController.kActionDown*/get kActionDown() {
      return 0;
    },
    /*src__services__platform_views.AndroidViewController.kActionUp*/get kActionUp() {
      return 1;
    },
    /*src__services__platform_views.AndroidViewController.kActionMove*/get kActionMove() {
      return 2;
    },
    /*src__services__platform_views.AndroidViewController.kActionCancel*/get kActionCancel() {
      return 3;
    },
    /*src__services__platform_views.AndroidViewController.kActionPointerDown*/get kActionPointerDown() {
      return 5;
    },
    /*src__services__platform_views.AndroidViewController.kActionPointerUp*/get kActionPointerUp() {
      return 6;
    },
    /*src__services__platform_views.AndroidViewController.kAndroidLayoutDirectionLtr*/get kAndroidLayoutDirectionLtr() {
      return 0;
    },
    /*src__services__platform_views.AndroidViewController.kAndroidLayoutDirectionRtl*/get kAndroidLayoutDirectionRtl() {
      return 1;
    }
  });
  const _debugDisposed = dart.privateName(src__services__platform_views, "_debugDisposed");
  src__services__platform_views.UiKitViewController = class UiKitViewController extends core.Object {
    get id() {
      return this[id$1];
    }
    set id(value) {
      super.id = value;
    }
    setLayoutDirection(layoutDirection) {
      return async.async(dart.void, (function* setLayoutDirection() {
        if (!!dart.test(this[_debugDisposed])) dart.assertFailed("trying to set a layout direction for a disposed iOS UIView. View id: " + dart.str(this.id), "org-dartlang-app:///packages/flutter_web/src/services/platform_views.dart", 688, 12, "!_debugDisposed");
        if (dart.equals(layoutDirection, this[_layoutDirection])) return;
        if (!(layoutDirection != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/platform_views.dart", 693, 12, "layoutDirection != null");
        this[_layoutDirection] = layoutDirection;
      }).bind(this));
    }
    acceptGesture() {
      let args = new (IdentityMapOfString$dynamic()).from(["id", this.id]);
      return src__services__system_channels.SystemChannels.platform_views.invokeMethod(dart.void, "acceptGesture", args);
    }
    rejectGesture() {
      let args = new (IdentityMapOfString$dynamic()).from(["id", this.id]);
      return src__services__system_channels.SystemChannels.platform_views.invokeMethod(dart.void, "rejectGesture", args);
    }
    dispose() {
      return async.async(dart.void, (function* dispose() {
        this[_debugDisposed] = true;
        yield src__services__system_channels.SystemChannels.platform_views.invokeMethod(dart.void, "dispose", this.id);
      }).bind(this));
    }
  };
  (src__services__platform_views.UiKitViewController.__ = function(id, layoutDirection) {
    this[_debugDisposed] = false;
    this[id$1] = id;
    if (!(id != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/platform_views.dart", 671, 14, "id != null");
    if (!(layoutDirection != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/platform_views.dart", 672, 14, "layoutDirection != null");
    this[_layoutDirection] = layoutDirection;
    ;
  }).prototype = src__services__platform_views.UiKitViewController.prototype;
  dart.addTypeTests(src__services__platform_views.UiKitViewController);
  const id$1 = Symbol("UiKitViewController.id");
  dart.setMethodSignature(src__services__platform_views.UiKitViewController, () => ({
    __proto__: dart.getMethods(src__services__platform_views.UiKitViewController.__proto__),
    setLayoutDirection: dart.fnType(async.Future$(dart.void), [ui$.TextDirection]),
    acceptGesture: dart.fnType(async.Future$(dart.void), []),
    rejectGesture: dart.fnType(async.Future$(dart.void), []),
    dispose: dart.fnType(async.Future$(dart.void), [])
  }));
  dart.setLibraryUri(src__services__platform_views.UiKitViewController, "package:flutter_web/src/services/platform_views.dart");
  dart.setFieldSignature(src__services__platform_views.UiKitViewController, () => ({
    __proto__: dart.getFields(src__services__platform_views.UiKitViewController.__proto__),
    id: dart.finalFieldType(core.int),
    [_debugDisposed]: dart.fieldType(core.bool),
    [_layoutDirection]: dart.fieldType(ui$.TextDirection)
  }));
  src__services__platform_views.HtmlViewController = class HtmlViewController extends core.Object {
    get id() {
      return this[id$2];
    }
    set id(value) {
      super.id = value;
    }
    get isCreated() {
      return dart.equals(this[_state$0], src__services__platform_views._PlatformViewState.created);
    }
    addOnPlatformViewCreatedListener(listener) {
      if (!(listener != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/platform_views.dart", 767, 12, "listener != null");
      if (!!dart.equals(this[_state$0], src__services__platform_views._PlatformViewState.disposed)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/platform_views.dart", 768, 12, "_state != _PlatformViewState.disposed");
      this[_platformViewCreatedCallbacks][$add](listener);
    }
    removeOnPlatformViewCreatedListener(listener) {
      if (!!dart.equals(this[_state$0], src__services__platform_views._PlatformViewState.disposed)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/platform_views.dart", 774, 12, "_state != _PlatformViewState.disposed");
      this[_platformViewCreatedCallbacks][$remove](listener);
    }
    acceptGesture() {
      let args = new (IdentityMapOfString$dynamic()).from(["id", this.id]);
      return src__services__system_channels.SystemChannels.platform_views.invokeMethod(dart.void, "acceptGesture", args);
    }
    rejectGesture() {
      let args = new (IdentityMapOfString$dynamic()).from(["id", this.id]);
      return src__services__system_channels.SystemChannels.platform_views.invokeMethod(dart.void, "rejectGesture", args);
    }
    dispose() {
      return async.async(dart.void, (function* dispose() {
        if (dart.equals(this[_state$0], src__services__platform_views._PlatformViewState.creating) || dart.equals(this[_state$0], src__services__platform_views._PlatformViewState.created)) yield src__services__system_channels.SystemChannels.platform_views.invokeMethod(dart.void, "dispose", this.id);
        this[_platformViewCreatedCallbacks][$clear]();
        this[_state$0] = src__services__platform_views._PlatformViewState.disposed;
      }).bind(this));
    }
    setSize(size) {
      return async.async(dart.void, (function* setSize() {
        if (!!dart.equals(this[_state$0], src__services__platform_views._PlatformViewState.disposed)) dart.assertFailed("trying to size a disposed HTML View. View id: " + dart.str(this.id), "org-dartlang-app:///packages/flutter_web/src/services/platform_views.dart", 821, 12, "_state != _PlatformViewState.disposed");
        if (!(size != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/platform_views.dart", 823, 12, "size != null");
        if (!!dart.test(size.isEmpty)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/platform_views.dart", 824, 12, "!size.isEmpty");
        if (dart.equals(this[_state$0], src__services__platform_views._PlatformViewState.waitingForSize)) return this[_create](size);
        yield src__services__system_channels.SystemChannels.platform_views.invokeMethod(dart.void, "resize", new (IdentityMapOfString$dynamic()).from(["id", this.id, "width", size.width, "height", size.height]));
      }).bind(this));
    }
    setLayoutDirection(layoutDirection) {
      return async.async(dart.void, (function* setLayoutDirection() {
        if (!!dart.equals(this[_state$0], src__services__platform_views._PlatformViewState.disposed)) dart.assertFailed("trying to set a layout direction for a disposed HTML View. View id: " + dart.str(this.id), "org-dartlang-app:///packages/flutter_web/src/services/platform_views.dart", 838, 12, "_state != _PlatformViewState.disposed");
        if (dart.equals(layoutDirection, this[_layoutDirection])) return;
        if (!(layoutDirection != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/platform_views.dart", 843, 12, "layoutDirection != null");
        this[_layoutDirection] = layoutDirection;
        if (dart.equals(this[_state$0], src__services__platform_views._PlatformViewState.waitingForSize)) return;
        yield src__services__system_channels.SystemChannels.platform_views.invokeMethod(dart.void, "setDirection", new (IdentityMapOfString$dynamic()).from(["id", this.id, "direction", dart.equals(layoutDirection, ui$.TextDirection.ltr) ? 0 : 1]));
      }).bind(this));
    }
    [_create](size) {
      return async.async(dart.void, (function* _create() {
        let args = new (IdentityMapOfString$dynamic()).from(["id", this.id, "viewType", this[_viewType], "width", size.width, "height", size.height, "direction", dart.equals(this[_layoutDirection], ui$.TextDirection.ltr) ? 0 : 1]);
        yield src__services__system_channels.SystemChannels.platform_views.invokeMethod(dart.dynamic, "create", args);
        this[_state$0] = src__services__platform_views._PlatformViewState.created;
        for (let callback of this[_platformViewCreatedCallbacks]) {
          callback(this.id);
        }
      }).bind(this));
    }
  };
  (src__services__platform_views.HtmlViewController.__ = function(id, viewType, layoutDirection) {
    this[_platformViewCreatedCallbacks] = JSArrayOfintTovoid().of([]);
    this[id$2] = id;
    if (!(id != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/platform_views.dart", 743, 14, "id != null");
    if (!(viewType != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/platform_views.dart", 744, 14, "viewType != null");
    if (!(layoutDirection != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/services/platform_views.dart", 745, 14, "layoutDirection != null");
    this[_viewType] = viewType;
    this[_layoutDirection] = layoutDirection;
    this[_state$0] = src__services__platform_views._PlatformViewState.waitingForSize;
    ;
  }).prototype = src__services__platform_views.HtmlViewController.prototype;
  dart.addTypeTests(src__services__platform_views.HtmlViewController);
  const id$2 = Symbol("HtmlViewController.id");
  dart.setMethodSignature(src__services__platform_views.HtmlViewController, () => ({
    __proto__: dart.getMethods(src__services__platform_views.HtmlViewController.__proto__),
    addOnPlatformViewCreatedListener: dart.fnType(dart.void, [dart.fnType(dart.void, [core.int])]),
    removeOnPlatformViewCreatedListener: dart.fnType(dart.void, [dart.fnType(dart.void, [core.int])]),
    acceptGesture: dart.fnType(async.Future$(dart.void), []),
    rejectGesture: dart.fnType(async.Future$(dart.void), []),
    dispose: dart.fnType(async.Future$(dart.void), []),
    setSize: dart.fnType(async.Future$(dart.void), [ui$.Size]),
    setLayoutDirection: dart.fnType(async.Future$(dart.void), [ui$.TextDirection]),
    [_create]: dart.fnType(async.Future$(dart.void), [ui$.Size])
  }));
  dart.setGetterSignature(src__services__platform_views.HtmlViewController, () => ({
    __proto__: dart.getGetters(src__services__platform_views.HtmlViewController.__proto__),
    isCreated: core.bool
  }));
  dart.setLibraryUri(src__services__platform_views.HtmlViewController, "package:flutter_web/src/services/platform_views.dart");
  dart.setFieldSignature(src__services__platform_views.HtmlViewController, () => ({
    __proto__: dart.getFields(src__services__platform_views.HtmlViewController.__proto__),
    id: dart.finalFieldType(core.int),
    [_viewType]: dart.finalFieldType(core.String),
    [_layoutDirection]: dart.fieldType(ui$.TextDirection),
    [_state$0]: dart.fieldType(src__services__platform_views._PlatformViewState),
    [_platformViewCreatedCallbacks]: dart.finalFieldType(core.List$(dart.fnType(dart.void, [core.int])))
  }));
  dart.defineLazy(src__services__platform_views, {
    /*src__services__platform_views.platformViewsRegistry*/get platformViewsRegistry() {
      return new src__services__platform_views.PlatformViewsRegistry._instance();
    }
  });
  const _timeout = dart.privateName(src__gestures__multitap, "_timeout");
  const _timer$0 = dart.privateName(src__gestures__multitap, "_timer");
  const _onTimeout = dart.privateName(src__gestures__multitap, "_onTimeout");
  src__gestures__multitap._CountdownZoned = class _CountdownZoned extends core.Object {
    get timeout() {
      return this[_timeout];
    }
    [_onTimeout]() {
      this[_timeout] = true;
    }
  };
  (src__gestures__multitap._CountdownZoned.new = function(opts) {
    let duration = opts && 'duration' in opts ? opts.duration : null;
    this[_timeout] = false;
    this[_timer$0] = null;
    if (!(duration != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multitap.dart", 48, 17, "duration != null");
    this[_timer$0] = async.Timer.new(duration, dart.bind(this, _onTimeout));
  }).prototype = src__gestures__multitap._CountdownZoned.prototype;
  dart.addTypeTests(src__gestures__multitap._CountdownZoned);
  dart.setMethodSignature(src__gestures__multitap._CountdownZoned, () => ({
    __proto__: dart.getMethods(src__gestures__multitap._CountdownZoned.__proto__),
    [_onTimeout]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(src__gestures__multitap._CountdownZoned, () => ({
    __proto__: dart.getGetters(src__gestures__multitap._CountdownZoned.__proto__),
    timeout: core.bool
  }));
  dart.setLibraryUri(src__gestures__multitap._CountdownZoned, "package:flutter_web/src/gestures/multitap.dart");
  dart.setFieldSignature(src__gestures__multitap._CountdownZoned, () => ({
    __proto__: dart.getFields(src__gestures__multitap._CountdownZoned.__proto__),
    [_timeout]: dart.fieldType(core.bool),
    [_timer$0]: dart.fieldType(async.Timer)
  }));
  const _isTrackingPointer = dart.privateName(src__gestures__multitap, "_isTrackingPointer");
  const _initialGlobalPosition = dart.privateName(src__gestures__multitap, "_initialGlobalPosition");
  const _doubleTapMinTimeCountdown = dart.privateName(src__gestures__multitap, "_doubleTapMinTimeCountdown");
  src__gestures__multitap._TapTracker = class _TapTracker extends core.Object {
    startTrackingPointer(route, transform) {
      if (!dart.test(this[_isTrackingPointer])) {
        this[_isTrackingPointer] = true;
        src__gestures__binding.GestureBinding.instance.pointerRouter.addRoute(this.pointer, route, transform);
      }
    }
    stopTrackingPointer(route) {
      if (dart.test(this[_isTrackingPointer])) {
        this[_isTrackingPointer] = false;
        src__gestures__binding.GestureBinding.instance.pointerRouter.removeRoute(this.pointer, route);
      }
    }
    isWithinGlobalTolerance(event, tolerance) {
      let offset = event.position['-'](this[_initialGlobalPosition]);
      return dart.notNull(offset.distance) <= dart.notNull(tolerance);
    }
    hasElapsedMinTime() {
      return this[_doubleTapMinTimeCountdown].timeout;
    }
    hasSameButton(event) {
      return event.buttons == this.initialButtons;
    }
  };
  (src__gestures__multitap._TapTracker.new = function(opts) {
    let event = opts && 'event' in opts ? opts.event : null;
    let entry = opts && 'entry' in opts ? opts.entry : null;
    let doubleTapMinTime = opts && 'doubleTapMinTime' in opts ? opts.doubleTapMinTime : null;
    this[_isTrackingPointer] = false;
    this.entry = entry;
    if (!(doubleTapMinTime != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multitap.dart", 69, 15, "doubleTapMinTime != null");
    if (!(event != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multitap.dart", 70, 15, "event != null");
    if (!(event.buttons != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multitap.dart", 71, 15, "event.buttons != null");
    this.pointer = event.pointer;
    this[_initialGlobalPosition] = event.position;
    this.initialButtons = event.buttons;
    this[_doubleTapMinTimeCountdown] = new src__gestures__multitap._CountdownZoned.new({duration: doubleTapMinTime});
    ;
  }).prototype = src__gestures__multitap._TapTracker.prototype;
  dart.addTypeTests(src__gestures__multitap._TapTracker);
  dart.setMethodSignature(src__gestures__multitap._TapTracker, () => ({
    __proto__: dart.getMethods(src__gestures__multitap._TapTracker.__proto__),
    startTrackingPointer: dart.fnType(dart.void, [dart.fnType(dart.void, [src__gestures__events.PointerEvent]), vector_math_64$.Matrix4]),
    stopTrackingPointer: dart.fnType(dart.void, [dart.fnType(dart.void, [src__gestures__events.PointerEvent])]),
    isWithinGlobalTolerance: dart.fnType(core.bool, [src__gestures__events.PointerEvent, core.double]),
    hasElapsedMinTime: dart.fnType(core.bool, []),
    hasSameButton: dart.fnType(core.bool, [src__gestures__events.PointerDownEvent])
  }));
  dart.setLibraryUri(src__gestures__multitap._TapTracker, "package:flutter_web/src/gestures/multitap.dart");
  dart.setFieldSignature(src__gestures__multitap._TapTracker, () => ({
    __proto__: dart.getFields(src__gestures__multitap._TapTracker.__proto__),
    pointer: dart.finalFieldType(core.int),
    entry: dart.finalFieldType(src__gestures__arena.GestureArenaEntry),
    [_initialGlobalPosition]: dart.finalFieldType(ui$.Offset),
    initialButtons: dart.finalFieldType(core.int),
    [_doubleTapMinTimeCountdown]: dart.finalFieldType(src__gestures__multitap._CountdownZoned),
    [_isTrackingPointer]: dart.fieldType(core.bool)
  }));
  const _doubleTapTimer = dart.privateName(src__gestures__multitap, "_doubleTapTimer");
  const _firstTap = dart.privateName(src__gestures__multitap, "_firstTap");
  const _trackers = dart.privateName(src__gestures__multitap, "_trackers");
  const _reset$0 = dart.privateName(src__gestures__multitap, "_reset");
  const _trackFirstTap = dart.privateName(src__gestures__multitap, "_trackFirstTap");
  const _stopDoubleTapTimer = dart.privateName(src__gestures__multitap, "_stopDoubleTapTimer");
  const _handleEvent$ = dart.privateName(src__gestures__multitap, "_handleEvent");
  const _registerFirstTap = dart.privateName(src__gestures__multitap, "_registerFirstTap");
  const _registerSecondTap = dart.privateName(src__gestures__multitap, "_registerSecondTap");
  const _reject = dart.privateName(src__gestures__multitap, "_reject");
  const _freezeTracker = dart.privateName(src__gestures__multitap, "_freezeTracker");
  const _clearTrackers = dart.privateName(src__gestures__multitap, "_clearTrackers");
  const _startDoubleTapTimer = dart.privateName(src__gestures__multitap, "_startDoubleTapTimer");
  const _checkUp$ = dart.privateName(src__gestures__multitap, "_checkUp");
  src__gestures__multitap.DoubleTapGestureRecognizer = class DoubleTapGestureRecognizer extends src__gestures__recognizer.GestureRecognizer {
    get onDoubleTap() {
      return this[onDoubleTap];
    }
    set onDoubleTap(value) {
      this[onDoubleTap] = value;
    }
    isPointerAllowed(event) {
      if (this[_firstTap] == null) {
        switch (event.buttons) {
          case src__gestures__events.kPrimaryButton:
          {
            if (this.onDoubleTap == null) return false;
            break;
          }
          default:
          {
            return false;
          }
        }
      }
      return super.isPointerAllowed(src__gestures__events.PointerDownEvent._check(event));
    }
    addAllowedPointer(event) {
      if (this[_firstTap] != null) {
        if (!dart.test(this[_firstTap].isWithinGlobalTolerance(event, src__gestures__constants.kDoubleTapSlop))) {
          return;
        } else if (!dart.test(this[_firstTap].hasElapsedMinTime()) || !dart.test(this[_firstTap].hasSameButton(src__gestures__events.PointerDownEvent._check(event)))) {
          this[_reset$0]();
          return this[_trackFirstTap](event);
        }
      }
      this[_trackFirstTap](event);
    }
    [_trackFirstTap](event) {
      this[_stopDoubleTapTimer]();
      let tracker = new src__gestures__multitap._TapTracker.new({event: src__gestures__events.PointerDownEvent._check(event), entry: src__gestures__binding.GestureBinding.instance.gestureArena.add(event.pointer, this), doubleTapMinTime: src__gestures__constants.kDoubleTapMinTime});
      this[_trackers][$_set](event.pointer, tracker);
      tracker.startTrackingPointer(dart.bind(this, _handleEvent$), event.transform);
    }
    [_handleEvent$](event) {
      let tracker = this[_trackers][$_get](event.pointer);
      if (!(tracker != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multitap.dart", 207, 12, "tracker != null");
      if (src__gestures__events.PointerUpEvent.is(event)) {
        if (this[_firstTap] == null)
          this[_registerFirstTap](tracker);
        else
          this[_registerSecondTap](tracker);
      } else if (src__gestures__events.PointerMoveEvent.is(event)) {
        if (!dart.test(tracker.isWithinGlobalTolerance(event, src__gestures__constants.kDoubleTapTouchSlop))) this[_reject](tracker);
      } else if (src__gestures__events.PointerCancelEvent.is(event)) {
        this[_reject](tracker);
      }
    }
    acceptGesture(pointer) {
    }
    rejectGesture(pointer) {
      let tracker = this[_trackers][$_get](pointer);
      if (tracker == null && this[_firstTap] != null && this[_firstTap].pointer == pointer) tracker = this[_firstTap];
      if (tracker != null) this[_reject](tracker);
    }
    [_reject](tracker) {
      this[_trackers][$remove](tracker.pointer);
      tracker.entry.resolve(src__gestures__arena.GestureDisposition.rejected);
      this[_freezeTracker](tracker);
      if (this[_firstTap] != null && (dart.test(this[_trackers][$isEmpty]) || dart.equals(tracker, this[_firstTap]))) this[_reset$0]();
    }
    dispose() {
      this[_reset$0]();
      super.dispose();
    }
    [_reset$0]() {
      this[_stopDoubleTapTimer]();
      if (this[_firstTap] != null) {
        let tracker = this[_firstTap];
        this[_firstTap] = null;
        this[_reject](tracker);
        src__gestures__binding.GestureBinding.instance.gestureArena.release(tracker.pointer);
      }
      this[_clearTrackers]();
    }
    [_registerFirstTap](tracker) {
      this[_startDoubleTapTimer]();
      src__gestures__binding.GestureBinding.instance.gestureArena.hold(tracker.pointer);
      this[_freezeTracker](tracker);
      this[_trackers][$remove](tracker.pointer);
      this[_clearTrackers]();
      this[_firstTap] = tracker;
    }
    [_registerSecondTap](tracker) {
      this[_firstTap].entry.resolve(src__gestures__arena.GestureDisposition.accepted);
      tracker.entry.resolve(src__gestures__arena.GestureDisposition.accepted);
      this[_freezeTracker](tracker);
      this[_trackers][$remove](tracker.pointer);
      this[_checkUp$](tracker.initialButtons);
      this[_reset$0]();
    }
    [_clearTrackers]() {
      this[_trackers][$values][$toList]()[$forEach](dart.bind(this, _reject));
      if (!dart.test(this[_trackers][$isEmpty])) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multitap.dart", 290, 12, "_trackers.isEmpty");
    }
    [_freezeTracker](tracker) {
      tracker.stopTrackingPointer(dart.bind(this, _handleEvent$));
    }
    [_startDoubleTapTimer]() {
      this[_doubleTapTimer] == null ? this[_doubleTapTimer] = async.Timer.new(src__gestures__constants.kDoubleTapTimeout, dart.bind(this, _reset$0)) : null;
    }
    [_stopDoubleTapTimer]() {
      if (this[_doubleTapTimer] != null) {
        this[_doubleTapTimer].cancel();
        this[_doubleTapTimer] = null;
      }
    }
    [_checkUp$](buttons) {
      if (!(buttons == src__gestures__events.kPrimaryButton)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multitap.dart", 309, 12, "buttons == kPrimaryButton");
      if (this.onDoubleTap != null) this.invokeCallback(dart.void, "onDoubleTap", this.onDoubleTap);
    }
    get debugDescription() {
      return "double tap";
    }
  };
  (src__gestures__multitap.DoubleTapGestureRecognizer.new = function(opts) {
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    let kind = opts && 'kind' in opts ? opts.kind : null;
    this[onDoubleTap] = null;
    this[_doubleTapTimer] = null;
    this[_firstTap] = null;
    this[_trackers] = new (IdentityMapOfint$_TapTracker()).new();
    src__gestures__multitap.DoubleTapGestureRecognizer.__proto__.new.call(this, {debugOwner: debugOwner, kind: kind});
    ;
  }).prototype = src__gestures__multitap.DoubleTapGestureRecognizer.prototype;
  dart.addTypeTests(src__gestures__multitap.DoubleTapGestureRecognizer);
  const onDoubleTap = Symbol("DoubleTapGestureRecognizer.onDoubleTap");
  dart.setMethodSignature(src__gestures__multitap.DoubleTapGestureRecognizer, () => ({
    __proto__: dart.getMethods(src__gestures__multitap.DoubleTapGestureRecognizer.__proto__),
    isPointerAllowed: dart.fnType(core.bool, [src__gestures__events.PointerEvent]),
    addAllowedPointer: dart.fnType(dart.void, [src__gestures__events.PointerEvent]),
    [_trackFirstTap]: dart.fnType(dart.void, [src__gestures__events.PointerEvent]),
    [_handleEvent$]: dart.fnType(dart.void, [src__gestures__events.PointerEvent]),
    acceptGesture: dart.fnType(dart.void, [core.int]),
    rejectGesture: dart.fnType(dart.void, [core.int]),
    [_reject]: dart.fnType(dart.void, [src__gestures__multitap._TapTracker]),
    [_reset$0]: dart.fnType(dart.void, []),
    [_registerFirstTap]: dart.fnType(dart.void, [src__gestures__multitap._TapTracker]),
    [_registerSecondTap]: dart.fnType(dart.void, [src__gestures__multitap._TapTracker]),
    [_clearTrackers]: dart.fnType(dart.void, []),
    [_freezeTracker]: dart.fnType(dart.void, [src__gestures__multitap._TapTracker]),
    [_startDoubleTapTimer]: dart.fnType(dart.void, []),
    [_stopDoubleTapTimer]: dart.fnType(dart.void, []),
    [_checkUp$]: dart.fnType(dart.void, [core.int])
  }));
  dart.setGetterSignature(src__gestures__multitap.DoubleTapGestureRecognizer, () => ({
    __proto__: dart.getGetters(src__gestures__multitap.DoubleTapGestureRecognizer.__proto__),
    debugDescription: core.String
  }));
  dart.setLibraryUri(src__gestures__multitap.DoubleTapGestureRecognizer, "package:flutter_web/src/gestures/multitap.dart");
  dart.setFieldSignature(src__gestures__multitap.DoubleTapGestureRecognizer, () => ({
    __proto__: dart.getFields(src__gestures__multitap.DoubleTapGestureRecognizer.__proto__),
    onDoubleTap: dart.fieldType(dart.fnType(dart.void, [])),
    [_doubleTapTimer]: dart.fieldType(async.Timer),
    [_firstTap]: dart.fieldType(src__gestures__multitap._TapTracker),
    [_trackers]: dart.finalFieldType(core.Map$(core.int, src__gestures__multitap._TapTracker))
  }));
  const _wonArena = dart.privateName(src__gestures__multitap, "_wonArena");
  const _finalPosition$ = dart.privateName(src__gestures__multitap, "_finalPosition");
  const _lastPosition$ = dart.privateName(src__gestures__multitap, "_lastPosition");
  const _dispatchLongTap = dart.privateName(src__gestures__multitap, "_dispatchLongTap");
  const _check = dart.privateName(src__gestures__multitap, "_check");
  const _dispatchCancel = dart.privateName(src__gestures__multitap, "_dispatchCancel");
  const _dispatchTap = dart.privateName(src__gestures__multitap, "_dispatchTap");
  src__gestures__multitap._TapGesture = class _TapGesture extends src__gestures__multitap._TapTracker {
    handleEvent(event) {
      if (!(event.pointer == this.pointer)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multitap.dart", 351, 12, "event.pointer == pointer");
      if (src__gestures__events.PointerMoveEvent.is(event)) {
        if (!dart.test(this.isWithinGlobalTolerance(event, src__gestures__constants.kTouchSlop)))
          this.cancel();
        else
          this[_lastPosition$] = src__gestures__recognizer.OffsetPair.fromEventPosition(event);
      } else if (src__gestures__events.PointerCancelEvent.is(event)) {
        this.cancel();
      } else if (src__gestures__events.PointerUpEvent.is(event)) {
        this.stopTrackingPointer(dart.bind(this, 'handleEvent'));
        this[_finalPosition$] = src__gestures__recognizer.OffsetPair.fromEventPosition(event);
        this[_check]();
      }
    }
    stopTrackingPointer(route) {
      let t16;
      t16 = this[_timer$0];
      t16 == null ? null : t16.cancel();
      this[_timer$0] = null;
      super.stopTrackingPointer(route);
    }
    accept() {
      this[_wonArena] = true;
      this[_check]();
    }
    reject() {
      this.stopTrackingPointer(dart.bind(this, 'handleEvent'));
      this.gestureRecognizer[_dispatchCancel](this.pointer);
    }
    cancel() {
      if (dart.test(this[_wonArena]))
        this.reject();
      else
        this.entry.resolve(src__gestures__arena.GestureDisposition.rejected);
    }
    [_check]() {
      if (dart.test(this[_wonArena]) && this[_finalPosition$] != null) this.gestureRecognizer[_dispatchTap](this.pointer, this[_finalPosition$]);
    }
  };
  (src__gestures__multitap._TapGesture.new = function(opts) {
    let gestureRecognizer = opts && 'gestureRecognizer' in opts ? opts.gestureRecognizer : null;
    let event = opts && 'event' in opts ? opts.event : null;
    let longTapDelay = opts && 'longTapDelay' in opts ? opts.longTapDelay : null;
    this[_wonArena] = false;
    this[_timer$0] = null;
    this[_finalPosition$] = null;
    this.gestureRecognizer = gestureRecognizer;
    this[_lastPosition$] = src__gestures__recognizer.OffsetPair.fromEventPosition(event);
    src__gestures__multitap._TapGesture.__proto__.new.call(this, {event: src__gestures__events.PointerDownEvent._check(event), entry: src__gestures__binding.GestureBinding.instance.gestureArena.add(event.pointer, gestureRecognizer), doubleTapMinTime: src__gestures__constants.kDoubleTapMinTime});
    this.startTrackingPointer(dart.bind(this, 'handleEvent'), event.transform);
    if (dart.test(longTapDelay['>'](core.Duration.zero))) {
      this[_timer$0] = async.Timer.new(longTapDelay, dart.fn(() => {
        this[_timer$0] = null;
        this.gestureRecognizer[_dispatchLongTap](event.pointer, this[_lastPosition$]);
      }, VoidToNull()));
    }
  }).prototype = src__gestures__multitap._TapGesture.prototype;
  dart.addTypeTests(src__gestures__multitap._TapGesture);
  dart.setMethodSignature(src__gestures__multitap._TapGesture, () => ({
    __proto__: dart.getMethods(src__gestures__multitap._TapGesture.__proto__),
    handleEvent: dart.fnType(dart.void, [src__gestures__events.PointerEvent]),
    accept: dart.fnType(dart.void, []),
    reject: dart.fnType(dart.void, []),
    cancel: dart.fnType(dart.void, []),
    [_check]: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(src__gestures__multitap._TapGesture, "package:flutter_web/src/gestures/multitap.dart");
  dart.setFieldSignature(src__gestures__multitap._TapGesture, () => ({
    __proto__: dart.getFields(src__gestures__multitap._TapGesture.__proto__),
    gestureRecognizer: dart.finalFieldType(src__gestures__multitap.MultiTapGestureRecognizer),
    [_wonArena]: dart.fieldType(core.bool),
    [_timer$0]: dart.fieldType(async.Timer),
    [_lastPosition$]: dart.fieldType(src__gestures__recognizer.OffsetPair),
    [_finalPosition$]: dart.fieldType(src__gestures__recognizer.OffsetPair)
  }));
  const _gestureMap = dart.privateName(src__gestures__multitap, "_gestureMap");
  src__gestures__multitap.MultiTapGestureRecognizer = class MultiTapGestureRecognizer extends src__gestures__recognizer.GestureRecognizer {
    get onTapDown() {
      return this[onTapDown$];
    }
    set onTapDown(value) {
      this[onTapDown$] = value;
    }
    get onTapUp() {
      return this[onTapUp$];
    }
    set onTapUp(value) {
      this[onTapUp$] = value;
    }
    get onTap() {
      return this[onTap$];
    }
    set onTap(value) {
      this[onTap$] = value;
    }
    get onTapCancel() {
      return this[onTapCancel$];
    }
    set onTapCancel(value) {
      this[onTapCancel$] = value;
    }
    get longTapDelay() {
      return this[longTapDelay$];
    }
    set longTapDelay(value) {
      this[longTapDelay$] = value;
    }
    get onLongTapDown() {
      return this[onLongTapDown];
    }
    set onLongTapDown(value) {
      this[onLongTapDown] = value;
    }
    addAllowedPointer(event) {
      if (!!dart.test(this[_gestureMap][$containsKey](event.pointer))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multitap.dart", 444, 12, "!_gestureMap.containsKey(event.pointer)");
      this[_gestureMap][$_set](event.pointer, new src__gestures__multitap._TapGesture.new({gestureRecognizer: this, event: event, longTapDelay: this.longTapDelay}));
      if (this.onTapDown != null) this.invokeCallback(dart.void, "onTapDown", dart.fn(() => {
        this.onTapDown(event.pointer, new src__gestures__tap.TapDownDetails.new({globalPosition: event.position, localPosition: event.localPosition, kind: event.kind}));
      }, VoidToNull()));
    }
    acceptGesture(pointer) {
      if (!dart.test(this[_gestureMap][$containsKey](pointer))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multitap.dart", 462, 12, "_gestureMap.containsKey(pointer)");
      this[_gestureMap][$_get](pointer).accept();
    }
    rejectGesture(pointer) {
      if (!dart.test(this[_gestureMap][$containsKey](pointer))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multitap.dart", 468, 12, "_gestureMap.containsKey(pointer)");
      this[_gestureMap][$_get](pointer).reject();
      if (!!dart.test(this[_gestureMap][$containsKey](pointer))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multitap.dart", 470, 12, "!_gestureMap.containsKey(pointer)");
    }
    [_dispatchCancel](pointer) {
      if (!dart.test(this[_gestureMap][$containsKey](pointer))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multitap.dart", 474, 12, "_gestureMap.containsKey(pointer)");
      this[_gestureMap][$remove](pointer);
      if (this.onTapCancel != null) this.invokeCallback(dart.void, "onTapCancel", dart.fn(() => this.onTapCancel(pointer), VoidTovoid()));
    }
    [_dispatchTap](pointer, position) {
      if (!dart.test(this[_gestureMap][$containsKey](pointer))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multitap.dart", 481, 12, "_gestureMap.containsKey(pointer)");
      this[_gestureMap][$remove](pointer);
      if (this.onTapUp != null) this.invokeCallback(dart.void, "onTapUp", dart.fn(() => {
        this.onTapUp(pointer, new src__gestures__tap.TapUpDetails.new({localPosition: position.local, globalPosition: position.global}));
      }, VoidToNull()));
      if (this.onTap != null) this.invokeCallback(dart.void, "onTap", dart.fn(() => this.onTap(pointer), VoidTovoid()));
    }
    [_dispatchLongTap](pointer, lastPosition) {
      if (!dart.test(this[_gestureMap][$containsKey](pointer))) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multitap.dart", 495, 12, "_gestureMap.containsKey(pointer)");
      if (this.onLongTapDown != null) this.invokeCallback(dart.void, "onLongTapDown", dart.fn(() => {
        this.onLongTapDown(pointer, new src__gestures__tap.TapDownDetails.new({globalPosition: lastPosition.global, localPosition: lastPosition.local, kind: this.getKindForPointer(pointer)}));
      }, VoidToNull()));
    }
    dispose() {
      let localGestures = ListOf_TapGesture().from(this[_gestureMap][$values]);
      for (let gesture of localGestures)
        gesture.cancel();
      if (!dart.test(this[_gestureMap][$isEmpty])) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/multitap.dart", 515, 12, "_gestureMap.isEmpty");
      super.dispose();
    }
    get debugDescription() {
      return "multitap";
    }
  };
  (src__gestures__multitap.MultiTapGestureRecognizer.new = function(opts) {
    let longTapDelay = opts && 'longTapDelay' in opts ? opts.longTapDelay : core.Duration.zero;
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    let kind = opts && 'kind' in opts ? opts.kind : null;
    this[onTapDown$] = null;
    this[onTapUp$] = null;
    this[onTap$] = null;
    this[onTapCancel$] = null;
    this[onLongTapDown] = null;
    this[_gestureMap] = new (IdentityMapOfint$_TapGesture()).new();
    this[longTapDelay$] = longTapDelay;
    src__gestures__multitap.MultiTapGestureRecognizer.__proto__.new.call(this, {debugOwner: debugOwner, kind: kind});
    ;
  }).prototype = src__gestures__multitap.MultiTapGestureRecognizer.prototype;
  dart.addTypeTests(src__gestures__multitap.MultiTapGestureRecognizer);
  const onTapDown$ = Symbol("MultiTapGestureRecognizer.onTapDown");
  const onTapUp$ = Symbol("MultiTapGestureRecognizer.onTapUp");
  const onTap$ = Symbol("MultiTapGestureRecognizer.onTap");
  const onTapCancel$ = Symbol("MultiTapGestureRecognizer.onTapCancel");
  const longTapDelay$ = Symbol("MultiTapGestureRecognizer.longTapDelay");
  const onLongTapDown = Symbol("MultiTapGestureRecognizer.onLongTapDown");
  dart.setMethodSignature(src__gestures__multitap.MultiTapGestureRecognizer, () => ({
    __proto__: dart.getMethods(src__gestures__multitap.MultiTapGestureRecognizer.__proto__),
    addAllowedPointer: dart.fnType(dart.void, [src__gestures__events.PointerEvent]),
    acceptGesture: dart.fnType(dart.void, [core.int]),
    rejectGesture: dart.fnType(dart.void, [core.int]),
    [_dispatchCancel]: dart.fnType(dart.void, [core.int]),
    [_dispatchTap]: dart.fnType(dart.void, [core.int, src__gestures__recognizer.OffsetPair]),
    [_dispatchLongTap]: dart.fnType(dart.void, [core.int, src__gestures__recognizer.OffsetPair])
  }));
  dart.setGetterSignature(src__gestures__multitap.MultiTapGestureRecognizer, () => ({
    __proto__: dart.getGetters(src__gestures__multitap.MultiTapGestureRecognizer.__proto__),
    debugDescription: core.String
  }));
  dart.setLibraryUri(src__gestures__multitap.MultiTapGestureRecognizer, "package:flutter_web/src/gestures/multitap.dart");
  dart.setFieldSignature(src__gestures__multitap.MultiTapGestureRecognizer, () => ({
    __proto__: dart.getFields(src__gestures__multitap.MultiTapGestureRecognizer.__proto__),
    onTapDown: dart.fieldType(dart.fnType(dart.void, [core.int, src__gestures__tap.TapDownDetails])),
    onTapUp: dart.fieldType(dart.fnType(dart.void, [core.int, src__gestures__tap.TapUpDetails])),
    onTap: dart.fieldType(dart.fnType(dart.void, [core.int])),
    onTapCancel: dart.fieldType(dart.fnType(dart.void, [core.int])),
    longTapDelay: dart.fieldType(core.Duration),
    onLongTapDown: dart.fieldType(dart.fnType(dart.void, [core.int, src__gestures__tap.TapDownDetails])),
    [_gestureMap]: dart.finalFieldType(core.Map$(core.int, src__gestures__multitap._TapGesture))
  }));
  const _accessibilityFeatures = dart.privateName(src__semantics__binding, "_accessibilityFeatures");
  src__semantics__binding.SemanticsBinding = class SemanticsBinding extends src__foundation__binding.BindingBase {
    static get instance() {
      return src__semantics__binding.SemanticsBinding._instance;
    }
  };
  src__semantics__binding.SemanticsBinding[dart.mixinOn] = BindingBase => class SemanticsBinding extends BindingBase {
    initInstances() {
      super.initInstances();
      src__semantics__binding.SemanticsBinding._instance = this;
      this[_accessibilityFeatures] = ui$.window.accessibilityFeatures;
    }
    handleAccessibilityFeaturesChanged() {
      this[_accessibilityFeatures] = ui$.window.accessibilityFeatures;
    }
    get accessibilityFeatures() {
      return this[_accessibilityFeatures];
    }
    get disableAnimations() {
      let value = this[_accessibilityFeatures].disableAnimations;
      if (!dart.test(dart.fn(() => {
        if (src__semantics__debug.debugSemanticsDisableAnimations != null) value = src__semantics__debug.debugSemanticsDisableAnimations;
        return true;
      }, VoidTobool())())) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/semantics/binding.dart", 51, 12, "() {\n      if (debugSemanticsDisableAnimations != null)\n        value = debugSemanticsDisableAnimations;\n      return true;\n    }()");
      return value;
    }
  };
  (src__semantics__binding.SemanticsBinding[dart.mixinNew] = function() {
    this[_accessibilityFeatures] = null;
  }).prototype = src__semantics__binding.SemanticsBinding.prototype;
  dart.addTypeTests(src__semantics__binding.SemanticsBinding);
  src__semantics__binding.SemanticsBinding[dart.implements] = () => [src__foundation__binding.BindingBase];
  dart.setMethodSignature(src__semantics__binding.SemanticsBinding, () => ({
    __proto__: dart.getMethods(src__semantics__binding.SemanticsBinding.__proto__),
    handleAccessibilityFeaturesChanged: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(src__semantics__binding.SemanticsBinding, () => ({
    __proto__: dart.getGetters(src__semantics__binding.SemanticsBinding.__proto__),
    accessibilityFeatures: ui$.AccessibilityFeatures,
    disableAnimations: core.bool
  }));
  dart.setLibraryUri(src__semantics__binding.SemanticsBinding, "package:flutter_web/src/semantics/binding.dart");
  dart.setFieldSignature(src__semantics__binding.SemanticsBinding, () => ({
    __proto__: dart.getFields(src__semantics__binding.SemanticsBinding.__proto__),
    [_accessibilityFeatures]: dart.fieldType(ui$.AccessibilityFeatures)
  }));
  dart.defineLazy(src__semantics__binding.SemanticsBinding, {
    /*src__semantics__binding.SemanticsBinding._instance*/get _instance() {
      return null;
    },
    set _instance(_) {}
  });
  dart.defineLazy(src__semantics__debug, {
    /*src__semantics__debug.debugSemanticsDisableAnimations*/get debugSemanticsDisableAnimations() {
      return null;
    },
    set debugSemanticsDisableAnimations(_) {}
  });
  src__painting__fractional_offset.FractionalOffset = class FractionalOffset extends src__painting__alignment.Alignment {
    static fromOffsetAndSize(offset, size) {
      if (!(size != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/fractional_offset.dart", 67, 12, "size != null");
      if (!(offset != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/fractional_offset.dart", 68, 12, "offset != null");
      return new src__painting__fractional_offset.FractionalOffset.new(dart.notNull(offset.dx) / dart.notNull(size.width), dart.notNull(offset.dy) / dart.notNull(size.height));
    }
    static fromOffsetAndRect(offset, rect) {
      return src__painting__fractional_offset.FractionalOffset.fromOffsetAndSize(offset['-'](rect.topLeft), rect.size);
    }
    get dx() {
      return (dart.notNull(this.x) + 1.0) / 2.0;
    }
    get dy() {
      return (dart.notNull(this.y) + 1.0) / 2.0;
    }
    ['-'](other) {
      if (!src__painting__fractional_offset.FractionalOffset.is(other)) return super['-'](other);
      let typedOther = src__painting__fractional_offset.FractionalOffset._check(other);
      return new src__painting__fractional_offset.FractionalOffset.new(dart.notNull(this.dx) - dart.notNull(typedOther.dx), dart.notNull(this.dy) - dart.notNull(typedOther.dy));
    }
    ['+'](other) {
      if (!src__painting__fractional_offset.FractionalOffset.is(other)) return super['+'](other);
      let typedOther = src__painting__fractional_offset.FractionalOffset._check(other);
      return new src__painting__fractional_offset.FractionalOffset.new(dart.notNull(this.dx) + dart.notNull(typedOther.dx), dart.notNull(this.dy) + dart.notNull(typedOther.dy));
    }
    _negate() {
      return new src__painting__fractional_offset.FractionalOffset.new(-dart.notNull(this.dx), -dart.notNull(this.dy));
    }
    ['*'](other) {
      return new src__painting__fractional_offset.FractionalOffset.new(dart.notNull(this.dx) * dart.notNull(other), dart.notNull(this.dy) * dart.notNull(other));
    }
    ['/'](other) {
      return new src__painting__fractional_offset.FractionalOffset.new(dart.notNull(this.dx) / dart.notNull(other), dart.notNull(this.dy) / dart.notNull(other));
    }
    ['~/'](other) {
      return new src__painting__fractional_offset.FractionalOffset.new((dart.notNull(this.dx) / dart.notNull(other))[$truncate]()[$toDouble](), (dart.notNull(this.dy) / dart.notNull(other))[$truncate]()[$toDouble]());
    }
    ['%'](other) {
      return new src__painting__fractional_offset.FractionalOffset.new(this.dx[$modulo](other), this.dy[$modulo](other));
    }
    static lerp(a, b, t) {
      if (!(t != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/fractional_offset.dart", 181, 12, "t != null");
      if (a == null && b == null) return null;
      if (a == null) return new src__painting__fractional_offset.FractionalOffset.new(ui$.lerpDouble(0.5, b.dx, t), ui$.lerpDouble(0.5, b.dy, t));
      if (b == null) return new src__painting__fractional_offset.FractionalOffset.new(ui$.lerpDouble(a.dx, 0.5, t), ui$.lerpDouble(a.dy, 0.5, t));
      return new src__painting__fractional_offset.FractionalOffset.new(ui$.lerpDouble(a.dx, b.dx, t), ui$.lerpDouble(a.dy, b.dy, t));
    }
    toString() {
      return "FractionalOffset(" + this.dx[$toStringAsFixed](1) + ", " + this.dy[$toStringAsFixed](1) + ")";
    }
  };
  (src__painting__fractional_offset.FractionalOffset.new = function(dx, dy) {
    if (!(dx != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/fractional_offset.dart", 58, 16, "dx != null");
    if (!(dy != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/fractional_offset.dart", 59, 16, "dy != null");
    src__painting__fractional_offset.FractionalOffset.__proto__.new.call(this, dart.notNull(dx) * 2.0 - 1.0, dart.notNull(dy) * 2.0 - 1.0);
    ;
  }).prototype = src__painting__fractional_offset.FractionalOffset.prototype;
  dart.addTypeTests(src__painting__fractional_offset.FractionalOffset);
  dart.setMethodSignature(src__painting__fractional_offset.FractionalOffset, () => ({
    __proto__: dart.getMethods(src__painting__fractional_offset.FractionalOffset.__proto__),
    _negate: dart.fnType(src__painting__fractional_offset.FractionalOffset, []),
    '*': dart.fnType(src__painting__fractional_offset.FractionalOffset, [core.double]),
    '/': dart.fnType(src__painting__fractional_offset.FractionalOffset, [core.double]),
    '~/': dart.fnType(src__painting__fractional_offset.FractionalOffset, [core.double]),
    '%': dart.fnType(src__painting__fractional_offset.FractionalOffset, [core.double])
  }));
  dart.setGetterSignature(src__painting__fractional_offset.FractionalOffset, () => ({
    __proto__: dart.getGetters(src__painting__fractional_offset.FractionalOffset.__proto__),
    dx: core.double,
    dy: core.double
  }));
  dart.setLibraryUri(src__painting__fractional_offset.FractionalOffset, "package:flutter_web/src/painting/fractional_offset.dart");
  dart.defineExtensionMethods(src__painting__fractional_offset.FractionalOffset, ['toString']);
  dart.defineLazy(src__painting__fractional_offset.FractionalOffset, {
    /*src__painting__fractional_offset.FractionalOffset.topLeft*/get topLeft() {
      return dart.const(new src__painting__fractional_offset.FractionalOffset.new(0.0, 0.0));
    },
    /*src__painting__fractional_offset.FractionalOffset.topCenter*/get topCenter() {
      return dart.const(new src__painting__fractional_offset.FractionalOffset.new(0.5, 0.0));
    },
    /*src__painting__fractional_offset.FractionalOffset.topRight*/get topRight() {
      return dart.const(new src__painting__fractional_offset.FractionalOffset.new(1.0, 0.0));
    },
    /*src__painting__fractional_offset.FractionalOffset.centerLeft*/get centerLeft() {
      return dart.const(new src__painting__fractional_offset.FractionalOffset.new(0.0, 0.5));
    },
    /*src__painting__fractional_offset.FractionalOffset.center*/get center() {
      return dart.const(new src__painting__fractional_offset.FractionalOffset.new(0.5, 0.5));
    },
    /*src__painting__fractional_offset.FractionalOffset.centerRight*/get centerRight() {
      return dart.const(new src__painting__fractional_offset.FractionalOffset.new(1.0, 0.5));
    },
    /*src__painting__fractional_offset.FractionalOffset.bottomLeft*/get bottomLeft() {
      return dart.const(new src__painting__fractional_offset.FractionalOffset.new(0.0, 1.0));
    },
    /*src__painting__fractional_offset.FractionalOffset.bottomCenter*/get bottomCenter() {
      return dart.const(new src__painting__fractional_offset.FractionalOffset.new(0.5, 1.0));
    },
    /*src__painting__fractional_offset.FractionalOffset.bottomRight*/get bottomRight() {
      return dart.const(new src__painting__fractional_offset.FractionalOffset.new(1.0, 1.0));
    }
  });
  src__services__haptic_feedback.HapticFeedback = class HapticFeedback extends core.Object {
    static vibrate() {
      return async.async(dart.void, function* vibrate() {
        yield src__services__system_channels.SystemChannels.platform.invokeMethod(dart.dynamic, "HapticFeedback.vibrate");
      });
    }
    static lightImpact() {
      return async.async(dart.void, function* lightImpact() {
        yield src__services__system_channels.SystemChannels.platform.invokeMethod(dart.dynamic, "HapticFeedback.vibrate", "HapticFeedbackType.lightImpact");
      });
    }
    static mediumImpact() {
      return async.async(dart.void, function* mediumImpact() {
        yield src__services__system_channels.SystemChannels.platform.invokeMethod(dart.dynamic, "HapticFeedback.vibrate", "HapticFeedbackType.mediumImpact");
      });
    }
    static heavyImpact() {
      return async.async(dart.void, function* heavyImpact() {
        yield src__services__system_channels.SystemChannels.platform.invokeMethod(dart.dynamic, "HapticFeedback.vibrate", "HapticFeedbackType.heavyImpact");
      });
    }
    static selectionClick() {
      return async.async(dart.void, function* selectionClick() {
        yield src__services__system_channels.SystemChannels.platform.invokeMethod(dart.dynamic, "HapticFeedback.vibrate", "HapticFeedbackType.selectionClick");
      });
    }
  };
  (src__services__haptic_feedback.HapticFeedback.__ = function() {
    ;
  }).prototype = src__services__haptic_feedback.HapticFeedback.prototype;
  dart.addTypeTests(src__services__haptic_feedback.HapticFeedback);
  dart.setLibraryUri(src__services__haptic_feedback.HapticFeedback, "package:flutter_web/src/services/haptic_feedback.dart");
  let const$21;
  src__painting__box_shadow.BoxShadow = class BoxShadow extends ui$.Shadow {
    get spreadRadius() {
      return this[spreadRadius$];
    }
    set spreadRadius(value) {
      super.spreadRadius = value;
    }
    toPaint() {
      let t16;
      let result = (t16 = new ui$.Paint.new(), t16.color = this.color, t16.maskFilter = new ui$.MaskFilter.blur(ui$.BlurStyle.normal, this.blurSigma), t16);
      if (!dart.test(dart.fn(() => {
        if (dart.test(src__painting__debug.debugDisableShadows)) result.maskFilter = null;
        return true;
      }, VoidTobool())())) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/box_shadow.dart", 54, 12, "() {\n      if (debugDisableShadows)\n        result.maskFilter = null;\n      return true;\n    }()");
      return result;
    }
    scale(factor) {
      return new src__painting__box_shadow.BoxShadow.new({color: this.color, offset: this.offset['*'](factor), blurRadius: dart.notNull(this.blurRadius) * dart.notNull(factor), spreadRadius: dart.notNull(this.spreadRadius) * dart.notNull(factor)});
    }
    static lerp(a, b, t) {
      if (!(t != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/box_shadow.dart", 81, 12, "t != null");
      if (a == null && b == null) return null;
      if (a == null) return b.scale(t);
      if (b == null) return a.scale(1.0 - dart.notNull(t));
      return new src__painting__box_shadow.BoxShadow.new({color: ui$.Color.lerp(a.color, b.color, t), offset: ui$.Offset.lerp(a.offset, b.offset, t), blurRadius: ui$.lerpDouble(a.blurRadius, b.blurRadius, t), spreadRadius: ui$.lerpDouble(a.spreadRadius, b.spreadRadius, t)});
    }
    static lerpList(a, b, t) {
      if (!(t != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/painting/box_shadow.dart", 102, 12, "t != null");
      if (a == null && b == null) return null;
      a == null ? a = JSArrayOfBoxShadow().of([]) : null;
      b == null ? b = JSArrayOfBoxShadow().of([]) : null;
      let result = JSArrayOfBoxShadow().of([]);
      let commonLength = math.min(core.int, a[$length], b[$length]);
      for (let i = 0; i < commonLength; i = i + 1)
        result[$add](src__painting__box_shadow.BoxShadow.lerp(a[$_get](i), b[$_get](i), t));
      for (let i = commonLength; i < dart.notNull(a[$length]); i = i + 1)
        result[$add](a[$_get](i).scale(1.0 - dart.notNull(t)));
      for (let i = commonLength; i < dart.notNull(b[$length]); i = i + 1)
        result[$add](b[$_get](i).scale(t));
      return result;
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!dart.equals(this[$runtimeType], dart.runtimeType(other))) return false;
      let typedOther = src__painting__box_shadow.BoxShadow._check(other);
      return dart.equals(this.color, typedOther.color) && dart.equals(this.offset, typedOther.offset) && this.blurRadius == typedOther.blurRadius && this.spreadRadius == typedOther.spreadRadius;
    }
    get hashCode() {
      return ui$.hashValues(this.color, this.offset, this.blurRadius, this.spreadRadius);
    }
    toString() {
      return "BoxShadow(" + dart.str(this.color) + ", " + dart.str(this.offset) + ", " + dart.str(src__foundation__debug.debugFormatDouble(this.blurRadius)) + ", " + dart.str(src__foundation__debug.debugFormatDouble(this.spreadRadius)) + ")";
    }
  };
  (src__painting__box_shadow.BoxShadow.new = function(opts) {
    let color = opts && 'color' in opts ? opts.color : const$21 || (const$21 = dart.const(new ui$.Color.new(4278190080)));
    let offset = opts && 'offset' in opts ? opts.offset : ui$.Offset.zero;
    let blurRadius = opts && 'blurRadius' in opts ? opts.blurRadius : 0.0;
    let spreadRadius = opts && 'spreadRadius' in opts ? opts.spreadRadius : 0.0;
    this[spreadRadius$] = spreadRadius;
    src__painting__box_shadow.BoxShadow.__proto__.new.call(this, {color: color, offset: offset, blurRadius: blurRadius});
    ;
  }).prototype = src__painting__box_shadow.BoxShadow.prototype;
  dart.addTypeTests(src__painting__box_shadow.BoxShadow);
  const spreadRadius$ = Symbol("BoxShadow.spreadRadius");
  dart.setMethodSignature(src__painting__box_shadow.BoxShadow, () => ({
    __proto__: dart.getMethods(src__painting__box_shadow.BoxShadow.__proto__),
    scale: dart.fnType(src__painting__box_shadow.BoxShadow, [core.double])
  }));
  dart.setLibraryUri(src__painting__box_shadow.BoxShadow, "package:flutter_web/src/painting/box_shadow.dart");
  dart.setFieldSignature(src__painting__box_shadow.BoxShadow, () => ({
    __proto__: dart.getFields(src__painting__box_shadow.BoxShadow.__proto__),
    spreadRadius: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(src__painting__box_shadow.BoxShadow, ['_equals', 'toString']);
  dart.defineExtensionAccessors(src__painting__box_shadow.BoxShadow, ['hashCode']);
  const _name$10 = dart.privateName(src__painting__box_fit, "_name");
  src__painting__box_fit.BoxFit = class BoxFit extends core.Object {
    toString() {
      return this[_name$10];
    }
  };
  (src__painting__box_fit.BoxFit.new = function(index, _name) {
    this.index = index;
    this[_name$10] = _name;
    ;
  }).prototype = src__painting__box_fit.BoxFit.prototype;
  dart.addTypeTests(src__painting__box_fit.BoxFit);
  dart.setLibraryUri(src__painting__box_fit.BoxFit, "package:flutter_web/src/painting/box_fit.dart");
  dart.setFieldSignature(src__painting__box_fit.BoxFit, () => ({
    __proto__: dart.getFields(src__painting__box_fit.BoxFit.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$10]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(src__painting__box_fit.BoxFit, ['toString']);
  src__painting__box_fit.BoxFit.fill = dart.const(new src__painting__box_fit.BoxFit.new(0, "BoxFit.fill"));
  src__painting__box_fit.BoxFit.contain = dart.const(new src__painting__box_fit.BoxFit.new(1, "BoxFit.contain"));
  src__painting__box_fit.BoxFit.cover = dart.const(new src__painting__box_fit.BoxFit.new(2, "BoxFit.cover"));
  src__painting__box_fit.BoxFit.fitWidth = dart.const(new src__painting__box_fit.BoxFit.new(3, "BoxFit.fitWidth"));
  src__painting__box_fit.BoxFit.fitHeight = dart.const(new src__painting__box_fit.BoxFit.new(4, "BoxFit.fitHeight"));
  src__painting__box_fit.BoxFit.none = dart.const(new src__painting__box_fit.BoxFit.new(5, "BoxFit.none"));
  src__painting__box_fit.BoxFit.scaleDown = dart.const(new src__painting__box_fit.BoxFit.new(6, "BoxFit.scaleDown"));
  src__painting__box_fit.BoxFit.values = dart.constList([src__painting__box_fit.BoxFit.fill, src__painting__box_fit.BoxFit.contain, src__painting__box_fit.BoxFit.cover, src__painting__box_fit.BoxFit.fitWidth, src__painting__box_fit.BoxFit.fitHeight, src__painting__box_fit.BoxFit.none, src__painting__box_fit.BoxFit.scaleDown], src__painting__box_fit.BoxFit);
  src__painting__box_fit.FittedSizes = class FittedSizes extends core.Object {
    get source() {
      return this[source$0];
    }
    set source(value) {
      super.source = value;
    }
    get destination() {
      return this[destination$];
    }
    set destination(value) {
      super.destination = value;
    }
  };
  (src__painting__box_fit.FittedSizes.new = function(source, destination) {
    this[source$0] = source;
    this[destination$] = destination;
    ;
  }).prototype = src__painting__box_fit.FittedSizes.prototype;
  dart.addTypeTests(src__painting__box_fit.FittedSizes);
  const source$0 = Symbol("FittedSizes.source");
  const destination$ = Symbol("FittedSizes.destination");
  dart.setLibraryUri(src__painting__box_fit.FittedSizes, "package:flutter_web/src/painting/box_fit.dart");
  dart.setFieldSignature(src__painting__box_fit.FittedSizes, () => ({
    __proto__: dart.getFields(src__painting__box_fit.FittedSizes.__proto__),
    source: dart.finalFieldType(ui$.Size),
    destination: dart.finalFieldType(ui$.Size)
  }));
  let const$22;
  src__painting__box_fit.applyBoxFit = function(fit, inputSize, outputSize) {
    if (dart.notNull(inputSize.height) <= 0.0 || dart.notNull(inputSize.width) <= 0.0 || dart.notNull(outputSize.height) <= 0.0 || dart.notNull(outputSize.width) <= 0.0) return const$22 || (const$22 = dart.const(new src__painting__box_fit.FittedSizes.new(ui$.Size.zero, ui$.Size.zero)));
    let sourceSize = null;
    let destinationSize = null;
    switch (fit) {
      case src__painting__box_fit.BoxFit.fill:
      {
        sourceSize = inputSize;
        destinationSize = outputSize;
        break;
      }
      case src__painting__box_fit.BoxFit.contain:
      {
        sourceSize = inputSize;
        if (dart.notNull(outputSize.width) / dart.notNull(outputSize.height) > dart.notNull(sourceSize.width) / dart.notNull(sourceSize.height))
          destinationSize = new ui$.Size.new(dart.notNull(sourceSize.width) * dart.notNull(outputSize.height) / dart.notNull(sourceSize.height), outputSize.height);
        else
          destinationSize = new ui$.Size.new(outputSize.width, dart.notNull(sourceSize.height) * dart.notNull(outputSize.width) / dart.notNull(sourceSize.width));
        break;
      }
      case src__painting__box_fit.BoxFit.cover:
      {
        if (dart.notNull(outputSize.width) / dart.notNull(outputSize.height) > dart.notNull(inputSize.width) / dart.notNull(inputSize.height)) {
          sourceSize = new ui$.Size.new(inputSize.width, dart.notNull(inputSize.width) * dart.notNull(outputSize.height) / dart.notNull(outputSize.width));
        } else {
          sourceSize = new ui$.Size.new(dart.notNull(inputSize.height) * dart.notNull(outputSize.width) / dart.notNull(outputSize.height), inputSize.height);
        }
        destinationSize = outputSize;
        break;
      }
      case src__painting__box_fit.BoxFit.fitWidth:
      {
        sourceSize = new ui$.Size.new(inputSize.width, dart.notNull(inputSize.width) * dart.notNull(outputSize.height) / dart.notNull(outputSize.width));
        destinationSize = new ui$.Size.new(outputSize.width, dart.notNull(sourceSize.height) * dart.notNull(outputSize.width) / dart.notNull(sourceSize.width));
        break;
      }
      case src__painting__box_fit.BoxFit.fitHeight:
      {
        sourceSize = new ui$.Size.new(dart.notNull(inputSize.height) * dart.notNull(outputSize.width) / dart.notNull(outputSize.height), inputSize.height);
        destinationSize = new ui$.Size.new(dart.notNull(sourceSize.width) * dart.notNull(outputSize.height) / dart.notNull(sourceSize.height), outputSize.height);
        break;
      }
      case src__painting__box_fit.BoxFit.none:
      {
        sourceSize = new ui$.Size.new(math.min(core.double, inputSize.width, outputSize.width), math.min(core.double, inputSize.height, outputSize.height));
        destinationSize = sourceSize;
        break;
      }
      case src__painting__box_fit.BoxFit.scaleDown:
      {
        sourceSize = inputSize;
        destinationSize = inputSize;
        let aspectRatio = dart.notNull(inputSize.width) / dart.notNull(inputSize.height);
        if (dart.notNull(destinationSize.height) > dart.notNull(outputSize.height)) destinationSize = new ui$.Size.new(dart.notNull(outputSize.height) * aspectRatio, outputSize.height);
        if (dart.notNull(destinationSize.width) > dart.notNull(outputSize.width)) destinationSize = new ui$.Size.new(outputSize.width, dart.notNull(outputSize.width) / aspectRatio);
        break;
      }
    }
    return new src__painting__box_fit.FittedSizes.new(sourceSize, destinationSize);
  };
  const _name$11 = dart.privateName(src__gestures__monodrag, "_name");
  src__gestures__monodrag._DragState = class _DragState extends core.Object {
    toString() {
      return this[_name$11];
    }
  };
  (src__gestures__monodrag._DragState.new = function(index, _name) {
    this.index = index;
    this[_name$11] = _name;
    ;
  }).prototype = src__gestures__monodrag._DragState.prototype;
  dart.addTypeTests(src__gestures__monodrag._DragState);
  dart.setLibraryUri(src__gestures__monodrag._DragState, "package:flutter_web/src/gestures/monodrag.dart");
  dart.setFieldSignature(src__gestures__monodrag._DragState, () => ({
    __proto__: dart.getFields(src__gestures__monodrag._DragState.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$11]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(src__gestures__monodrag._DragState, ['toString']);
  src__gestures__monodrag._DragState.ready = dart.const(new src__gestures__monodrag._DragState.new(0, "_DragState.ready"));
  src__gestures__monodrag._DragState.possible = dart.const(new src__gestures__monodrag._DragState.new(1, "_DragState.possible"));
  src__gestures__monodrag._DragState.accepted = dart.const(new src__gestures__monodrag._DragState.new(2, "_DragState.accepted"));
  src__gestures__monodrag._DragState.values = dart.constList([src__gestures__monodrag._DragState.ready, src__gestures__monodrag._DragState.possible, src__gestures__monodrag._DragState.accepted], src__gestures__monodrag._DragState);
  const _state$1 = dart.privateName(src__gestures__monodrag, "_state");
  const _initialPosition = dart.privateName(src__gestures__monodrag, "_initialPosition");
  const _pendingDragOffset = dart.privateName(src__gestures__monodrag, "_pendingDragOffset");
  const _lastPendingEventTimestamp$ = dart.privateName(src__gestures__monodrag, "_lastPendingEventTimestamp");
  const _initialButtons$0 = dart.privateName(src__gestures__monodrag, "_initialButtons");
  const _lastTransform = dart.privateName(src__gestures__monodrag, "_lastTransform");
  const _globalDistanceMoved = dart.privateName(src__gestures__monodrag, "_globalDistanceMoved");
  const _velocityTrackers$ = dart.privateName(src__gestures__monodrag, "_velocityTrackers");
  const _checkDown$ = dart.privateName(src__gestures__monodrag, "_checkDown");
  const _getDeltaForDetails = dart.privateName(src__gestures__monodrag, "_getDeltaForDetails");
  const _getPrimaryValueFromOffset = dart.privateName(src__gestures__monodrag, "_getPrimaryValueFromOffset");
  const _checkUpdate = dart.privateName(src__gestures__monodrag, "_checkUpdate");
  const _hasSufficientGlobalDistanceToAccept = dart.privateName(src__gestures__monodrag, "_hasSufficientGlobalDistanceToAccept");
  const _checkStart = dart.privateName(src__gestures__monodrag, "_checkStart");
  const _checkCancel$ = dart.privateName(src__gestures__monodrag, "_checkCancel");
  const _checkEnd = dart.privateName(src__gestures__monodrag, "_checkEnd");
  src__gestures__monodrag.DragGestureRecognizer = class DragGestureRecognizer extends src__gestures__recognizer.OneSequenceGestureRecognizer {
    get dragStartBehavior() {
      return this[dragStartBehavior$];
    }
    set dragStartBehavior(value) {
      this[dragStartBehavior$] = value;
    }
    get onDown() {
      return this[onDown];
    }
    set onDown(value) {
      this[onDown] = value;
    }
    get onStart() {
      return this[onStart$0];
    }
    set onStart(value) {
      this[onStart$0] = value;
    }
    get onUpdate() {
      return this[onUpdate$0];
    }
    set onUpdate(value) {
      this[onUpdate$0] = value;
    }
    get onEnd() {
      return this[onEnd$0];
    }
    set onEnd(value) {
      this[onEnd$0] = value;
    }
    get onCancel() {
      return this[onCancel];
    }
    set onCancel(value) {
      this[onCancel] = value;
    }
    get minFlingDistance() {
      return this[minFlingDistance];
    }
    set minFlingDistance(value) {
      this[minFlingDistance] = value;
    }
    get minFlingVelocity() {
      return this[minFlingVelocity];
    }
    set minFlingVelocity(value) {
      this[minFlingVelocity] = value;
    }
    get maxFlingVelocity() {
      return this[maxFlingVelocity];
    }
    set maxFlingVelocity(value) {
      this[maxFlingVelocity] = value;
    }
    isPointerAllowed(event) {
      if (this[_initialButtons$0] == null) {
        switch (event.buttons) {
          case src__gestures__events.kPrimaryButton:
          {
            if (this.onDown == null && this.onStart == null && this.onUpdate == null && this.onEnd == null && this.onCancel == null) return false;
            break;
          }
          default:
          {
            return false;
          }
        }
      } else {
        if (event.buttons != this[_initialButtons$0]) {
          return false;
        }
      }
      return super.isPointerAllowed(src__gestures__events.PointerDownEvent._check(event));
    }
    addAllowedPointer(event) {
      this.startTrackingPointer(event.pointer, event.transform);
      this[_velocityTrackers$][$_set](event.pointer, new src__gestures__velocity_tracker.VelocityTracker.new());
      if (dart.equals(this[_state$1], src__gestures__monodrag._DragState.ready)) {
        this[_state$1] = src__gestures__monodrag._DragState.possible;
        this[_initialPosition] = new src__gestures__recognizer.OffsetPair.new({global: event.position, local: event.localPosition});
        this[_initialButtons$0] = event.buttons;
        this[_pendingDragOffset] = src__gestures__recognizer.OffsetPair.zero;
        this[_globalDistanceMoved] = 0.0;
        this[_lastPendingEventTimestamp$] = event.timeStamp;
        this[_lastTransform] = event.transform;
        this[_checkDown$]();
      } else if (dart.equals(this[_state$1], src__gestures__monodrag._DragState.accepted)) {
        this.resolve(src__gestures__arena.GestureDisposition.accepted);
      }
    }
    handleEvent(event) {
      let t16;
      if (!!dart.equals(this[_state$1], src__gestures__monodrag._DragState.ready)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/monodrag.dart", 245, 12, "_state != _DragState.ready");
      if (!dart.test(event.synthesized) && (src__gestures__events.PointerDownEvent.is(event) || src__gestures__events.PointerMoveEvent.is(event))) {
        let tracker = this[_velocityTrackers$][$_get](event.pointer);
        if (!(tracker != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/monodrag.dart", 249, 14, "tracker != null");
        tracker.addPosition(event.timeStamp, event.localPosition);
      }
      if (src__gestures__events.PointerMoveEvent.is(event)) {
        if (event.buttons != this[_initialButtons$0]) {
          this.resolve(src__gestures__arena.GestureDisposition.rejected);
          this.stopTrackingPointer(event.pointer);
          return;
        }
        if (dart.equals(this[_state$1], src__gestures__monodrag._DragState.accepted)) {
          this[_checkUpdate]({sourceTimeStamp: event.timeStamp, delta: this[_getDeltaForDetails](event.localDelta), primaryDelta: this[_getPrimaryValueFromOffset](event.localDelta), globalPosition: event.position, localPosition: event.localPosition});
        } else {
          this[_pendingDragOffset] = this[_pendingDragOffset]['+'](new src__gestures__recognizer.OffsetPair.new({local: event.localDelta, global: event.delta}));
          this[_lastPendingEventTimestamp$] = event.timeStamp;
          this[_lastTransform] = event.transform;
          let movedLocally = this[_getDeltaForDetails](event.localDelta);
          let localToGlobalTransform = event.transform == null ? null : vector_math_64$.Matrix4.tryInvert(event.transform);
          this[_globalDistanceMoved] = dart.notNull(this[_globalDistanceMoved]) + dart.notNull(src__gestures__events.PointerEvent.transformDeltaViaPositions({transform: localToGlobalTransform, untransformedDelta: movedLocally, untransformedEndPosition: event.localPosition}).distance) * (t16 = this[_getPrimaryValueFromOffset](movedLocally), t16 == null ? 1.0 : t16)[$sign];
          if (dart.test(this[_hasSufficientGlobalDistanceToAccept])) this.resolve(src__gestures__arena.GestureDisposition.accepted);
        }
      }
      this.stopTrackingIfPointerNoLongerDown(event);
    }
    acceptGesture(pointer) {
      if (!dart.equals(this[_state$1], src__gestures__monodrag._DragState.accepted)) {
        this[_state$1] = src__gestures__monodrag._DragState.accepted;
        let delta = this[_pendingDragOffset];
        let timestamp = this[_lastPendingEventTimestamp$];
        let transform = this[_lastTransform];
        let localUpdateDelta = null;
        switch (this.dragStartBehavior) {
          case src__gestures__recognizer.DragStartBehavior.start:
          {
            this[_initialPosition] = this[_initialPosition]['+'](delta);
            localUpdateDelta = ui$.Offset.zero;
            break;
          }
          case src__gestures__recognizer.DragStartBehavior.down:
          {
            localUpdateDelta = this[_getDeltaForDetails](delta.local);
            break;
          }
        }
        this[_pendingDragOffset] = src__gestures__recognizer.OffsetPair.zero;
        this[_lastPendingEventTimestamp$] = null;
        this[_lastTransform] = null;
        this[_checkStart](timestamp);
        if (!dart.equals(localUpdateDelta, ui$.Offset.zero) && this.onUpdate != null) {
          let localToGlobal = transform != null ? vector_math_64$.Matrix4.tryInvert(transform) : null;
          let correctedLocalPosition = this[_initialPosition].local['+'](localUpdateDelta);
          let globalUpdateDelta = src__gestures__events.PointerEvent.transformDeltaViaPositions({untransformedEndPosition: correctedLocalPosition, untransformedDelta: localUpdateDelta, transform: localToGlobal});
          let updateDelta = new src__gestures__recognizer.OffsetPair.new({local: localUpdateDelta, global: globalUpdateDelta});
          let correctedPosition = this[_initialPosition]['+'](updateDelta);
          this[_checkUpdate]({sourceTimeStamp: timestamp, delta: localUpdateDelta, primaryDelta: this[_getPrimaryValueFromOffset](localUpdateDelta), globalPosition: correctedPosition.global, localPosition: correctedPosition.local});
        }
      }
    }
    rejectGesture(pointer) {
      this.stopTrackingPointer(pointer);
    }
    didStopTrackingLastPointer(pointer) {
      if (!!dart.equals(this[_state$1], src__gestures__monodrag._DragState.ready)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/monodrag.dart", 334, 12, "_state != _DragState.ready");
      switch (this[_state$1]) {
        case src__gestures__monodrag._DragState.ready:
        {
          break;
        }
        case src__gestures__monodrag._DragState.possible:
        {
          this.resolve(src__gestures__arena.GestureDisposition.rejected);
          this[_checkCancel$]();
          break;
        }
        case src__gestures__monodrag._DragState.accepted:
        {
          this[_checkEnd](pointer);
          break;
        }
      }
      this[_velocityTrackers$][$clear]();
      this[_initialButtons$0] = null;
      this[_state$1] = src__gestures__monodrag._DragState.ready;
    }
    [_checkDown$]() {
      if (!(this[_initialButtons$0] == src__gestures__events.kPrimaryButton)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/monodrag.dart", 354, 12, "_initialButtons == kPrimaryButton");
      let details = new src__gestures__drag_details.DragDownDetails.new({globalPosition: this[_initialPosition].global, localPosition: this[_initialPosition].local});
      if (this.onDown != null) this.invokeCallback(dart.void, "onDown", dart.fn(() => this.onDown(details), VoidTovoid()));
    }
    [_checkStart](timestamp) {
      if (!(this[_initialButtons$0] == src__gestures__events.kPrimaryButton)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/monodrag.dart", 364, 12, "_initialButtons == kPrimaryButton");
      let details = new src__gestures__drag_details.DragStartDetails.new({sourceTimeStamp: timestamp, globalPosition: this[_initialPosition].global, localPosition: this[_initialPosition].local});
      if (this.onStart != null) this.invokeCallback(dart.void, "onStart", dart.fn(() => this.onStart(details), VoidTovoid()));
    }
    [_checkUpdate](opts) {
      let sourceTimeStamp = opts && 'sourceTimeStamp' in opts ? opts.sourceTimeStamp : null;
      let delta = opts && 'delta' in opts ? opts.delta : null;
      let primaryDelta = opts && 'primaryDelta' in opts ? opts.primaryDelta : null;
      let globalPosition = opts && 'globalPosition' in opts ? opts.globalPosition : null;
      let localPosition = opts && 'localPosition' in opts ? opts.localPosition : null;
      if (!(this[_initialButtons$0] == src__gestures__events.kPrimaryButton)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/monodrag.dart", 381, 12, "_initialButtons == kPrimaryButton");
      let details = new src__gestures__drag_details.DragUpdateDetails.new({sourceTimeStamp: sourceTimeStamp, delta: delta, primaryDelta: primaryDelta, globalPosition: globalPosition, localPosition: localPosition});
      if (this.onUpdate != null) this.invokeCallback(dart.void, "onUpdate", dart.fn(() => this.onUpdate(details), VoidTovoid()));
    }
    [_checkEnd](pointer) {
      let t16, t16$;
      if (!(this[_initialButtons$0] == src__gestures__events.kPrimaryButton)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/monodrag.dart", 394, 12, "_initialButtons == kPrimaryButton");
      if (this.onEnd == null) return;
      let tracker = this[_velocityTrackers$][$_get](pointer);
      if (!(tracker != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/monodrag.dart", 399, 12, "tracker != null");
      let details = null;
      let debugReport = null;
      let estimate = tracker.getVelocityEstimate();
      if (estimate != null && dart.test(this.isFlingGesture(estimate))) {
        let velocity = new src__gestures__velocity_tracker.Velocity.new({pixelsPerSecond: estimate.pixelsPerSecond}).clampMagnitude((t16 = this.minFlingVelocity, t16 == null ? src__gestures__constants.kMinFlingVelocity : t16), (t16$ = this.maxFlingVelocity, t16$ == null ? src__gestures__constants.kMaxFlingVelocity : t16$));
        details = new src__gestures__drag_details.DragEndDetails.new({velocity: velocity, primaryVelocity: this[_getPrimaryValueFromOffset](velocity.pixelsPerSecond)});
        debugReport = dart.fn(() => dart.str(estimate) + "; fling at " + dart.str(velocity) + ".", VoidToString());
      } else {
        details = new src__gestures__drag_details.DragEndDetails.new({velocity: src__gestures__velocity_tracker.Velocity.zero, primaryVelocity: 0.0});
        debugReport = dart.fn(() => {
          if (estimate == null) return "Could not estimate velocity.";
          return dart.str(estimate) + "; judged to not be a fling.";
        }, VoidToString());
      }
      this.invokeCallback(dart.void, "onEnd", dart.fn(() => this.onEnd(details), VoidTovoid()), {debugReport: VoidToString()._check(debugReport)});
    }
    [_checkCancel$]() {
      if (!(this[_initialButtons$0] == src__gestures__events.kPrimaryButton)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/monodrag.dart", 430, 12, "_initialButtons == kPrimaryButton");
      if (this.onCancel != null) this.invokeCallback(dart.void, "onCancel", this.onCancel);
    }
    dispose() {
      this[_velocityTrackers$][$clear]();
      super.dispose();
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (EnumPropertyOfDragStartBehavior()).new("start behavior", this.dragStartBehavior));
    }
  };
  (src__gestures__monodrag.DragGestureRecognizer.new = function(opts) {
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    let kind = opts && 'kind' in opts ? opts.kind : null;
    let dragStartBehavior = opts && 'dragStartBehavior' in opts ? opts.dragStartBehavior : src__gestures__recognizer.DragStartBehavior.start;
    this[onDown] = null;
    this[onStart$0] = null;
    this[onUpdate$0] = null;
    this[onEnd$0] = null;
    this[onCancel] = null;
    this[minFlingDistance] = null;
    this[minFlingVelocity] = null;
    this[maxFlingVelocity] = null;
    this[_state$1] = src__gestures__monodrag._DragState.ready;
    this[_initialPosition] = null;
    this[_pendingDragOffset] = null;
    this[_lastPendingEventTimestamp$] = null;
    this[_initialButtons$0] = null;
    this[_lastTransform] = null;
    this[_globalDistanceMoved] = null;
    this[_velocityTrackers$] = new (IdentityMapOfint$VelocityTracker()).new();
    this[dragStartBehavior$] = dragStartBehavior;
    if (!(dragStartBehavior != null)) dart.assertFailed(null, "org-dartlang-app:///packages/flutter_web/src/gestures/monodrag.dart", 67, 15, "dragStartBehavior != null");
    src__gestures__monodrag.DragGestureRecognizer.__proto__.new.call(this, {debugOwner: debugOwner, kind: kind});
    ;
  }).prototype = src__gestures__monodrag.DragGestureRecognizer.prototype;
  dart.addTypeTests(src__gestures__monodrag.DragGestureRecognizer);
  const dragStartBehavior$ = Symbol("DragGestureRecognizer.dragStartBehavior");
  const onDown = Symbol("DragGestureRecognizer.onDown");
  const onStart$0 = Symbol("DragGestureRecognizer.onStart");
  const onUpdate$0 = Symbol("DragGestureRecognizer.onUpdate");
  const onEnd$0 = Symbol("DragGestureRecognizer.onEnd");
  const onCancel = Symbol("DragGestureRecognizer.onCancel");
  const minFlingDistance = Symbol("DragGestureRecognizer.minFlingDistance");
  const minFlingVelocity = Symbol("DragGestureRecognizer.minFlingVelocity");
  const maxFlingVelocity = Symbol("DragGestureRecognizer.maxFlingVelocity");
  dart.setMethodSignature(src__gestures__monodrag.DragGestureRecognizer, () => ({
    __proto__: dart.getMethods(src__gestures__monodrag.DragGestureRecognizer.__proto__),
    isPointerAllowed: dart.fnType(core.bool, [src__gestures__events.PointerEvent]),
    addAllowedPointer: dart.fnType(dart.void, [src__gestures__events.PointerEvent]),
    handleEvent: dart.fnType(dart.void, [src__gestures__events.PointerEvent]),
    didStopTrackingLastPointer: dart.fnType(dart.void, [core.int]),
    [_checkDown$]: dart.fnType(dart.void, []),
    [_checkStart]: dart.fnType(dart.void, [core.Duration]),
    [_checkUpdate]: dart.fnType(dart.void, [], {delta: ui$.Offset, globalPosition: ui$.Offset, localPosition: ui$.Offset, primaryDelta: core.double, sourceTimeStamp: core.Duration}),
    [_checkEnd]: dart.fnType(dart.void, [core.int]),
    [_checkCancel$]: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(src__gestures__monodrag.DragGestureRecognizer, "package:flutter_web/src/gestures/monodrag.dart");
  dart.setFieldSignature(src__gestures__monodrag.DragGestureRecognizer, () => ({
    __proto__: dart.getFields(src__gestures__monodrag.DragGestureRecognizer.__proto__),
    dragStartBehavior: dart.fieldType(src__gestures__recognizer.DragStartBehavior),
    onDown: dart.fieldType(dart.fnType(dart.void, [src__gestures__drag_details.DragDownDetails])),
    onStart: dart.fieldType(dart.fnType(dart.void, [src__gestures__drag_details.DragStartDetails])),
    onUpdate: dart.fieldType(dart.fnType(dart.void, [src__gestures__drag_details.DragUpdateDetails])),
    onEnd: dart.fieldType(dart.fnType(dart.void, [src__gestures__drag_details.DragEndDetails])),
    onCancel: dart.fieldType(dart.fnType(dart.void, [])),
    minFlingDistance: dart.fieldType(core.double),
    minFlingVelocity: dart.fieldType(core.double),
    maxFlingVelocity: dart.fieldType(core.double),
    [_state$1]: dart.fieldType(src__gestures__monodrag._DragState),
    [_initialPosition]: dart.fieldType(src__gestures__recognizer.OffsetPair),
    [_pendingDragOffset]: dart.fieldType(src__gestures__recognizer.OffsetPair),
    [_lastPendingEventTimestamp$]: dart.fieldType(core.Duration),
    [_initialButtons$0]: dart.fieldType(core.int),
    [_lastTransform]: dart.fieldType(vector_math_64$.Matrix4),
    [_globalDistanceMoved]: dart.fieldType(core.double),
    [_velocityTrackers$]: dart.finalFieldType(core.Map$(core.int, src__gestures__velocity_tracker.VelocityTracker))
  }));
  src__gestures__monodrag.VerticalDragGestureRecognizer = class VerticalDragGestureRecognizer extends src__gestures__monodrag.DragGestureRecognizer {
    isFlingGesture(estimate) {
      let t16, t16$;
      let minVelocity = (t16 = this.minFlingVelocity, t16 == null ? src__gestures__constants.kMinFlingVelocity : t16);
      let minDistance = (t16$ = this.minFlingDistance, t16$ == null ? src__gestures__constants.kTouchSlop : t16$);
      return estimate.pixelsPerSecond.dy[$abs]() > dart.notNull(minVelocity) && estimate.offset.dy[$abs]() > dart.notNull(minDistance);
    }
    get [_hasSufficientGlobalDistanceToAccept]() {
      return this[_globalDistanceMoved][$abs]() > dart.notNull(src__gestures__constants.kTouchSlop);
    }
    [_getDeltaForDetails](delta) {
      return new ui$.Offset.new(0.0, delta.dy);
    }
    [_getPrimaryValueFromOffset](value) {
      return value.dy;
    }
    get debugDescription() {
      return "vertical drag";
    }
  };
  (src__gestures__monodrag.VerticalDragGestureRecognizer.new = function(opts) {
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    let kind = opts && 'kind' in opts ? opts.kind : null;
    src__gestures__monodrag.VerticalDragGestureRecognizer.__proto__.new.call(this, {debugOwner: debugOwner, kind: kind});
    ;
  }).prototype = src__gestures__monodrag.VerticalDragGestureRecognizer.prototype;
  dart.addTypeTests(src__gestures__monodrag.VerticalDragGestureRecognizer);
  dart.setMethodSignature(src__gestures__monodrag.VerticalDragGestureRecognizer, () => ({
    __proto__: dart.getMethods(src__gestures__monodrag.VerticalDragGestureRecognizer.__proto__),
    isFlingGesture: dart.fnType(core.bool, [src__gestures__velocity_tracker.VelocityEstimate]),
    [_getDeltaForDetails]: dart.fnType(ui$.Offset, [ui$.Offset]),
    [_getPrimaryValueFromOffset]: dart.fnType(core.double, [ui$.Offset])
  }));
  dart.setGetterSignature(src__gestures__monodrag.VerticalDragGestureRecognizer, () => ({
    __proto__: dart.getGetters(src__gestures__monodrag.VerticalDragGestureRecognizer.__proto__),
    [_hasSufficientGlobalDistanceToAccept]: core.bool,
    debugDescription: core.String
  }));
  dart.setLibraryUri(src__gestures__monodrag.VerticalDragGestureRecognizer, "package:flutter_web/src/gestures/monodrag.dart");
  src__gestures__monodrag.HorizontalDragGestureRecognizer = class HorizontalDragGestureRecognizer extends src__gestures__monodrag.DragGestureRecognizer {
    isFlingGesture(estimate) {
      let t16, t16$;
      let minVelocity = (t16 = this.minFlingVelocity, t16 == null ? src__gestures__constants.kMinFlingVelocity : t16);
      let minDistance = (t16$ = this.minFlingDistance, t16$ == null ? src__gestures__constants.kTouchSlop : t16$);
      return estimate.pixelsPerSecond.dx[$abs]() > dart.notNull(minVelocity) && estimate.offset.dx[$abs]() > dart.notNull(minDistance);
    }
    get [_hasSufficientGlobalDistanceToAccept]() {
      return this[_globalDistanceMoved][$abs]() > dart.notNull(src__gestures__constants.kTouchSlop);
    }
    [_getDeltaForDetails](delta) {
      return new ui$.Offset.new(delta.dx, 0.0);
    }
    [_getPrimaryValueFromOffset](value) {
      return value.dx;
    }
    get debugDescription() {
      return "horizontal drag";
    }
  };
  (src__gestures__monodrag.HorizontalDragGestureRecognizer.new = function(opts) {
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    let kind = opts && 'kind' in opts ? opts.kind : null;
    src__gestures__monodrag.HorizontalDragGestureRecognizer.__proto__.new.call(this, {debugOwner: debugOwner, kind: kind});
    ;
  }).prototype = src__gestures__monodrag.HorizontalDragGestureRecognizer.prototype;
  dart.addTypeTests(src__gestures__monodrag.HorizontalDragGestureRecognizer);
  dart.setMethodSignature(src__gestures__monodrag.HorizontalDragGestureRecognizer, () => ({
    __proto__: dart.getMethods(src__gestures__monodrag.HorizontalDragGestureRecognizer.__proto__),
    isFlingGesture: dart.fnType(core.bool, [src__gestures__velocity_tracker.VelocityEstimate]),
    [_getDeltaForDetails]: dart.fnType(ui$.Offset, [ui$.Offset]),
    [_getPrimaryValueFromOffset]: dart.fnType(core.double, [ui$.Offset])
  }));
  dart.setGetterSignature(src__gestures__monodrag.HorizontalDragGestureRecognizer, () => ({
    __proto__: dart.getGetters(src__gestures__monodrag.HorizontalDragGestureRecognizer.__proto__),
    [_hasSufficientGlobalDistanceToAccept]: core.bool,
    debugDescription: core.String
  }));
  dart.setLibraryUri(src__gestures__monodrag.HorizontalDragGestureRecognizer, "package:flutter_web/src/gestures/monodrag.dart");
  src__gestures__monodrag.PanGestureRecognizer = class PanGestureRecognizer extends src__gestures__monodrag.DragGestureRecognizer {
    isFlingGesture(estimate) {
      let t16, t16$;
      let minVelocity = (t16 = this.minFlingVelocity, t16 == null ? src__gestures__constants.kMinFlingVelocity : t16);
      let minDistance = (t16$ = this.minFlingDistance, t16$ == null ? src__gestures__constants.kTouchSlop : t16$);
      return dart.notNull(estimate.pixelsPerSecond.distanceSquared) > dart.notNull(minVelocity) * dart.notNull(minVelocity) && dart.notNull(estimate.offset.distanceSquared) > dart.notNull(minDistance) * dart.notNull(minDistance);
    }
    get [_hasSufficientGlobalDistanceToAccept]() {
      return this[_globalDistanceMoved][$abs]() > dart.notNull(src__gestures__constants.kPanSlop);
    }
    [_getDeltaForDetails](delta) {
      return delta;
    }
    [_getPrimaryValueFromOffset](value) {
      return null;
    }
    get debugDescription() {
      return "pan";
    }
  };
  (src__gestures__monodrag.PanGestureRecognizer.new = function(opts) {
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    src__gestures__monodrag.PanGestureRecognizer.__proto__.new.call(this, {debugOwner: debugOwner});
    ;
  }).prototype = src__gestures__monodrag.PanGestureRecognizer.prototype;
  dart.addTypeTests(src__gestures__monodrag.PanGestureRecognizer);
  dart.setMethodSignature(src__gestures__monodrag.PanGestureRecognizer, () => ({
    __proto__: dart.getMethods(src__gestures__monodrag.PanGestureRecognizer.__proto__),
    isFlingGesture: dart.fnType(core.bool, [src__gestures__velocity_tracker.VelocityEstimate]),
    [_getDeltaForDetails]: dart.fnType(ui$.Offset, [ui$.Offset]),
    [_getPrimaryValueFromOffset]: dart.fnType(core.double, [ui$.Offset])
  }));
  dart.setGetterSignature(src__gestures__monodrag.PanGestureRecognizer, () => ({
    __proto__: dart.getGetters(src__gestures__monodrag.PanGestureRecognizer.__proto__),
    [_hasSufficientGlobalDistanceToAccept]: core.bool,
    debugDescription: core.String
  }));
  dart.setLibraryUri(src__gestures__monodrag.PanGestureRecognizer, "package:flutter_web/src/gestures/monodrag.dart");
  dart.trackLibraries("packages/flutter_web/src/animation/animation", {
    "package:flutter_web/src/services/text_editing.dart": src__services__text_editing,
    "package:flutter_web/src/painting/alignment.dart": src__painting__alignment,
    "package:flutter_web/src/painting/basic_types.dart": src__painting__basic_types,
    "package:flutter_web/src/services/system_chrome.dart": src__services__system_chrome,
    "package:flutter_web/src/services/system_channels.dart": src__services__system_channels,
    "package:flutter_web/src/services/platform_channel.dart": src__services__platform_channel,
    "package:flutter_web/src/services/platform_messages.dart": src__services__platform_messages,
    "package:flutter_web/src/services/message_codecs.dart": src__services__message_codecs,
    "package:flutter_web/src/services/message_codec.dart": src__services__message_codec,
    "package:flutter_web/src/animation/animations.dart": src__animation__animations,
    "package:flutter_web/src/animation/listener_helpers.dart": src__animation__listener_helpers,
    "package:flutter_web/src/animation/animation.dart": src__animation__animation,
    "package:flutter_web/src/animation/tween.dart": src__animation__tween,
    "package:flutter_web/src/animation/curves.dart": src__animation__curves,
    "package:flutter_web/src/gestures/eager.dart": src__gestures__eager,
    "package:flutter_web/src/gestures/recognizer.dart": src__gestures__recognizer,
    "package:flutter_web/src/gestures/pointer_router.dart": src__gestures__pointer_router,
    "package:flutter_web/src/gestures/events.dart": src__gestures__events,
    "package:flutter_web/src/gestures/team.dart": src__gestures__team,
    "package:flutter_web/src/gestures/binding.dart": src__gestures__binding,
    "package:flutter_web/src/gestures/pointer_signal_resolver.dart": src__gestures__pointer_signal_resolver,
    "package:flutter_web/src/gestures/hit_test.dart": src__gestures__hit_test,
    "package:flutter_web/src/gestures/debug.dart": src__gestures__debug,
    "package:flutter_web/src/gestures/converter.dart": src__gestures__converter,
    "package:flutter_web/src/gestures/arena.dart": src__gestures__arena,
    "package:flutter_web/src/util.dart": src__util,
    "package:flutter_web/src/gestures/constants.dart": src__gestures__constants,
    "package:flutter_web/src/services/system_sound.dart": src__services__system_sound,
    "package:flutter_web/src/painting/gradient.dart": src__painting__gradient,
    "package:flutter_web/src/services/raw_keyboard_fuchsia.dart": src__services__raw_keyboard_fuchsia,
    "package:flutter_web/src/services/raw_keyboard.dart": src__services__raw_keyboard,
    "package:flutter_web/src/services/raw_keyboard_linux.dart": src__services__raw_keyboard_linux,
    "package:flutter_web/src/services/keyboard_maps.dart": src__services__keyboard_maps,
    "package:flutter_web/src/services/keyboard_key.dart": src__services__keyboard_key,
    "package:flutter_web/src/services/raw_keyboard_macos.dart": src__services__raw_keyboard_macos,
    "package:flutter_web/src/services/raw_keyboard_android.dart": src__services__raw_keyboard_android,
    "package:flutter_web/src/gestures/drag.dart": src__gestures__drag,
    "package:flutter_web/src/gestures/drag_details.dart": src__gestures__drag_details,
    "package:flutter_web/src/gestures/velocity_tracker.dart": src__gestures__velocity_tracker,
    "package:flutter_web/src/gestures/lsq_solver.dart": src__gestures__lsq_solver,
    "package:flutter_web/src/painting/matrix_utils.dart": src__painting__matrix_utils,
    "package:flutter_web/src/services/clipboard.dart": src__services__clipboard,
    "package:flutter_web/src/services/system_navigator.dart": src__services__system_navigator,
    "package:flutter_web/src/widgets/icon_data.dart": src__widgets__icon_data,
    "package:flutter_web/src/gestures/multidrag.dart": src__gestures__multidrag,
    "package:flutter_web/src/painting/colors.dart": src__painting__colors,
    "package:flutter_web/src/painting/clip.dart": src__painting__clip,
    "package:flutter_web/src/widgets/scroll_simulation.dart": src__widgets__scroll_simulation,
    "package:flutter_web/src/animation/tween_sequence.dart": src__animation__tween_sequence,
    "package:flutter_web/src/gestures/scale.dart": src__gestures__scale,
    "package:flutter_web/src/painting/border_radius.dart": src__painting__border_radius,
    "package:flutter_web/src/painting/paint_utilities.dart": src__painting__paint_utilities,
    "package:flutter_web/src/gestures/tap.dart": src__gestures__tap,
    "package:flutter_web/src/scheduler/debug.dart": src__scheduler__debug,
    "package:flutter_web/src/painting/notched_shapes.dart": src__painting__notched_shapes,
    "package:flutter_web/src/painting/geometry.dart": src__painting__geometry,
    "package:flutter_web/src/gestures/force_press.dart": src__gestures__force_press,
    "package:flutter_web/src/gestures/long_press.dart": src__gestures__long_press,
    "package:flutter_web/src/painting/strut_style.dart": src__painting__strut_style,
    "package:flutter_web/src/painting/text_style.dart": src__painting__text_style,
    "package:flutter_web/src/scheduler/priority.dart": src__scheduler__priority,
    "package:flutter_web/src/widgets/icon_theme_data.dart": src__widgets__icon_theme_data,
    "package:flutter_web/src/painting/debug.dart": src__painting__debug,
    "package:flutter_web/src/services/platform_views.dart": src__services__platform_views,
    "package:flutter_web/src/gestures/multitap.dart": src__gestures__multitap,
    "package:flutter_web/src/semantics/binding.dart": src__semantics__binding,
    "package:flutter_web/src/semantics/debug.dart": src__semantics__debug,
    "package:flutter_web/src/painting/fractional_offset.dart": src__painting__fractional_offset,
    "package:flutter_web/src/services/haptic_feedback.dart": src__services__haptic_feedback,
    "package:flutter_web/src/painting/box_shadow.dart": src__painting__box_shadow,
    "package:flutter_web/src/painting/box_fit.dart": src__painting__box_fit,
    "package:flutter_web/src/gestures/monodrag.dart": src__gestures__monodrag
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["org-dartlang-app:///packages/flutter_web/src/services/text_editing.dart","org-dartlang-app:///packages/flutter_web/src/painting/alignment.dart","org-dartlang-app:///packages/flutter_web/src/painting/basic_types.dart","org-dartlang-app:///packages/flutter_web/src/services/system_chrome.dart","org-dartlang-app:///packages/flutter_web/src/services/system_channels.dart","org-dartlang-app:///packages/flutter_web/src/services/platform_channel.dart","org-dartlang-app:///packages/flutter_web/src/services/platform_messages.dart","org-dartlang-app:///packages/flutter_web/src/services/message_codecs.dart","org-dartlang-app:///packages/flutter_web/src/services/message_codec.dart","org-dartlang-app:///packages/flutter_web/src/animation/animation.dart","org-dartlang-app:///packages/flutter_web/src/animation/animations.dart","org-dartlang-app:///packages/flutter_web/src/animation/listener_helpers.dart","org-dartlang-app:///packages/flutter_web/src/animation/tween.dart","org-dartlang-app:///packages/flutter_web/src/animation/curves.dart","org-dartlang-app:///packages/flutter_web/src/gestures/arena.dart","org-dartlang-app:///packages/flutter_web/src/gestures/recognizer.dart","org-dartlang-app:///packages/flutter_web/src/gestures/eager.dart","org-dartlang-app:///packages/flutter_web/src/gestures/pointer_router.dart","org-dartlang-app:///packages/flutter_web/src/gestures/events.dart","org-dartlang-app:///packages/flutter_web/src/gestures/team.dart","org-dartlang-app:///packages/flutter_web/src/gestures/binding.dart","org-dartlang-app:///packages/flutter_web/src/gestures/pointer_signal_resolver.dart","org-dartlang-app:///packages/flutter_web/src/gestures/hit_test.dart","org-dartlang-app:///packages/flutter_web/src/gestures/debug.dart","org-dartlang-app:///packages/flutter_web/src/gestures/converter.dart","org-dartlang-app:///packages/flutter_web/src/util.dart","org-dartlang-app:///packages/flutter_web/src/gestures/constants.dart","org-dartlang-app:///packages/flutter_web/src/services/system_sound.dart","org-dartlang-app:///packages/flutter_web/src/painting/gradient.dart","org-dartlang-app:///packages/flutter_web/src/services/raw_keyboard.dart","org-dartlang-app:///packages/flutter_web/src/services/raw_keyboard_fuchsia.dart","org-dartlang-app:///packages/flutter_web/src/services/raw_keyboard_linux.dart","org-dartlang-app:///packages/flutter_web/src/services/keyboard_maps.dart","org-dartlang-app:///packages/flutter_web/src/services/keyboard_key.dart","org-dartlang-app:///packages/flutter_web/src/services/raw_keyboard_macos.dart","org-dartlang-app:///packages/flutter_web/src/services/raw_keyboard_android.dart","org-dartlang-app:///packages/flutter_web/src/gestures/drag.dart","org-dartlang-app:///packages/flutter_web/src/gestures/drag_details.dart","org-dartlang-app:///packages/flutter_web/src/gestures/velocity_tracker.dart","org-dartlang-app:///packages/flutter_web/src/gestures/lsq_solver.dart","org-dartlang-app:///packages/flutter_web/src/painting/matrix_utils.dart","org-dartlang-app:///packages/flutter_web/src/services/clipboard.dart","org-dartlang-app:///packages/flutter_web/src/services/system_navigator.dart","org-dartlang-app:///packages/flutter_web/src/widgets/icon_data.dart","org-dartlang-app:///packages/flutter_web/src/gestures/multidrag.dart","org-dartlang-app:///packages/flutter_web/src/painting/colors.dart","org-dartlang-app:///packages/flutter_web/src/painting/clip.dart","org-dartlang-app:///packages/flutter_web/src/widgets/scroll_simulation.dart","org-dartlang-app:///packages/flutter_web/src/animation/tween_sequence.dart","org-dartlang-app:///packages/flutter_web/src/gestures/scale.dart","org-dartlang-app:///packages/flutter_web/src/painting/border_radius.dart","org-dartlang-app:///packages/flutter_web/src/painting/paint_utilities.dart","org-dartlang-app:///packages/flutter_web/src/gestures/tap.dart","org-dartlang-app:///packages/flutter_web/src/scheduler/debug.dart","org-dartlang-app:///packages/flutter_web/src/painting/notched_shapes.dart","org-dartlang-app:///packages/flutter_web/src/painting/geometry.dart","org-dartlang-app:///packages/flutter_web/src/gestures/force_press.dart","org-dartlang-app:///packages/flutter_web/src/gestures/long_press.dart","org-dartlang-app:///packages/flutter_web/src/painting/strut_style.dart","org-dartlang-app:///packages/flutter_web/src/painting/text_style.dart","org-dartlang-app:///packages/flutter_web/src/scheduler/priority.dart","org-dartlang-app:///packages/flutter_web/src/widgets/icon_theme_data.dart","org-dartlang-app:///packages/flutter_web/src/painting/debug.dart","org-dartlang-app:///packages/flutter_web/src/services/platform_views.dart","org-dartlang-app:///packages/flutter_web/src/gestures/multitap.dart","org-dartlang-app:///packages/flutter_web/src/semantics/binding.dart","org-dartlang-app:///packages/flutter_web/src/semantics/debug.dart","org-dartlang-app:///packages/flutter_web/src/painting/fractional_offset.dart","org-dartlang-app:///packages/flutter_web/src/services/haptic_feedback.dart","org-dartlang-app:///packages/flutter_web/src/painting/box_shadow.dart","org-dartlang-app:///packages/flutter_web/src/painting/box_fit.dart","org-dartlang-app:///packages/flutter_web/src/gestures/monodrag.dart"],"names":[],"mappings":"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Ae,OAAO;;MAKxE,oDAAI;YAAG,oEAAoB,8BAAuB,2CAAe,OAAO;;MAKxE,oDAAI;YAAG,oEAAoB,8BAAuB,2CAAe,OAAO;;MAKxE,oDAAI;YAAG,oEAAoB,8BAAuB,2CAAe,OAAO;;MAKxE,oDAAI;YAAG,oEAAoB,8BAAuB,2CAAe,OAAO;;MAKxE,oDAAI;YAAG,oEAAoB,8BAAuB,2CAAe,OAAO;;MAKxE,oDAAI;YAAG,oEAAoB,8BAAuB,2CAAe,OAAO;;MAKxE,oDAAI;YAAG,oEAAoB,8BAAuB,2CAAe,OAAO;;MAKxE,oDAAI;YAAG,oEAAoB,8BAAuB,2CAAe,OAAO;;MAKxE,oDAAI;YAAG,oEAAoB,8BAAuB,2CAAe,OAAO;;MAKxE,oDAAI;YAAG,oEAAoB,8BAAuB,2CAAe,OAAO;;MAKxE,oDAAI;YAAG,oEAAoB,8BAAuB,2CAAe,OAAO;;MAKxE,oDAAI;YAAG,oEAAoB,8BAAuB,2CAAe,OAAO;;MAKxE,oDAAI;YAAG,oEAAoB,8BAAuB,2CAAe,OAAO;;MAKxE,oDAAI;YAAG,oEAAoB,8BAAuB,2CAAe,OAAO;;MAKxE,oDAAI;YAAG,oEAAoB,8BAAuB,2CAAe,OAAO;;MAKxE,oDAAI;YAAG,oEAAoB,8BAAuB,2CAAe,OAAO;;MAKxE,oDAAI;YAAG,oEAAoB,8BAAuB,2CAAe,OAAO;;MAKxE,oDAAI;YAAG,oEAAoB,8BAAuB,2CAAe,OAAO;;MAKxE,oDAAI;YAAG,oEAAoB,8BAAuB,2CAAe,OAAO;;MAKxE,oDAAI;YAAG,oEAAoB,8BAAuB,2CAAe,OAAO;;MAKxE,oDAAI;YAAG,oEAAoB,8BAAuB,2CAAe,OAAO;;MAKxE,oDAAI;YAAG,oEAAoB,8BAAuB,2CAAe,OAAO;;MAKxE,sDAAM;YAAG,oEAAoB,8BAAuB,2CAAe,OAAO;;MAK1E,sDAAM;YAAG,oEAAoB,8BAAuB,2CAAe,OAAO;;MAK1E,sDAAM;YAAG,oEAAoB,8BAAuB,2CAAe,OAAO;;MAK1E,sDAAM;YAAG,oEAAoB,8BAAuB,2CAAe,OAAO;;MAK1E,sDAAM;YAAG,oEAAoB,8BAAuB,2CAAe,OAAO;;MAK1E,sDAAM;YAAG,oEAAoB,8BAAuB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","file":"animation.ddc.js"}');
  // Exports:
  return {
    src__services__text_editing: src__services__text_editing,
    src__painting__alignment: src__painting__alignment,
    src__painting__basic_types: src__painting__basic_types,
    src__services__system_chrome: src__services__system_chrome,
    src__services__system_channels: src__services__system_channels,
    src__services__platform_channel: src__services__platform_channel,
    src__services__platform_messages: src__services__platform_messages,
    src__services__message_codecs: src__services__message_codecs,
    src__services__message_codec: src__services__message_codec,
    src__animation__animations: src__animation__animations,
    src__animation__listener_helpers: src__animation__listener_helpers,
    src__animation__animation: src__animation__animation,
    src__animation__tween: src__animation__tween,
    src__animation__curves: src__animation__curves,
    src__gestures__eager: src__gestures__eager,
    src__gestures__recognizer: src__gestures__recognizer,
    src__gestures__pointer_router: src__gestures__pointer_router,
    src__gestures__events: src__gestures__events,
    src__gestures__team: src__gestures__team,
    src__gestures__binding: src__gestures__binding,
    src__gestures__pointer_signal_resolver: src__gestures__pointer_signal_resolver,
    src__gestures__hit_test: src__gestures__hit_test,
    src__gestures__debug: src__gestures__debug,
    src__gestures__converter: src__gestures__converter,
    src__gestures__arena: src__gestures__arena,
    src__util: src__util,
    src__gestures__constants: src__gestures__constants,
    src__services__system_sound: src__services__system_sound,
    src__painting__gradient: src__painting__gradient,
    src__services__raw_keyboard_fuchsia: src__services__raw_keyboard_fuchsia,
    src__services__raw_keyboard: src__services__raw_keyboard,
    src__services__raw_keyboard_linux: src__services__raw_keyboard_linux,
    src__services__keyboard_maps: src__services__keyboard_maps,
    src__services__keyboard_key: src__services__keyboard_key,
    src__services__raw_keyboard_macos: src__services__raw_keyboard_macos,
    src__services__raw_keyboard_android: src__services__raw_keyboard_android,
    src__gestures__drag: src__gestures__drag,
    src__gestures__drag_details: src__gestures__drag_details,
    src__gestures__velocity_tracker: src__gestures__velocity_tracker,
    src__gestures__lsq_solver: src__gestures__lsq_solver,
    src__painting__matrix_utils: src__painting__matrix_utils,
    src__services__clipboard: src__services__clipboard,
    src__services__system_navigator: src__services__system_navigator,
    src__widgets__icon_data: src__widgets__icon_data,
    src__gestures__multidrag: src__gestures__multidrag,
    src__painting__colors: src__painting__colors,
    src__painting__clip: src__painting__clip,
    src__widgets__scroll_simulation: src__widgets__scroll_simulation,
    src__animation__tween_sequence: src__animation__tween_sequence,
    src__gestures__scale: src__gestures__scale,
    src__painting__border_radius: src__painting__border_radius,
    src__painting__paint_utilities: src__painting__paint_utilities,
    src__gestures__tap: src__gestures__tap,
    src__scheduler__debug: src__scheduler__debug,
    src__painting__notched_shapes: src__painting__notched_shapes,
    src__painting__geometry: src__painting__geometry,
    src__gestures__force_press: src__gestures__force_press,
    src__gestures__long_press: src__gestures__long_press,
    src__painting__strut_style: src__painting__strut_style,
    src__painting__text_style: src__painting__text_style,
    src__scheduler__priority: src__scheduler__priority,
    src__widgets__icon_theme_data: src__widgets__icon_theme_data,
    src__painting__debug: src__painting__debug,
    src__services__platform_views: src__services__platform_views,
    src__gestures__multitap: src__gestures__multitap,
    src__semantics__binding: src__semantics__binding,
    src__semantics__debug: src__semantics__debug,
    src__painting__fractional_offset: src__painting__fractional_offset,
    src__services__haptic_feedback: src__services__haptic_feedback,
    src__painting__box_shadow: src__painting__box_shadow,
    src__painting__box_fit: src__painting__box_fit,
    src__gestures__monodrag: src__gestures__monodrag
  };
});

//# sourceMappingURL=animation.ddc.js.map
